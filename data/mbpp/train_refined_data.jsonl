{"task_id": 511, "prompt": "from typing import List\n\n\ndef find_Min_Sum(number: int) -> int:\n    \"\"\" Find the minimum sum of factors of a given number.\n    >>> find_Min_Sum(12)\n    7\n    >>> find_Min_Sum(105)\n    15\n    >>> find_Min_Sum(2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 7\n    assert candidate(105) == 15\n    assert candidate(2) == 2\n", "entry_point": "find_Min_Sum"}
{"task_id": 512, "prompt": "from typing import Tuple, Dict\n\n\ndef count_element_freq(elements: Tuple) -> Dict[int, int]:\n    \"\"\" Count the frequency of each element in a mixed nested tuple.\n    >>> count_element_freq((5, 6, (5, 6), 7, (8, 9), 9))\n    {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    >>> count_element_freq((6, 7, (6, 7), 8, (9, 10), 10))\n    {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    >>> count_element_freq((7, 8, (7, 8), 9, (10, 11), 11))\n    {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((5, 6, (5, 6), 7, (8, 9), 9)) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\n    assert candidate((6, 7, (6, 7), 8, (9, 10), 10)) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\n    assert candidate((7, 8, (7, 8), 9, (10, 11), 11)) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}\n", "entry_point": "count_element_freq"}
{"task_id": 513, "prompt": "from typing import List, Tuple\n\n\ndef add_str(elements: Tuple[int, ...], string: str) -> List:\n    \"\"\" Convert tuple into list by adding the given string after every element.\n    >>> add_str((5, 6, 7, 4, 9), 'FDF')\n    [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    >>> add_str((7, 8, 9, 10), 'PF')\n    [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    >>> add_str((11, 14, 12, 1, 4), 'JH')\n    [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((5, 6, 7, 4, 9), 'FDF') == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\n    assert candidate((7, 8, 9, 10), 'PF') == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\n    assert candidate((11, 14, 12, 1, 4), 'JH') == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']\n", "entry_point": "add_str"}
{"task_id": 514, "prompt": "from typing import List, Tuple\n\n\ndef sum_elements(elements: Tuple[int, ...]) -> int:\n    \"\"\" Find the summation of tuple elements in the given tuple list.\n    >>> sum_elements((7, 8, 9, 1, 10, 7))\n    42\n    >>> sum_elements((1, 2, 3, 4, 5, 6))\n    21\n    >>> sum_elements((11, 12 ,13 ,45, 14))\n    95\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == 42\n    assert candidate((1, 2, 3, 4, 5, 6)) == 21\n    assert candidate((11, 12 ,13 ,45, 14)) == 95\n\n", "entry_point": "sum_elements"}
{"task_id": 515, "prompt": "from typing import List\n\n\ndef modular_sum(arr: List[int], n: int, m: int) -> bool:\n    \"\"\" Check if there is a subset of arr[] with sum divisible by m\n    >>> modular_sum([3, 1, 7, 5], 4, 6)\n    True\n    >>> modular_sum([1, 7], 2, 5)\n    False\n    >>> modular_sum([1, 6], 2, 5)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 1, 7, 5], 4, 6) == True\n    assert candidate([1, 7], 2, 5) == False\n    assert candidate([1, 6], 2, 5) == False\n\n", "entry_point": "modular_sum"}
{"task_id": 516, "prompt": "from typing import List\n\n\ndef radix_sort(elements: List[int]) -> List[int]:\n    \"\"\" Sort a list of elements using radix sort.\n    >>> radix_sort([15, 79, 25, 68, 37])\n    [15, 25, 37, 68, 79]\n    >>> radix_sort([9, 11, 8, 7, 3, 2])\n    [2, 3, 7, 8, 9, 11]\n    >>> radix_sort([36, 12, 24, 26, 29])\n    [12, 24, 26, 29, 36]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\n    assert candidate([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\n    assert candidate([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]\n", "entry_point": "radix_sort"}
{"task_id": 517, "prompt": "def largest_pos(numbers: List[int]) -> int:\n    \"\"\" Find the largest positive number from the given list.\n    >>> largest_pos([1,2,3,4,-1])\n    4\n    >>> largest_pos([0,1,2,-5,-1,6])\n    6\n    >>> largest_pos([0,0,1,0])\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,-1]) == 4\n    assert candidate([0,1,2,-5,-1,6]) == 6\n    assert candidate([0,0,1,0]) == 1\n", "entry_point": "largest_pos"}
{"task_id": 518, "prompt": "from typing import List\n\n\ndef sqrt_root(number: int) -> int:\n    \"\"\" Find the square root of a perfect number.\n    >>> sqrt_root(4)\n    2\n    >>> sqrt_root(16)\n    4\n    >>> sqrt_root(400)\n    20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 2\n    assert candidate(16) == 4\n    assert candidate(400) == 20\n", "entry_point": "sqrt_root"}
{"task_id": 519, "prompt": "from typing import List\n\n\ndef volume_tetrahedron(edge_length: float) -> float:\n    \"\"\" Calculate the volume of a tetrahedron given its edge length.\n    >>> volume_tetrahedron(10)\n    117.85\n    >>> volume_tetrahedron(15)\n    397.75\n    >>> volume_tetrahedron(20)\n    942.81\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 117.85\n    assert candidate(15) == 397.75\n    assert candidate(20) == 942.81\n\n", "entry_point": "volume_tetrahedron"}
{"task_id": 520, "prompt": "from typing import List\n\n\ndef get_lcm(numbers: List[int]) -> int:\n    \"\"\" Find the least common multiple (LCM) of the given array elements.\n    >>> get_lcm([2, 7, 3, 9, 4])\n    252\n    >>> get_lcm([1, 2, 8, 3])\n    24\n    >>> get_lcm([3, 8, 4, 10, 5])\n    120\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 7, 3, 9, 4]) == 252\n    assert candidate([1, 2, 8, 3]) == 24\n    assert candidate([3, 8, 4, 10, 5]) == 120\n", "entry_point": "get_lcm"}
{"task_id": 521, "prompt": "def check_isosceles(a: int, b: int, c: int) -> bool:\n    \"\"\" Check if the triangle with sides a, b, and c is scalene or not.\n    A scalene triangle has all sides of different lengths.\n    >>> check_isosceles(6, 8, 12)\n    True\n    >>> check_isosceles(6, 6, 12)\n    False\n    >>> check_isosceles(6, 15, 20)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 8, 12) == True\n    assert candidate(6, 6, 12) == False\n    assert candidate(6, 15, 20) == True\n", "entry_point": "check_isosceles"}
{"task_id": 522, "prompt": "from typing import List\n\n\ndef lbs(arr: List[int]) -> int:\n    \"\"\" Find the length of the longest bitonic subsequence in given array.\n    A subsequence is bitonic if it is first increasing and then decreasing.\n    >>> lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15])\n    7\n    >>> lbs([1, 11, 2, 10, 4, 5, 2, 1])\n    6\n    >>> lbs([80, 60, 30, 40, 20, 10])\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\n    assert candidate([1, 11, 2, 10, 4, 5, 2, 1]) == 6\n    assert candidate([80, 60, 30, 40, 20, 10]) == 5\n", "entry_point": "lbs"}
{"task_id": 523, "prompt": "from typing import List\n\n\ndef check_string(s: str) -> List[str]:\n    \"\"\" Check whether a given string has at least one capital letter, one lower case letter, one number, and a specified minimum length using a lambda function.\n    >>> check_string('python')\n    ['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be at least 8.']\n    >>> check_string('123python')\n    ['String must have 1 upper case character.']\n    >>> check_string('123Python')\n    ['Valid string.']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be at least 8.']\n    assert candidate('123python')==['String must have 1 upper case character.']\n    assert candidate('123Python')==['Valid string.']\n", "entry_point": "check_string"}
{"task_id": 524, "prompt": "from typing import List\n\n\ndef max_sum_increasing_subsequence(arr: List[int], n: int) -> int:\n    \"\"\" Find the sum of the maximum increasing subsequence from the given array.\n    >>> max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)\n    106\n    >>> max_sum_increasing_subsequence([3, 4, 5, 10], 4)\n    22\n    >>> max_sum_increasing_subsequence([10, 5, 4, 3], 4)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7) == 106\n    assert candidate([3, 4, 5, 10], 4) == 22\n    assert candidate([10, 5, 4, 3], 4) == 10\n\n", "entry_point": "max_sum_increasing_subsequence"}
{"task_id": 525, "prompt": "from typing import List\n\n\ndef parallel_lines(line1: List[int], line2: List[int]) -> bool:\n    \"\"\" Check whether two given lines are parallel or not.\n    >>> parallel_lines([2,3,4], [2,3,8])\n    True\n    >>> parallel_lines([2,3,4], [4,-3,8])\n    False\n    >>> parallel_lines([3,3],[5,5])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,3,4], [2,3,8]) == True\n    assert candidate([2,3,4], [4,-3,8]) == False\n    assert candidate([3,3],[5,5]) == True\n", "entry_point": "parallel_lines"}
{"task_id": 526, "prompt": "def capitalize_first_last_letters(text: str) -> str:\n    \"\"\" Capitalize the first and last letters of each word in the given string.\n    >>> capitalize_first_last_letters(\"python\")\n    'PythoN'\n    >>> capitalize_first_last_letters(\"bigdata\")\n    'BigdatA'\n    >>> capitalize_first_last_letters(\"Hadoop\")\n    'HadooP'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == \"PythoN\"\n    assert candidate(\"bigdata\") == \"BigdatA\"\n    assert candidate(\"Hadoop\") == \"HadooP\"\n", "entry_point": "capitalize_first_last_letters"}
{"task_id": 527, "prompt": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], n: int, sum: int) -> int:\n    \"\"\" Find all pairs in an integer array whose sum is equal to a given number.\n    >>> get_pairs_count([1, 5, 7, -1, 5], 5, 6)\n    3\n    >>> get_pairs_count([1, 5, 7, -1], 4, 6)\n    2\n    >>> get_pairs_count([1, 1, 1, 1], 4, 2)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 5, 7, -1, 5], 5, 6) == 3\n    assert candidate([1, 5, 7, -1], 4, 6) == 2\n    assert candidate([1, 1, 1, 1], 4, 2) == 6\n\n", "entry_point": "get_pairs_count"}
{"task_id": 528, "prompt": "from typing import List, Tuple\n\n\ndef min_length(lists: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\" Find the list of lists with minimum length and return its length and the list itself.\n    >>> min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (1, [0])\n    >>> min_length([[1], [5, 7], [10, 12, 14, 15]])\n    (1, [1])\n    >>> min_length([[5], [15, 20, 25]])\n    (1, [5])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0])\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == (1, [1])\n    assert candidate([[5], [15, 20, 25]]) == (1, [5])\n\n", "entry_point": "min_length"}
{"task_id": 529, "prompt": "from typing import List\n\n\ndef jacobsthal_lucas(n: int) -> int:\n    \"\"\" Find the nth Jacobsthal-Lucas number.\n    >>> jacobsthal_lucas(5)\n    31\n    >>> jacobsthal_lucas(2)\n    5\n    >>> jacobsthal_lucas(4)\n    17\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 31\n    assert candidate(2) == 5\n    assert candidate(4) == 17\n\n", "entry_point": "jacobsthal_lucas"}
{"task_id": 530, "prompt": "from typing import List\n\n\ndef negative_count(numbers: List[int]) -> float:\n    \"\"\" Calculate the ratio of negative numbers in an array of integers.\n    >>> negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.31\n    >>> negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.44\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.31\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.31\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.44\n", "entry_point": "negative_count"}
{"task_id": 531, "prompt": "from typing import List\n\n\ndef min_coins(coins: List[int], m: int, V: int) -> int:\n    \"\"\" Given a list of coin denominations and total value, find the minimum number of coins that make up that value.\n    >>> min_coins([9, 6, 5, 1], 4, 11)\n    2\n    >>> min_coins([4, 5, 6, 7, 8, 9], 6, 9)\n    1\n    >>> min_coins([1, 2, 3], 3, 4)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([9, 6, 5, 1], 4, 11) == 2\n    assert candidate([4, 5, 6, 7, 8, 9], 6, 9) == 1\n    assert candidate([1, 2, 3], 3, 4) == 2\n", "entry_point": "min_coins"}
{"task_id": 532, "prompt": "from typing import List\n\n\ndef check_permutation(str1: str, str2: str) -> bool:\n    \"\"\" Check if the two given strings are permutations of each other.\n    >>> check_permutation(\"abc\", \"cba\")\n    True\n    >>> check_permutation(\"test\", \"ttew\")\n    False\n    >>> check_permutation(\"xxyz\", \"yxzx\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abc\", \"cba\") == True\n    assert candidate(\"test\", \"ttew\") == False\n    assert candidate(\"xxyz\", \"yxzx\") == True\n", "entry_point": "check_permutation"}
{"task_id": 533, "prompt": "from typing import List, Tuple, Union\n\n\ndef remove_datatype(elements: Tuple[Union[int, float, str], ...], datatype: type) -> List[Union[int, float, str]]:\n    \"\"\" Remove elements of a specific data type from the given tuple.\n    >>> remove_datatype((4, 5, 4, 7.7, 1.2), int)\n    [7.7, 1.2]\n    >>> remove_datatype((7, 8, 9, \"SR\"), str)\n    [7, 8, 9]\n    >>> remove_datatype((7, 1.1, 2, 2.2), float)\n    [7, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\n    assert candidate((7, 8, 9, \"SR\"), str) == [7, 8, 9]\n    assert candidate((7, 1.1, 2, 2.2), float) == [7, 2]\n\n", "entry_point": "remove_datatype"}
{"task_id": 534, "prompt": "def search_literal(pattern: str, string: str) -> tuple:\n    \"\"\" Search a literal string in another string and return the start and end index of the pattern within the original string.\n    >>> search_literal('python', 'python programming language')\n    (0, 6)\n    >>> search_literal('programming', 'python programming language')\n    (7, 18)\n    >>> search_literal('language', 'python programming language')\n    (19, 27)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python', 'python programming language') == (0, 6)\n    assert candidate('programming', 'python programming language') == (7, 18)\n    assert candidate('language', 'python programming language') == (19, 27)\n\n", "entry_point": "search_literal"}
{"task_id": 535, "prompt": "from typing import List\n\n\ndef topbottom_surfacearea(radius: float) -> float:\n    \"\"\" Calculate the top or bottom surface area of a cylinder given its radius.\n    >>> topbottom_surfacearea(10)\n    314.15000000000003\n    >>> topbottom_surfacearea(5)\n    78.53750000000001\n    >>> topbottom_surfacearea(4)\n    50.264\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 314.15000000000003\n    assert candidate(5) == 78.53750000000001\n    assert candidate(4) == 50.264\n", "entry_point": "topbottom_surfacearea"}
{"task_id": 536, "prompt": "from typing import List\n\n\ndef nth_items(lst: List[int], n: int) -> List[int]:\n    \"\"\" Select every nth item from the given list.\n    >>> nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)\n    [1, 3, 5, 7, 9]\n    >>> nth_items([10, 15, 19, 17, 16, 18], 3)\n    [10, 17]\n    >>> nth_items([14, 16, 19, 15, 17], 4)\n    [14, 17]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9], 2) == [1, 3, 5, 7, 9]\n    assert candidate([10, 15, 19, 17, 16, 18], 3) == [10, 17]\n    assert candidate([14, 16, 19, 15, 17], 4) == [14, 17]\n", "entry_point": "nth_items"}
{"task_id": 537, "prompt": "def first_repeated_word(s: str) -> str:\n    \"\"\" Find the first repeated word in a given string.\n    >>> first_repeated_word(\"ab ca bc ab\")\n    'ab'\n    >>> first_repeated_word(\"ab ca bc\")\n    'None'\n    >>> first_repeated_word(\"ab ca bc ca ab bc\")\n    'ca'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ab ca bc ab\") == \"ab\"\n    assert candidate(\"ab ca bc\") == 'None'\n    assert candidate(\"ab ca bc ca ab bc\") == \"ca\"\n", "entry_point": "first_repeated_word"}
{"task_id": 538, "prompt": "from typing import Tuple\n\n\ndef string_list_to_tuple(s: str) -> Tuple[str, ...]:\n    \"\"\" Convert a given string to a tuple of characters.\n    >>> string_list_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_list_to_tuple(\"bigdata\")\n    ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    >>> string_list_to_tuple(\"language\")\n    ('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"bigdata\") == ('b', 'i', 'g', 'd', 'a', 't', 'a')\n    assert candidate(\"language\") == ('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')\n\n", "entry_point": "string_list_to_tuple"}
{"task_id": 539, "prompt": "from typing import List\n\n\ndef basesnum_coresspondingnum(bases: List[int], indices: List[int]) -> List[int]:\n    \"\"\" Create a list containing the power of said number in bases raised to the corresponding number in the index.\n    >>> basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    >>> basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70])\n    [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\n    assert candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70]) == [1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\n    assert candidate([4, 8, 12, 16, 20, 24, 28], [3, 6, 9, 12, 15, 18, 21]) == [64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]\n", "entry_point": "basesnum_coresspondingnum"}
{"task_id": 540, "prompt": "def find_Diff(arr: List[int], n: int) -> int:\n    \"\"\" Find the difference between the highest and least frequencies in a given array.\n    >>> find_Diff([1,1,2,2,7,8,4,5,1,4], 10)\n    2\n    >>> find_Diff([1,7,9,2,3,3,1,3,3], 9)\n    3\n    >>> find_Diff([1,2,1,2], 4)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,2,7,8,4,5,1,4], 10) == 2\n    assert candidate([1,7,9,2,3,3,1,3,3], 9) == 3\n    assert candidate([1,2,1,2], 4) == 0\n", "entry_point": "find_Diff"}
{"task_id": 541, "prompt": "def check_abundant(number: int) -> bool:\n    \"\"\" Determine if the given number is abundant. A number is considered abundant if the sum of its proper divisors\n    (excluding itself) is greater than the number itself.\n    >>> check_abundant(12)\n    True\n    >>> check_abundant(15)\n    False\n    >>> check_abundant(18)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == True\n    assert candidate(15) == False\n    assert candidate(18) == True\n", "entry_point": "check_abundant"}
{"task_id": 542, "prompt": "import re\n\n\ndef fill_spaces(text: str) -> str:\n    \"\"\" Replace all occurrences of spaces, commas, or dots with a colon in the given string.\n    >>> fill_spaces('Boult Curve Wireless Neckband')\n    'Boult:Curve:Wireless:Neckband'\n    >>> fill_spaces('Stereo, Sound. Sweatproof')\n    'Stereo:Sound:Sweatproof'\n    >>> fill_spaces('Probass, Curve. Audio')\n    'Probass:Curve:Audio'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\n    assert candidate('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\n    assert candidate('Probass Curve Audio') == 'Probass:Curve:Audio'\n\n", "entry_point": "fill_spaces"}
{"task_id": 543, "prompt": "def count_digits(num1: int, num2: int) -> int:\n    \"\"\" Add two numbers and return the number of digits in their sum.\n    >>> count_digits(9875, 10)\n    4\n    >>> count_digits(98759853034, 100)\n    11\n    >>> count_digits(1234567, 500)\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9875, 10) == 4\n    assert candidate(98759853034, 100) == 11\n    assert candidate(1234567, 500) == 7\n", "entry_point": "count_digits"}
{"task_id": 544, "prompt": "from typing import List, Tuple\n\n\ndef flatten_tuple(tuples: List[Tuple[str, ...]]) -> str:\n    \"\"\" Flatten the given list of tuples into a single string with each element separated by a space.\n    >>> flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])\n    '1 4 6 5 8 2 9 1 10'\n    >>> flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])\n    '2 3 4 6 9 3 2 2 11'\n    >>> flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])\n    '14 21 9 24 19 12 29 23 17'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\n    assert candidate([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\n    assert candidate([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'\n", "entry_point": "flatten_tuple"}
{"task_id": 545, "prompt": "def toggle_F_and_L_bits(number: int) -> int:\n    \"\"\" Toggle only the first and last bits of a given number.\n    >>> toggle_F_and_L_bits(10)\n    3\n    >>> toggle_F_and_L_bits(15)\n    6\n    >>> toggle_F_and_L_bits(20)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 3\n    assert candidate(15) == 6\n    assert candidate(20) == 5\n", "entry_point": "toggle_F_and_L_bits"}
{"task_id": 546, "prompt": "from typing import Optional\n\n\ndef last_occurence_char(s: str, char: str) -> Optional[int]:\n    \"\"\" Find the last occurrence of a character in a string.\n    >>> last_occurence_char(\"hello world\", 'l')\n    10\n    >>> last_occurence_char(\"language\", 'g')\n    7\n    >>> last_occurence_char(\"little\", 'y')\n    None\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"hello world\", 'l') == 10\n    assert candidate(\"language\", 'g') == 7\n    assert candidate(\"little\", 'y') == None\n", "entry_point": "last_occurence_char"}
{"task_id": 547, "prompt": "def Total_Hamming_Distance(n: int) -> int:\n    \"\"\" Find the sum of hamming distances of all consecutive numbers from 0 to n.\n    >>> Total_Hamming_Distance(4)\n    7\n    >>> Total_Hamming_Distance(2)\n    3\n    >>> Total_Hamming_Distance(5)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 7\n    assert candidate(2) == 3\n    assert candidate(5) == 8\n", "entry_point": "Total_Hamming_Distance"}
{"task_id": 548, "prompt": "from typing import List\n\n\ndef longest_increasing_subsequence(sequence: List[int]) -> int:\n    \"\"\" Find the length of the longest increasing subsequence of the given sequence.\n    >>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])\n    5\n    >>> longest_increasing_subsequence([3, 10, 2, 1, 20])\n    3\n    >>> longest_increasing_subsequence([50, 3, 10, 7, 40, 80])\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60]) == 5\n    assert candidate([3, 10, 2, 1, 20]) == 3\n    assert candidate([50, 3, 10, 7, 40, 80]) == 4\n", "entry_point": "longest_increasing_subsequence"}
{"task_id": 549, "prompt": "def odd_Num_Sum(n: int) -> int:\n    \"\"\" Find the sum of fifth power of first n odd natural numbers.\n    >>> odd_Num_Sum(1)\n    1\n    >>> odd_Num_Sum(2)\n    244\n    >>> odd_Num_Sum(3)\n    3369\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2) == 244\n    assert candidate(3) == 3369\n", "entry_point": "odd_Num_Sum"}
{"task_id": 550, "prompt": "from typing import List\n\n\ndef find_Max(arr: List[int], low: int, high: int) -> int:\n    \"\"\" Find the maximum element in a sorted and rotated array.\n    >>> find_Max([2,3,5,6,9],0,4)\n    9\n    >>> find_Max([3,4,5,2,1],0,4)\n    5\n    >>> find_Max([1,2,3],0,2)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,3,5,6,9],0,4) == 9\n    assert candidate([3,4,5,2,1],0,4) == 5\n    assert candidate([1,2,3],0,2) == 3\n\n", "entry_point": "find_Max"}
{"task_id": 551, "prompt": "from typing import List\n\n\ndef extract_column(matrix: List[List[int]], column: int) -> List[int]:\n    \"\"\" Extract a specified column from a given nested list.\n    >>> extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n    [1, 2, 1]\n    >>> extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n    [3, -5, 1]\n    >>> extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n    [1, 5, 1, 13, 5, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [1, 2, 1]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [3, -5, 1]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [1, 5, 1, 13, 5, 9]\n", "entry_point": "extract_column"}
{"task_id": 552, "prompt": "from typing import List\n\n\ndef Seq_Linear(sequence: List[int]) -> str:\n    \"\"\" Check whether a given sequence is linear or not.\n    >>> Seq_Linear([0,2,4,6,8,10])\n    'Linear Sequence'\n    >>> Seq_Linear([1,2,3])\n    'Linear Sequence'\n    >>> Seq_Linear([1,5,2])\n    'Non Linear Sequence'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0,2,4,6,8,10]) == \"Linear Sequence\"\n    assert candidate([1,2,3]) == \"Linear Sequence\"\n    assert candidate([1,5,2]) == \"Non Linear Sequence\"\n", "entry_point": "Seq_Linear"}
{"task_id": 553, "prompt": "def tuple_to_float(numbers: tuple) -> float:\n    \"\"\" Convert the given tuple to a floating-point number.\n    >>> tuple_to_float((4, 56))\n    4.56\n    >>> tuple_to_float((7, 256))\n    7.256\n    >>> tuple_to_float((8, 123))\n    8.123\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((4, 56)) == 4.56\n    assert candidate((7, 256)) == 7.256\n    assert candidate((8, 123)) == 8.123\n\n", "entry_point": "tuple_to_float"}
{"task_id": 554, "prompt": "from typing import List\n\n\ndef Split(numbers: List[int]) -> List[int]:\n    \"\"\" Find odd numbers from a mixed list.\n    >>> Split([1,2,3,4,5,6])\n    [1,3,5]\n    >>> Split([10,11,12,13])\n    [11,13]\n    >>> Split([7,8,9,1])\n    [7,9,1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6]) == [1,3,5]\n    assert candidate([10,11,12,13]) == [11,13]\n    assert candidate([7,8,9,1]) == [7,9,1]\n", "entry_point": "Split"}
{"task_id": 555, "prompt": "def difference(n: int) -> int:\n    \"\"\" Find the difference between the sum of cubes of first n natural numbers and the sum of first n natural numbers.\n    >>> difference(3)\n    30\n    >>> difference(5)\n    210\n    >>> difference(2)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n", "entry_point": "difference"}
{"task_id": 556, "prompt": "from typing import List\n\n\ndef find_Odd_Pair(numbers: List[int], n: int) -> int:\n    \"\"\" Count the pairs in the list where the XOR of the pair is an odd number.\n    >>> find_Odd_Pair([5,4,7,2,1], 5)\n    6\n    >>> find_Odd_Pair([7,2,8,1,0,5,11], 7)\n    12\n    >>> find_Odd_Pair([1,2,3], 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5,4,7,2,1], 5) == 6\n    assert candidate([7,2,8,1,0,5,11], 7) == 12\n    assert candidate([1,2,3], 3) == 2\n", "entry_point": "find_Odd_Pair"}
{"task_id": 557, "prompt": "def toggle_string(s: str) -> str:\n    \"\"\" Toggle the case of each character in the given string.\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Pangram\")\n    'pANGRAM'\n    >>> toggle_string(\"LIttLE\")\n    'liTTle'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Python\") == \"pYTHON\"\n    assert candidate(\"Pangram\") == \"pANGRAM\"\n    assert candidate(\"LIttLE\") == \"liTTle\"\n\n", "entry_point": "toggle_string"}
{"task_id": 558, "prompt": "def digit_distance_nums(num1: int, num2: int) -> int:\n    \"\"\" Calculate the digit distance between two integers.\n    The digit distance is the sum of the absolute differences between each pair of corresponding digits.\n    >>> digit_distance_nums(1,2)\n    1\n    >>> digit_distance_nums(23,56)\n    6\n    >>> digit_distance_nums(123,256)\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(23,56) == 6\n    assert candidate(123,256) == 7\n", "entry_point": "digit_distance_nums"}
{"task_id": 559, "prompt": "from typing import List\n\n\ndef max_sub_array_sum(numbers: List[int], size: int) -> int:\n    \"\"\" Find the largest sum of contiguous subarray within a one-dimensional array of numbers.\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    7\n    >>> max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)\n    8\n    >>> max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\n", "entry_point": "max_sub_array_sum"}
{"task_id": 560, "prompt": "from typing import Tuple\n\n\ndef union_elements(tuple1: Tuple[int], tuple2: Tuple[int]) -> Tuple[int]:\n    \"\"\" Find the union of elements of the given tuples.\n    >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 4, 5, 6, 7, 10)\n    >>> union_elements((1, 2, 3, 4), (3, 4, 5, 6))\n    (1, 2, 3, 4, 5, 6)\n    >>> union_elements((11, 12, 13, 14), (13, 15, 16, 17))\n    (11, 12, 13, 14, 15, 16, 17)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n    assert candidate((11, 12, 13, 14), (13, 15, 16, 17)) == (11, 12, 13, 14, 15, 16, 17)\n", "entry_point": "union_elements"}
{"task_id": 561, "prompt": "from typing import List, Tuple, Dict\n\n\ndef assign_elements(pairs: List[Tuple[int, int]]) -> Dict[int, List[int]]:\n    \"\"\" Assign with each element, its pair elements from other similar pairs in the given tuple.\n    >>> assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)])\n    {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    >>> assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)])\n    {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    >>> assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)])\n    {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)]) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\n    assert candidate([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)]) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\n    assert candidate([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)]) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}\n", "entry_point": "assign_elements"}
{"task_id": 562, "prompt": "def Find_Max_Length(list_of_lists: List[List[int]]) -> int:\n    \"\"\" Find the maximum length of sublist in a given list of lists.\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    >>> Find_Max_Length([[0,1],[2,2,],[3,2,1]])\n    3\n    >>> Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]])\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1],[1,4],[5,6,7,8]]) == 4\n    assert candidate([[0,1],[2,2,],[3,2,1]]) == 3\n    assert candidate([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5\n", "entry_point": "Find_Max_Length"}
{"task_id": 563, "prompt": "from typing import List\n\n\ndef extract_values(s: str) -> List[str]:\n    \"\"\" Extract values between quotation marks of a string.\n    >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n    ['Python', 'PHP', 'Java']\n    >>> extract_values('\"python\",\"program\",\"language\"')\n    ['python', 'program', 'language']\n    >>> extract_values('\"red\",\"blue\",\"green\",\"yellow\"')\n    ['red', 'blue', 'green', 'yellow']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n    assert candidate('\"python\",\"program\",\"language\"')==['python','program','language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']\n\n", "entry_point": "extract_values"}
{"task_id": 564, "prompt": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\" Count the number of pairs in the array that are not equal.\n    >>> count_Pairs([1,2,1], 3)\n    2\n    >>> count_Pairs([1,1,1,1], 4)\n    0\n    >>> count_Pairs([1,2,3,4,5], 5)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,1], 3) == 2\n    assert candidate([1,1,1,1], 4) == 0\n    assert candidate([1,2,3,4,5], 5) == 10\n", "entry_point": "count_Pairs"}
{"task_id": 565, "prompt": "def split(string: str) -> List[str]:\n    \"\"\" Split a string into characters.\n    >>> split('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    >>> split('Name')\n    ['N', 'a', 'm', 'e']\n    >>> split('program')\n    ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python') == ['p', 'y', 't', 'h', 'o', 'n']\n    assert candidate('Name') == ['N', 'a', 'm', 'e']\n    assert candidate('program') == ['p', 'r', 'o', 'g', 'r', 'a', 'm']\n", "entry_point": "split"}
{"task_id": 566, "prompt": "def sum_digits(n: int) -> int:\n    \"\"\" Given a non-negative integer n, return the sum of its digits.\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(12)\n    3\n    >>> sum_digits(97)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(345) == 12\n    assert candidate(12) == 3\n    assert candidate(97) == 16\n", "entry_point": "sum_digits"}
{"task_id": 567, "prompt": "from typing import List\n\n\ndef issort_list(numbers: List[int]) -> bool:\n    \"\"\" Check whether a specified list is sorted or not.\n    >>> issort_list([1,2,4,6,8,10,12,14,16,17])\n    True\n    >>> issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])\n    False\n    >>> issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,4,6,8,10,12,14,16,17])==True\n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20])==False\n\n", "entry_point": "issort_list"}
{"task_id": 568, "prompt": "def empty_list(n: int) -> list:\n    \"\"\" Create a list of n empty dictionaries.\n    >>> empty_list(5)\n    [{}, {}, {}, {}, {}]\n    >>> empty_list(6)\n    [{}, {}, {}, {}, {}, {}]\n    >>> empty_list(7)\n    [{}, {}, {}, {}, {}, {}, {}]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == [{}, {}, {}, {}, {}]\n    assert candidate(6) == [{}, {}, {}, {}, {}, {}]\n    assert candidate(7) == [{}, {}, {}, {}, {}, {}, {}]\n\n", "entry_point": "empty_list"}
{"task_id": 569, "prompt": "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\" Write a function to sort each sublist of strings in a given list of lists.\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    >>> sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])\n    [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n", "entry_point": "sort_sublists"}
{"task_id": 570, "prompt": "from typing import List\n\n\ndef remove_words(strings: List[str], patterns: List[str]) -> List[str]:\n    \"\"\" Remove words from a given list of strings that contain any of the specified patterns.\n    >>> remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])\n    ['Red', '', 'Green', 'Orange', 'White']\n    >>> remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])\n    ['Red &', 'Orange+', 'Green', 'Orange', 'White']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\n    assert candidate(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']\n", "entry_point": "remove_words"}
{"task_id": 571, "prompt": "from typing import List\n\n\ndef max_sum_pair_diff_lessthan_K(numbers: List[int], n: int, k: int) -> int:\n    \"\"\" Find maximum possible sum of disjoint pairs for the given array of integers and a number k.\n    >>> max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)\n    62\n    >>> max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)\n    25\n    >>> max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)\n    21\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\n    assert candidate([5, 15, 10, 300], 4, 12) == 25\n    assert candidate([1, 2, 3, 4, 5, 6], 6, 6) == 21\n\n", "entry_point": "max_sum_pair_diff_lessthan_K"}
{"task_id": 572, "prompt": "from typing import List\n\n\ndef two_unique_nums(numbers: List[int]) -> List[int]:\n    \"\"\" Remove two duplicate numbers from a given list of numbers.\n    >>> two_unique_nums([1,2,3,2,3,4,5])\n    [1, 4, 5]\n    >>> two_unique_nums([1,2,3,2,4,5])\n    [1, 3, 4, 5]\n    >>> two_unique_nums([1,2,3,4,5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,2,3,4,5]) == [1, 4, 5]\n    assert candidate([1,2,3,2,4,5]) == [1, 3, 4, 5]\n    assert candidate([1,2,3,4,5]) == [1, 2, 3, 4, 5]\n", "entry_point": "two_unique_nums"}
{"task_id": 573, "prompt": "from typing import List\n\n\ndef unique_product(numbers: List[int]) -> int:\n    \"\"\" Calculate the product of the unique numbers of a given list.\n    >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n    720000000\n    >>> unique_product([1, 2, 3, 1])\n    6\n    >>> unique_product([7, 8, 9, 0, 1, 1])\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\n    assert candidate([1, 2, 3, 1]) == 6\n    assert candidate([7, 8, 9, 0, 1, 1]) == 0\n", "entry_point": "unique_product"}
{"task_id": 574, "prompt": "from typing import List\n\n\ndef surfacearea_cylinder(radius: float, height: float) -> float:\n    \"\"\" Calculate the surface area of a cylinder given its radius and height.\n    >>> surfacearea_cylinder(10, 5)\n    942.45\n    >>> surfacearea_cylinder(4, 5)\n    226.18800000000002\n    >>> surfacearea_cylinder(4, 10)\n    351.848\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 5) == 942.45\n    assert candidate(4, 5) == 226.18800000000002\n    assert candidate(4, 10) == 351.848\n", "entry_point": "surfacearea_cylinder"}
{"task_id": 575, "prompt": "def count_no(n: int, m: int, start: int, end: int) -> int:\n    \"\"\" Find the nth number in a sequence from start to end which is not a multiple of m.\n    >>> count_no(2, 3, 1, 10)\n    5\n    >>> count_no(3, 6, 4, 20)\n    11\n    >>> count_no(5, 10, 4, 20)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 3, 1, 10) == 5\n    assert candidate(3, 6, 4, 20) == 11\n    assert candidate(5, 10, 4, 20) == 16\n", "entry_point": "count_no"}
{"task_id": 576, "prompt": "def is_Sub_Array(arr1: List[int], arr2: List[int], n1: int, n2: int) -> bool:\n    \"\"\" Check whether arr2 is a subarray of arr1 or not.\n    >>> is_Sub_Array([1,4,3,5],[1,2],4,2)\n    False\n    >>> is_Sub_Array([1,2,1],[1,2,1],3,3)\n    True\n    >>> is_Sub_Array([1,0,2,2],[2,2,0],4,3)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,4,3,5],[1,2],4,2) == False\n    assert candidate([1,2,1],[1,2,1],3,3) == True\n    assert candidate([1,0,2,2],[2,2,0],4,3) == False\n", "entry_point": "is_Sub_Array"}
{"task_id": 577, "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\" Return the last digit of the factorial of a given number.\n    >>> last_Digit_Factorial(4)\n    4\n    >>> last_Digit_Factorial(21)\n    0\n    >>> last_Digit_Factorial(30)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\n", "entry_point": "last_Digit_Factorial"}
{"task_id": 578, "prompt": "from typing import List\n\n\ndef interleave_lists(*args: List[int]) -> List[int]:\n    \"\"\" Interleave lists of the same length.\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    >>> interleave_lists([10,20],[15,2],[5,10])\n    [10, 15, 5, 20, 2, 10]\n    >>> interleave_lists([11,44], [10,15], [20,5])\n    [11, 10, 20, 44, 15, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\n    assert candidate([11,44], [10,15], [20,5])==[11,10,20,44,15,5]\n", "entry_point": "interleave_lists"}
{"task_id": 579, "prompt": "from typing import Tuple\n\n\ndef find_dissimilar(tuple1: Tuple[int], tuple2: Tuple[int]) -> Tuple[int]:\n    \"\"\" Find the dissimilar elements in the given two tuples.\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    >>> find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))\n    (1, 4, 7, 9)\n    >>> find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))\n    (11, 25, 34, 36)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36)) == (11, 25, 34, 36)\n", "entry_point": "find_dissimilar"}
{"task_id": 580, "prompt": "from typing import Tuple\n\n\ndef extract_even(numbers: Tuple) -> Tuple:\n    \"\"\" Extract the even elements in the nested mixed tuple.\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    >>> extract_even((5, 6, (8, 7, (4, 8)), 7, 9))\n    (6, (8, (4, 8)))\n    >>> extract_even((5, 6, (9, 8, (4, 6)), 8, 10))\n    (6, (8, (4, 6)), 8, 10)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)\n", "entry_point": "extract_even"}
{"task_id": 581, "prompt": "from typing import List\n\n\ndef surface_Area(base_edge: float, slant_height: float) -> float:\n    \"\"\" Calculate the surface area of a square pyramid given the base edge length and the slant height.\n    >>> surface_Area(3, 4)\n    33\n    >>> surface_Area(4, 5)\n    56\n    >>> surface_Area(1, 2)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 33\n    assert candidate(4, 5) == 56\n    assert candidate(1, 2) == 5\n\n", "entry_point": "surface_Area"}
{"task_id": 582, "prompt": "def is_dict_empty(d: dict) -> bool:\n    \"\"\" Check if the given dictionary is empty or not.\n    >>> is_dict_empty({})\n    True\n    >>> is_dict_empty({1: 'a'})\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({}) == True\n    assert candidate({10: 'a'}) == False\n    assert candidate({11: 'b'}) == False\n", "entry_point": "is_dict_empty"}
{"task_id": 583, "prompt": "def catalan_number(n: int) -> int:\n    \"\"\" Return the nth Catalan number.\n    >>> catalan_number(10)\n    16796\n    >>> catalan_number(9)\n    4862\n    >>> catalan_number(7)\n    429\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 16796\n    assert candidate(9) == 4862\n    assert candidate(7) == 429\n", "entry_point": "catalan_number"}
{"task_id": 584, "prompt": "import re\n\n\ndef find_adverbs(sentence: str) -> str:\n    \"\"\" Find all adverbs and their positions in a given sentence.\n    >>> find_adverbs(\"Clearly, he has no excuse for such behavior.\")\n    '0-7: Clearly'\n    >>> find_adverbs(\"Please handle the situation carefully.\")\n    '28-37: carefully'\n    >>> find_adverbs(\"Complete the task quickly.\")\n    '18-25: quickly'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\n    assert candidate(\"Please handle the situation carefully.\") == '28-37: carefully'\n    assert candidate(\"Complete the task quickly.\") == '18-25: quickly'\n", "entry_point": "find_adverbs"}
{"task_id": 585, "prompt": "from typing import List, Dict\n\n\ndef expensive_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    \"\"\" Find the n most expensive items from a given list of items using heap queue algorithm.\n    >>> expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)\n    [{'name': 'Item-2', 'price': 555.22}]\n    >>> expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2)\n    [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n    >>> expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)\n    [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2) == [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1) == [{'name': 'Item-2', 'price': 555.22}]\n", "entry_point": "expensive_items"}
{"task_id": 586, "prompt": "def split_Arr(arr: List[int], n: int, position: int) -> List[int]:\n    \"\"\" Split the array at the given position and add the first part to the end.\n    >>> split_Arr([12,10,5,6,52,36], 6, 2)\n    [5, 6, 52, 36, 12, 10]\n    >>> split_Arr([1,2,3,4], 4, 1)\n    [2, 3, 4, 1]\n    >>> split_Arr([0,1,2,3,4,5,6,7], 8, 3)\n    [3, 4, 5, 6, 7, 0, 1, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12,10,5,6,52,36], 6, 2) == [5, 6, 52, 36, 12, 10]\n    assert candidate([1,2,3,4], 4, 1) == [2, 3, 4, 1]\n    assert candidate([0,1,2,3,4,5,6,7], 8, 3) == [3, 4, 5, 6, 7, 0, 1, 2]\n", "entry_point": "split_Arr"}
{"task_id": 587, "prompt": "def list_tuple(lst: list) -> tuple:\n    \"\"\" Convert a list to a tuple.\n    >>> list_tuple([5, 10, 7, 4, 15, 3])\n    (5, 10, 7, 4, 15, 3)\n    >>> list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])\n    (2, 4, 5, 6, 2, 3, 4, 4, 7)\n    >>> list_tuple([58, 44, 56])\n    (58, 44, 56)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56]) == (58, 44, 56)\n", "entry_point": "list_tuple"}
{"task_id": 588, "prompt": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\" Find the difference between the largest and smallest value in the given list.\n    >>> big_diff([1,2,3,4])\n    3\n    >>> big_diff([4,5,12])\n    8\n    >>> big_diff([9,2,3])\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4]) == 3\n    assert candidate([4,5,12]) == 8\n    assert candidate([9,2,3]) == 7\n", "entry_point": "big_diff"}
{"task_id": 589, "prompt": "from typing import List\n\n\ndef perfect_squares(start: int, end: int) -> List[int]:\n    \"\"\" Find all perfect squares between two given numbers.\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    >>> perfect_squares(50, 100)\n    [64, 81, 100]\n    >>> perfect_squares(100, 200)\n    [100, 121, 144, 169, 196]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 30) == [1, 4, 9, 16, 25]\n    assert candidate(50, 100) == [64, 81, 100]\n    assert candidate(100, 200) == [100, 121, 144, 169, 196]\n\n", "entry_point": "perfect_squares"}
{"task_id": 590, "prompt": "from typing import Tuple\n\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    \"\"\" Convert polar coordinates (r, theta) to rectangular coordinates.\n    The function returns a tuple containing a tuple of the rectangular coordinates and a complex number representation.\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    >>> polar_rect(4, 7)\n    ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    >>> polar_rect(15, 17)\n    ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n    \"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    assert candidate(4, 7) == ((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\n    assert candidate(15, 17) == ((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))\n", "entry_point": "polar_rect"}
{"task_id": 591, "prompt": "from typing import List\n\n\ndef swap_List(elements: List[int]) -> List[int]:\n    \"\"\" Swap the first and last elements in a list.\n    >>> swap_List([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    >>> swap_List([1, 2, 3])\n    [3, 2, 1]\n    >>> swap_List([4, 5, 6])\n    [6, 5, 4]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\n", "entry_point": "swap_List"}
{"task_id": 592, "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\" Find sum of product of binomial coefficients.\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    56\n    >>> sum_Of_product(1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 15\n    assert candidate(4) == 56\n    assert candidate(1) == 1\n", "entry_point": "sum_Of_product"}
{"task_id": 593, "prompt": "def removezero_ip(ip_address: str) -> str:\n    \"\"\" Remove leading zeroes from an ip address.\n    >>> removezero_ip('216.08.094.196')\n    '216.8.94.196'\n    >>> removezero_ip('12.01.024')\n    '12.1.24'\n    >>> removezero_ip('216.08.094.0196')\n    '216.8.94.196'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('216.08.094.196') == '216.8.94.196'\n    assert candidate('12.01.024') == '12.1.24'\n    assert candidate('216.08.094.0196') == '216.8.94.196'\n", "entry_point": "removezero_ip"}
{"task_id": 594, "prompt": "from typing import List\n\n\ndef diff_even_odd(numbers: List[int]) -> int:\n    \"\"\" Find the difference of the first even and the first odd number in a given list.\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([1,2,3,4,5,6,7,8,9,10])\n    1\n    >>> diff_even_odd([1,5,7,9,10])\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8]) == 3\n    assert candidate([1,2,3,4,5,6,7,8,9,10]) == 1\n    assert candidate([1,5,7,9,10]) == 9\n", "entry_point": "diff_even_odd"}
{"task_id": 595, "prompt": "def min_Swaps(s1: str, s2: str) -> Union[int, str]:\n    \"\"\" Given two binary strings, return the minimum number of swaps required to convert\n    s1 into s2. If it's not possible, return 'Not Possible'.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"111\",\"000\")\n    'Not Possible'\n    >>> min_Swaps(\"111\",\"110\")\n    'Not Possible'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"111\",\"000\") == \"Not Possible\"\n    assert candidate(\"111\",\"110\") == \"Not Possible\"\n", "entry_point": "min_Swaps"}
{"task_id": 596, "prompt": "from typing import Tuple\nimport sys\n\ndef tuple_size(t: Tuple) -> int:\n    \"\"\" Find the size of the given tuple.\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    >>> tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    >>> tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n    sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    assert candidate((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\")) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\n    assert candidate(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))\n", "entry_point": "tuple_size"}
{"task_id": 597, "prompt": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], n: int, m: int, k: int) -> int:\n    \"\"\" Find the kth element from the given two sorted arrays.\n    >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)\n    6\n    >>> find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)\n    256\n    >>> find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8\n", "entry_point": "find_kth"}
{"task_id": 598, "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\" Check whether the given number is an Armstrong number or not.\n    An Armstrong number is a number that is the sum of its own digits each raised to the power of the number of digits.\n    >>> armstrong_number(153)\n    True\n    >>> armstrong_number(259)\n    False\n    >>> armstrong_number(4458)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(153) == True\n    assert candidate(259) == False\n    assert candidate(4458) == False\n\n", "entry_point": "armstrong_number"}
{"task_id": 599, "prompt": "def sum_average(n: int) -> tuple:\n    \"\"\" Find sum and average of first n natural numbers.\n    >>> sum_average(10)\n    (55, 5.5)\n    >>> sum_average(15)\n    (120, 8.0)\n    >>> sum_average(20)\n    (210, 10.5)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == (55, 5.5)\n    assert candidate(15) == (120, 8.0)\n    assert candidate(20) == (210, 10.5)\n", "entry_point": "sum_average"}
{"task_id": 600, "prompt": "def is_Even(number: int) -> bool:\n    \"\"\" Check whether the given number is even or not using bitwise operator.\n    >>> is_Even(1)\n    False\n    >>> is_Even(2)\n    True\n    >>> is_Even(3)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == False\n    assert candidate(2) == True\n    assert candidate(3) == False\n", "entry_point": "is_Even"}
{"task_id": 601, "prompt": "from typing import List\n\n\nclass Pair:\n    def __init__(self, a: int, b: int):\n        self.a = a\n        self.b = b\n\n\ndef max_chain_length(pairs: List[Pair], n: int) -> int:\n    \"\"\" Find the longest chain which can be formed from a given set of pairs.\n    >>> max_chain_length([Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)], 4)\n    3\n    >>> max_chain_length([Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)], 4)\n    4\n    >>> max_chain_length([Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)], 4) == 3\n    assert candidate([Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)], 4) == 4\n    assert candidate([Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5\n", "entry_point": "max_chain_length"}
{"task_id": 602, "prompt": "def first_repeated_char(s: str) -> str:\n    \"\"\" Find the first repeated character in a given string.\n    >>> first_repeated_char(\"abcabc\")\n    'a'\n    >>> first_repeated_char(\"abc\")\n    'None'\n    >>> first_repeated_char(\"123123\")\n    '1'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcabc\") == \"a\"\n    assert candidate(\"abc\") == \"None\"\n    assert candidate(\"123123\") == \"1\"\n", "entry_point": "first_repeated_char"}
{"task_id": 603, "prompt": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\" Write a function to get a lucid number smaller than or equal to n.\n    >>> get_ludic(10)\n    [1, 2, 3, 5, 7]\n    >>> get_ludic(25)\n    [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    >>> get_ludic(45)\n    [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == [1, 2, 3, 5, 7]\n    assert candidate(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\n", "entry_point": "get_ludic"}
{"task_id": 604, "prompt": "def reverse_words(s: str) -> str:\n    \"\"\" Reverse the words in a given string.\n    >>> reverse_words(\"python program\")\n    'program python'\n    >>> reverse_words(\"java language\")\n    'language java'\n    >>> reverse_words(\"indian man\")\n    'man indian'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python program\") == \"program python\"\n    assert candidate(\"java language\") == \"language java\"\n    assert candidate(\"indian man\") == \"man indian\"\n", "entry_point": "reverse_words"}
{"task_id": 605, "prompt": "def prime_num(n: int) -> bool:\n    \"\"\" Check if the given integer is a prime number.\n    >>> prime_num(13)\n    True\n    >>> prime_num(7)\n    True\n    >>> prime_num(-1010)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(13) == True\n    assert candidate(7) == True\n    assert candidate(-1010) == False\n", "entry_point": "prime_num"}
{"task_id": 606, "prompt": "from typing import List\n\n\ndef radian_degree(degree: float) -> float:\n    \"\"\" Convert degrees to radians.\n    >>> radian_degree(90)\n    1.5707963267948966\n    >>> radian_degree(60)\n    1.0471975511965976\n    >>> radian_degree(120)\n    2.0943951023931953\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(90) == 1.5707963267948966\n    assert candidate(60) == 1.0471975511965976\n    assert candidate(120) == 2.0943951023931953\n\n", "entry_point": "radian_degree"}
{"task_id": 607, "prompt": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\" Search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    >>> find_literals('Its been a very crazy procedure right', 'crazy')\n    ('crazy', 16, 21)\n    >>> find_literals('Hardest choices required strongest will', 'will')\n    ('will', 35, 39)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n    assert candidate('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will') == ('will', 35, 39)\n", "entry_point": "find_literals"}
{"task_id": 608, "prompt": "def bell_Number(n: int) -> int:\n    \"\"\" Find the nth Bell number.\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(3)\n    5\n    >>> bell_Number(4)\n    15\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(3) == 5\n    assert candidate(4) == 15\n", "entry_point": "bell_Number"}
{"task_id": 609, "prompt": "from typing import List\n\n\ndef floor_Min(a: int, b: int, c: int) -> int:\n    \"\"\" Find minimum possible value for the given periodic function.\n    >>> floor_Min(10,20,30)\n    15\n    >>> floor_Min(1,2,1)\n    0\n    >>> floor_Min(11,10,9)\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10,20,30) == 15\n    assert candidate(1,2,1) == 0\n    assert candidate(11,10,9) == 9\n", "entry_point": "floor_Min"}
{"task_id": 610, "prompt": "from typing import List\n\n\ndef remove_kth_element(lst: List[int], k: int) -> List[int]:\n    \"\"\" Remove the k'th element from a given list.\n    >>> remove_kth_element([1,1,2,3,4,4,5,1], 3)\n    [1, 1, 3, 4, 4, 5, 1]\n    >>> remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)\n    [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    >>> remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)\n    [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\n", "entry_point": "remove_kth_element"}
{"task_id": 611, "prompt": "from typing import List, Tuple\n\n\ndef max_of_nth(tuples: List[Tuple[int, ...]], n: int) -> int:\n    \"\"\" Find the maximum value in the nth column of a list of tuples.\n    >>> max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    19\n    >>> max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n    10\n    >>> max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)\n    11\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11\n", "entry_point": "max_of_nth"}
{"task_id": 612, "prompt": "from typing import List\n\n\ndef merge(lists: List[List]) -> List[List]:\n    \"\"\" Write a python function to merge the first and last elements separately in a list of lists.\n    >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n    [['x', 'a', 'm'], ['y', 'b', 'n']]\n    >>> merge([[1, 2], [3, 4], [5, 6], [7, 8]])\n    [[1, 3, 5, 7], [2, 4, 6, 8]]\n    >>> merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']])\n    [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]\n", "entry_point": "merge"}
{"task_id": 613, "prompt": "from typing import List, Tuple\n\n\ndef maximum_value(records: List[Tuple[str, List[int]]]) -> List[Tuple[str, int]]:\n    \"\"\" Find the maximum value in record list as tuple attribute in the given tuple list.\n    >>> maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])\n    [('key1', 5), ('key2', 4), ('key3', 9)]\n    >>> maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])\n    [('key1', 6), ('key2', 5), ('key3', 10)]\n    >>> maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])\n    [('key1', 7), ('key2', 6), ('key3', 11)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\n    assert candidate([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\n    assert candidate([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]\n", "entry_point": "maximum_value"}
{"task_id": 614, "prompt": "from typing import List, Tuple\n\n\ndef cummulative_sum(tuples: List[Tuple[int, ...]]) -> int:\n    \"\"\" Find the cumulative sum of all the values that are present in the given tuple list.\n    >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n    30\n    >>> cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])\n    37\n    >>> cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])\n    44\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(1, 3), (5, 6, 7), (2, 6)]) == 30\n    assert candidate([(2, 4), (6, 7, 8), (3, 7)]) == 37\n    assert candidate([(3, 5), (7, 8, 9), (4, 8)]) == 44\n\n", "entry_point": "cummulative_sum"}
{"task_id": 615, "prompt": "from typing import List, Tuple\n\n\ndef average_tuple(tuples: Tuple[Tuple[int, ...], ...]) -> List[float]:\n    \"\"\" Calculate the average of each corresponding element in a tuple of tuples and return the averages as a list.\n    >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n    [30.5, 34.25, 27.0, 23.25]\n    >>> average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))\n    [25.5, -18.0, 3.75]\n    >>> average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))\n    [305.0, 342.5, 270.0, 232.5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]\n    assert candidate(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3))) == [25.5, -18.0, 3.75]\n    assert candidate(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40))) == [305.0, 342.5, 270.0, 232.5]\n", "entry_point": "average_tuple"}
{"task_id": 616, "prompt": "from typing import Tuple\n\n\ndef tuple_modulo(tup1: Tuple[int], tup2: Tuple[int]) -> Tuple[int]:\n    \"\"\" Perform the modulo of elements in the given two tuples.\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    >>> tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))\n    (5, 5, 6, 1)\n    >>> tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))\n    (5, 6, 7, 1)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n", "entry_point": "tuple_modulo"}
{"task_id": 617, "prompt": "from typing import Tuple\n\n\ndef min_Jumps(x: int, y: int, d: int) -> float:\n    \"\"\" Calculate the minimum number of jumps of given length to reach a point of form (d, 0) from origin in a 2D plane.\n    >>> min_Jumps(3,4,11)\n    3.5\n    >>> min_Jumps(3,4,0)\n    0\n    >>> min_Jumps(11,14,11)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3,4,11) == 3.5\n    assert candidate(3,4,0) == 0\n    assert candidate(11,14,11) == 1\n", "entry_point": "min_Jumps"}
{"task_id": 618, "prompt": "from typing import List\n\n\ndef div_list(numerators: List[int], denominators: List[int]) -> List[float]:\n    \"\"\"\n    Divide elements of two lists element-wise using map and lambda function.\n    >>> div_list([4, 5, 6], [1, 2, 3])\n    [4.0, 2.5, 2.0]\n    >>> div_list([3, 2], [1, 4])\n    [3.0, 0.5]\n    >>> div_list([90, 120], [50, 70])\n    [1.8, 1.7142857142857142]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n    assert candidate([3, 2], [1, 4]) == [3.0, 0.5]\n    assert candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142]\n", "entry_point": "div_list"}
{"task_id": 619, "prompt": "def move_num(s: str) -> str:\n    \"\"\" Move all the numbers in the given string to the end of the string.\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreethousand1143553000'\n    >>> move_num('Avengers124Assemble')\n    'AvengersAssemble124'\n    >>> move_num('Its11our12path13to14see15things16do17things')\n    'Itsourpathtoseethingsdothings11121314151617'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n", "entry_point": "move_num"}
{"task_id": 620, "prompt": "from typing import List\n\n\ndef largest_subset(numbers: List[int]) -> int:\n    \"\"\" Find the largest subset of numbers where each pair of numbers is divisible.\n    >>> largest_subset([1, 3, 6, 13, 17, 18])\n    4\n    >>> largest_subset([10, 5, 3, 15, 20])\n    3\n    >>> largest_subset([18, 1, 3, 6, 13, 17])\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 6, 13, 17, 18]) == 4\n    assert candidate([10, 5, 3, 15, 20]) == 3\n    assert candidate([18, 1, 3, 6, 13, 17]) == 4\n", "entry_point": "largest_subset"}
{"task_id": 621, "prompt": "from typing import List\n\n\ndef increment_numerics(strings: List[str], k: int) -> List[str]:\n    \"\"\" Write a function to increment the numeric values in the given strings by k.\n    >>> increment_numerics(['MSM', '234', 'is', '98', '123', 'best', '4'], 6)\n    ['MSM', '240', 'is', '104', '129', 'best', '10']\n    >>> increment_numerics(['Dart', '356', 'is', '88', '169', 'Super', '6'], 12)\n    ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    >>> increment_numerics(['Flutter', '451', 'is', '44', '96', 'Magnificent', '12'], 33)\n    ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['MSM', '234', 'is', '98', '123', 'best', '4'], 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\n    assert candidate(['Dart', '356', 'is', '88', '169', 'Super', '6'], 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\n    assert candidate(['Flutter', '451', 'is', '44', '96', 'Magnificent', '12'], 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']\n", "entry_point": "increment_numerics"}
{"task_id": 622, "prompt": "from typing import List\n\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\" Find the median of two sorted arrays of same size.\n    >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n    16.0\n    >>> get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)\n    8.5\n    >>> get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)\n    25.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0\n\n", "entry_point": "get_median"}
{"task_id": 623, "prompt": "from typing import List\n\n\ndef nth_nums(numbers: List[int], n: int) -> List[int]:\n    \"\"\"\n    Find the n-th power of individual elements in a list using lambda function.\n    >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    >>> nth_nums([10, 20, 30], 3)\n    [1000, 8000, 27000]\n    >>> nth_nums([12, 15], 5)\n    [248832, 759375]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    assert candidate([10, 20, 30], 3) == [1000, 8000, 27000]\n    assert candidate([12, 15], 5) == [248832, 759375]\n", "entry_point": "nth_nums"}
{"task_id": 624, "prompt": "def is_upper(s: str) -> str:\n    \"\"\" Convert the given string to upper case.\n    >>> is_upper(\"person\")\n    'PERSON'\n    >>> is_upper(\"final\")\n    'FINAL'\n    >>> is_upper(\"Valid\")\n    'VALID'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"person\") == \"PERSON\"\n    assert candidate(\"final\") == \"FINAL\"\n    assert candidate(\"Valid\") == \"VALID\"\n", "entry_point": "is_upper"}
{"task_id": 625, "prompt": "from typing import List\n\n\ndef swap_List(elements: List[int]) -> List[int]:\n    \"\"\" Interchange the first and last elements in a given list.\n    >>> swap_List([1, 2, 3])\n    [3, 2, 1]\n    >>> swap_List([1, 2, 3, 4, 4])\n    [4, 2, 3, 4, 1]\n    >>> swap_List([4, 5, 6])\n    [6, 5, 4]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([1, 2, 3, 4, 4]) == [4, 2, 3, 4, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n", "entry_point": "swap_List"}
{"task_id": 626, "prompt": "from typing import List\n\n\ndef triangle_area(radius: float) -> float:\n    \"\"\" Calculate the area of the largest triangle that can be inscribed in a semicircle of a given radius.\n    >>> triangle_area(0)\n    0\n    >>> triangle_area(-1)\n    -1\n    >>> triangle_area(2)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(0) == 0\n    assert candidate(-1) == -1\n    assert candidate(2) == 4\n\n", "entry_point": "triangle_area"}
{"task_id": 627, "prompt": "from typing import List\n\n\ndef find_First_Missing(arr: List[int], start: int, end: int) -> int:\n    \"\"\" Find the smallest missing number from the given array.\n    >>> find_First_Missing([0,1,2,3], 0, 3)\n    4\n    >>> find_First_Missing([0,1,2,6,9], 0, 4)\n    3\n    >>> find_First_Missing([2,3,5,8,9], 0, 4)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0,1,2,3],0,3) == 4\n    assert candidate([0,1,2,6,9],0,4) == 3\n    assert candidate([2,3,5,8,9],0,4) == 0\n", "entry_point": "find_First_Missing"}
{"task_id": 628, "prompt": "def replace_spaces(s: str) -> str:\n    \"\"\" Replace all spaces in the given string with '%20'.\n    >>> replace_spaces(\"My Name is Dawood\")\n    'My%20Name%20is%20Dawood'\n    >>> replace_spaces(\"I am a Programmer\")\n    'I%20am%20a%20Programmer'\n    >>> replace_spaces(\"I love Coding\")\n    'I%20love%20Coding'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n    assert candidate(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\n    assert candidate(\"I love Coding\") == 'I%20love%20Coding'\n", "entry_point": "replace_spaces"}
{"task_id": 629, "prompt": "from typing import List\n\n\ndef Split(numbers: List[int]) -> List[int]:\n    \"\"\" Find even numbers from a mixed list.\n    >>> Split([1,2,3,4,5])\n    [2, 4]\n    >>> Split([4,5,6,7,8,0,1])\n    [4, 6, 8, 0]\n    >>> Split([8,12,15,19])\n    [8, 12]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5]) == [2,4]\n    assert candidate([4,5,6,7,8,0,1]) == [4,6,8,0]\n    assert candidate([8,12,15,19]) == [8,12]\n", "entry_point": "Split"}
{"task_id": 630, "prompt": "def get_coordinates(coordinate: tuple) -> list:\n    \"\"\" Extract all the adjacent coordinates of the given coordinate tuple.\n    >>> get_coordinates((3, 4))\n    [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    >>> get_coordinates((4, 5))\n    [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    >>> get_coordinates((5, 6))\n    [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n    \"\"\n", "test": "def check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n", "entry_point": "get_coordinates"}
{"task_id": 631, "prompt": "import re\n\n\ndef replace_spaces(text: str) -> str:\n    \"\"\" Replace whitespaces with an underscore and vice versa in a given string by using regex.\n    >>> replace_spaces('Jumanji The Jungle')\n    'Jumanji_The_Jungle'\n    >>> replace_spaces('The_Avengers')\n    'The Avengers'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    assert candidate('The Avengers') == 'The_Avengers'\n    assert candidate('Fast and Furious') == 'Fast_and_Furious'\n    assert candidate('Jumanji_The_Jungle') == 'Jumanji The Jungle'\n    assert candidate('The_Avengers') == 'The Avengers'\n    assert candidate('Fast_and_Furious') == 'Fast and Furious'\n\n", "entry_point": "replace_spaces"}
{"task_id": 632, "prompt": "from typing import List\n\n\ndef move_zero(numbers: List[int]) -> List[int]:\n    \"\"\" Move all zeroes in the given list to the end of the list.\n    >>> move_zero([1,0,2,0,3,4])\n    [1, 2, 3, 4, 0, 0]\n    >>> move_zero([2,3,2,0,0,4,0,5,0])\n    [2, 3, 2, 4, 5, 0, 0, 0, 0]\n    >>> move_zero([0,1,0,1,1])\n    [1, 1, 1, 0, 0]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n    assert candidate([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\n    assert candidate([0,1,0,1,1]) == [1,1,1,0,0]\n", "entry_point": "move_zero"}
{"task_id": 633, "prompt": "from typing import List\n\n\ndef pair_OR_Sum(arr: List[int], n: int) -> int:\n    \"\"\" Find the sum of xor of all pairs of numbers in the given array.\n    >>> pair_OR_Sum([5,9,7,6], 4)\n    47\n    >>> pair_OR_Sum([7,3,5], 3)\n    12\n    >>> pair_OR_Sum([7,3], 2)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5,9,7,6], 4) == 47\n    assert candidate([7,3,5], 3) == 12\n    assert candidate([7,3], 2) == 4\n\n", "entry_point": "pair_OR_Sum"}
{"task_id": 634, "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\" Find the sum of fourth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    272\n    >>> even_Power_Sum(3)\n    1568\n    >>> even_Power_Sum(4)\n    5664\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 272\n    assert candidate(3) == 1568\n    assert candidate(4) == 5664\n\n", "entry_point": "even_Power_Sum"}
{"task_id": 635, "prompt": "from typing import List\nimport heapq\n\ndef heap_sort(values: List[int]) -> List[int]:\n    \"\"\" Push all values into a heap and then pop off the smallest values one at a time.\n    >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    >>> heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    >>> heap_sort([7, 1, 9, 5])\n    [1, 5, 7, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5])==[1, 5, 7, 9]\n", "entry_point": "heap_sort"}
{"task_id": 636, "prompt": "from typing import Tuple\n\n\ndef Check_Solution(a: float, b: float, c: float) -> str:\n    \"\"\" Check if roots of a quadratic equation are reciprocal of each other or not.\n    >>> Check_Solution(2, 0, 2)\n    'Yes'\n    >>> Check_Solution(2, -5, 2)\n    'Yes'\n    >>> Check_Solution(1, 2, 3)\n    'No'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 0, 2) == 'Yes'\n    assert candidate(2, -5, 2) == 'Yes'\n    assert candidate(1, 2, 3) == 'No'\n", "entry_point": "Check_Solution"}
{"task_id": 637, "prompt": "def noprofit_noloss(cost_price: float, selling_price: float) -> bool:\n    \"\"\" Check whether the given amount has no profit and no loss.\n    >>> noprofit_noloss(1500, 1200)\n    False\n    >>> noprofit_noloss(100, 100)\n    True\n    >>> noprofit_noloss(2000, 5000)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1500, 1200) == False\n    assert candidate(100, 100) == True\n    assert candidate(2000, 5000) == False\n\n", "entry_point": "noprofit_noloss"}
{"task_id": 638, "prompt": "def wind_chill(temperature: float, wind_speed: float) -> float:\n    \"\"\" Calculate the wind chill index given the temperature and wind speed.\n    >>> wind_chill(120, 35)\n    40\n    >>> wind_chill(40, 70)\n    86\n    >>> wind_chill(10, 100)\n    116\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(120, 35) == 40\n    assert candidate(40, 70) == 86\n    assert candidate(10, 100) == 116\n\n", "entry_point": "wind_chill"}
{"task_id": 639, "prompt": "from typing import List\n\n\ndef sample_nam(names: List[str]) -> int:\n    \"\"\" Sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    >>> sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    >>> sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n    10\n    >>> sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == 10\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == 6\n\n", "entry_point": "sample_nam"}
{"task_id": 640, "prompt": "def remove_parenthesis(s: str) -> str:\n    \"\"\" Remove the parenthesis area in a string.\n    >>> remove_parenthesis(\"python (chrome)\")\n    'python '\n    >>> remove_parenthesis(\"string(.abc)\")\n    'string'\n    >>> remove_parenthesis(\"alpha(num)\")\n    'alpha'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python (chrome)\") == \"python \"\n    assert candidate(\"string(.abc)\") == \"string\"\n    assert candidate(\"alpha(num)\") == \"alpha\"\n", "entry_point": "remove_parenthesis"}
{"task_id": 641, "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\" Return the nth nonagonal number.\n    >>> is_nonagonal(10)\n    325\n    >>> is_nonagonal(15)\n    750\n    >>> is_nonagonal(18)\n    1089\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 325\n    assert candidate(15) == 750\n    assert candidate(18) == 1089\n", "entry_point": "is_nonagonal"}
{"task_id": 642, "prompt": "from typing import Set, Tuple\n\n\ndef remove_similar_row(matrix: Tuple[Tuple[Tuple[int, int], ...], ...]) -> Set[Tuple[Tuple[int, int], ...]]:\n    \"\"\" Write a function to remove similar rows from the given tuple matrix.\n    >>> remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] )\n    {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n    >>> remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] )\n    {((4, 3), (5, 6)), ((3, 3), (5, 7))}\n    >>> remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] )\n    {((4, 4), (6, 8)), ((5, 4), (6, 7))}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\n    assert candidate([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\n    assert candidate([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) == {((4, 4), (6, 8)), ((5, 4), (6, 7))}\n", "entry_point": "remove_similar_row"}
{"task_id": 643, "prompt": "import re\n\ndef text_match_wordz_middle(text: str) -> str:\n    \"\"\" Check if the text contains a 'z' not at the start or end of the word.\n    >>> text_match_wordz_middle(\"pythonzabc\")\n    'Found a match!'\n    >>> text_match_wordz_middle(\"xyzabc\")\n    'Found a match!'\n    >>> text_match_wordz_middle(\"lang\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"pythonzabc.\") == ('Found a match!')\n    assert candidate(\"xyzabc.\") == ('Found a match!')\n    assert candidate(\"  lang  .\") == ('Not matched!')\n", "entry_point": "text_match_wordz_middle"}
{"task_id": 644, "prompt": "from typing import List\n\n\ndef reverse_Array_Upto_K(arr: List[int], k: int) -> List[int]:\n    \"\"\" Reverse the elements of an array up to the given position (k), keeping the rest of the array in the same order.\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_Array_Upto_K([4, 5, 6, 7], 2)\n    [5, 4, 6, 7]\n    >>> reverse_Array_Upto_K([9, 8, 7, 6, 5], 3)\n    [7, 8, 9, 6, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    assert candidate([4, 5, 6, 7], 2) == [5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5], 3) == [7, 8, 9, 6, 5]\n\n", "entry_point": "reverse_Array_Upto_K"}
{"task_id": 645, "prompt": "from typing import List, Tuple\n\n\ndef find_k_product(tuples: List[Tuple[int, ...]], k: int) -> int:\n    \"\"\" Find the product of the kth index in the given tuples.\n    >>> find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)\n    665\n    >>> find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)\n    280\n    >>> find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)\n    210\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\n    assert candidate([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\n    assert candidate([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210\n", "entry_point": "find_k_product"}
{"task_id": 646, "prompt": "from typing import List\n\n\ndef No_of_cubes(n: int, k: int) -> int:\n    \"\"\" Calculate the number of cubes of size k in a cube of size n.\n    >>> No_of_cubes(2,1)\n    8\n    >>> No_of_cubes(5,2)\n    64\n    >>> No_of_cubes(1,1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2,1) == 8\n    assert candidate(5,2) == 64\n    assert candidate(1,1) == 1\n\n", "entry_point": "No_of_cubes"}
{"task_id": 647, "prompt": "import re\n\n\ndef split_upperstring(s: str) -> list:\n    \"\"\" Split a string at uppercase letters.\n    >>> split_upperstring(\"PythonProgramLanguage\")\n    ['Python', 'Program', 'Language']\n    >>> split_upperstring(\"PythonProgram\")\n    ['Python', 'Program']\n    >>> split_upperstring(\"ProgrammingLanguage\")\n    ['Programming', 'Language']\n    \"\"\"\n    return re.findall('[A-Z][^A-Z]*', s)\n", "test": "def check(candidate):\n    assert candidate(\"PythonProgramLanguage\") == ['Python', 'Program', 'Language']\n    assert candidate(\"PythonProgram\") == ['Python', 'Program']\n    assert candidate(\"ProgrammingLanguage\") == ['Programming', 'Language']\n", "entry_point": "split_upperstring"}
{"task_id": 648, "prompt": "from typing import List\n\n\ndef exchange_elements(elements: List[int]) -> List[int]:\n    \"\"\" Exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\n    >>> exchange_elements([0,1,2,3,4,5])\n    [1, 0, 3, 2, 5, 4]\n    >>> exchange_elements([5,6,7,8,9,10])\n    [6, 5, 8, 7, 10, 9]\n    >>> exchange_elements([25,35,45,55,75,95])\n    [35, 25, 55, 45, 95, 75]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0,1,2,3,4,5]) == [1, 0, 3, 2, 5, 4]\n    assert candidate([5,6,7,8,9,10]) == [6, 5, 8, 7, 10, 9]\n    assert candidate([25,35,45,55,75,95]) == [35, 25, 55, 45, 95, 75]\n", "entry_point": "exchange_elements"}
{"task_id": 649, "prompt": "from typing import List\n\n\ndef sum_Range_list(numbers: List[int], start_index: int, end_index: int) -> int:\n    \"\"\" Calculate the sum of the numbers in the list between the indices of a specified range (inclusive).\n    >>> sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    29\n    >>> sum_Range_list([1, 2, 3, 4, 5], 1, 2)\n    5\n    >>> sum_Range_list([1, 0, 1, 2, 5, 6], 4, 5)\n    11\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\n    assert candidate([1, 2, 3, 4, 5], 1, 2) == 5\n    assert candidate([1, 0, 1, 2, 5, 6], 4, 5) == 11\n", "entry_point": "sum_Range_list"}
{"task_id": 650, "prompt": "from typing import List\n\n\ndef are_Equal(arr1: List[int], arr2: List[int], n1: int, n2: int) -> bool:\n    \"\"\" Check whether the given two arrays are equal or not.\n    >>> are_Equal([1,2,3],[3,2,1],3,3)\n    True\n    >>> are_Equal([1,1,1],[2,2,2],3,3)\n    False\n    >>> are_Equal([8,9],[4,5,6],2,3)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3],[3,2,1],3,3) == True\n    assert candidate([1,1,1],[2,2,2],3,3) == False\n    assert candidate([8,9],[4,5,6],2,3) == False\n", "entry_point": "are_Equal"}
{"task_id": 651, "prompt": "from typing import Tuple\n\n\ndef check_subset(tuple1: Tuple[int, ...], tuple2: Tuple[int, ...]) -> bool:\n    \"\"\" Check if one tuple is a subset of another tuple.\n    >>> check_subset((10, 4, 5, 6), (5, 10))\n    True\n    >>> check_subset((1, 2, 3, 4), (5, 6))\n    False\n    >>> check_subset((7, 8, 9, 10), (10, 8))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 10)) == True\n    assert candidate((1, 2, 3, 4), (5, 6)) == False\n    assert candidate((7, 8, 9, 10), (10, 8)) == True\n", "entry_point": "check_subset"}
{"task_id": 652, "prompt": "from typing import List, Tuple\n\n\ndef matrix_to_list(matrix: List[List[Tuple[int, int]]]) -> List[Tuple[int]]:\n    \"\"\" Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\n    >>> matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])\n    [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\n    >>> matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])\n    [(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\n    >>> matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])\n    [(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == [(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]\n    assert candidate([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == [(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]\n    assert candidate([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == [(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]\n", "entry_point": "matrix_to_list"}
{"task_id": 653, "prompt": "from typing import List, Tuple, Dict\nfrom collections import defaultdict\n\n\ndef grouping_dictionary(pairs: List[Tuple[str, int]]) -> Dict[str, List[int]]:\n    \"\"\" Group a sequence of key-value pairs into a dictionary of lists.\n    >>> grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    >>> grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])\n    {'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}\n    >>> grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])\n    {'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert candidate([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)]) == {'yellow': [10, 30], 'blue': [20, 40], 'red': [10]}\n    assert candidate([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)]) == {'yellow': [15, 35], 'blue': [25, 45], 'red': [15]}\n", "entry_point": "grouping_dictionary"}
{"task_id": 654, "prompt": "def rectangle_perimeter(length: int, width: int) -> int:\n    \"\"\" Calculate the perimeter of a rectangle given its length and width.\n    >>> rectangle_perimeter(10, 20)\n    60\n    >>> rectangle_perimeter(10, 5)\n    30\n    >>> rectangle_perimeter(4, 2)\n    12\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 60\n    assert candidate(10, 5) == 30\n    assert candidate(4, 2) == 12\n\n", "entry_point": "rectangle_perimeter"}
{"task_id": 655, "prompt": "def fifth_Power_Sum(n: int) -> int:\n    \"\"\" Calculate the sum of the fifth power of n natural numbers.\n    >>> fifth_Power_Sum(2)\n    33\n    >>> fifth_Power_Sum(4)\n    1300\n    >>> fifth_Power_Sum(3)\n    276\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 33\n    assert candidate(4) == 1300\n    assert candidate(3) == 276\n", "entry_point": "fifth_Power_Sum"}
{"task_id": 656, "prompt": "from typing import List\n\n\ndef find_Min_Sum(arr1: List[int], arr2: List[int], n: int) -> int:\n    \"\"\" Find the minimum sum of absolute differences of two arrays.\n    >>> find_Min_Sum([3,2,1],[2,1,3],3)\n    0\n    >>> find_Min_Sum([1,2,3],[4,5,6],3)\n    9\n    >>> find_Min_Sum([4,1,8,7],[2,3,6,5],4)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3,2,1],[2,1,3],3) == 0\n    assert candidate([1,2,3],[4,5,6],3) == 9\n    assert candidate([4,1,8,7],[2,3,6,5],4) == 6\n", "entry_point": "find_Min_Sum"}
{"task_id": 657, "prompt": "def first_Digit(n: int) -> int:\n    \"\"\" Find the first digit in the factorial of a given number.\n    >>> first_Digit(5)\n    1\n    >>> first_Digit(10)\n    3\n    >>> first_Digit(7)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(10) == 3\n    assert candidate(7) == 5\n", "entry_point": "first_Digit"}
{"task_id": 658, "prompt": "from typing import List\n\n\ndef max_occurrences(numbers: List[int]) -> int:\n    \"\"\" Find the item with maximum occurrences in a given list.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])\n    2\n    >>> max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])\n    1\n    >>> max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2]) == 2\n    assert candidate([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11]) == 1\n    assert candidate([1, 2, 3,2, 4, 5,1, 1, 1]) == 1\n", "entry_point": "max_occurrences"}
{"task_id": 659, "prompt": "from typing import List\n\n\ndef Repeat(numbers: List[int]) -> List[int]:\n    \"\"\" Find and return a list of duplicates in the given list of integers.\n    >>> Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])\n    [20, 30, -20, 60]\n    >>> Repeat([-1, 1, -1, 8])\n    [-1]\n    >>> Repeat([1, 2, 3, 1, 2,])\n    [1, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\n    assert candidate([-1, 1, -1, 8]) == [-1]\n    assert candidate([1, 2, 3, 1, 2,]) == [1, 2]\n", "entry_point": "Repeat"}
{"task_id": 660, "prompt": "def find_Points(a_start: int, a_end: int, b_start: int, b_end: int) -> tuple:\n    \"\"\" Choose points from two ranges such that no point lies in both the ranges.\n    >>> find_Points(5, 10, 1, 5)\n    (1, 10)\n    >>> find_Points(3, 5, 7, 9)\n    (3, 9)\n    >>> find_Points(1, 5, 2, 8)\n    (1, 8)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 10, 1, 5) == (1, 10)\n    assert candidate(3, 5, 7, 9) == (3, 9)\n    assert candidate(1, 5, 2, 8) == (1, 8)\n", "entry_point": "find_Points"}
{"task_id": 661, "prompt": "from typing import List\n\n\ndef max_sum_of_three_consecutive(numbers: List[int], n: int) -> int:\n    \"\"\" Find the maximum sum that can be formed which has no three consecutive elements present.\n    >>> max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)\n    2101\n    >>> max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)\n    5013\n    >>> max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)\n    27\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([100, 1000, 100, 1000, 1], 5) == 2101\n    assert candidate([3000, 2000, 1000, 3, 10], 5) == 5013\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27\n\n", "entry_point": "max_sum_of_three_consecutive"}
{"task_id": 662, "prompt": "from typing import Dict, List\n\n\ndef sorted_dict(input_dict: Dict[str, List[int]]) -> Dict[str, List[int]]:\n    \"\"\" Sort the lists in the values of a dictionary.\n    >>> sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})\n    {'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    >>> sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})\n    {'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    >>> sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})\n    {'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\n    assert candidate({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\n    assert candidate({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}\n", "entry_point": "sorted_dict"}
{"task_id": 663, "prompt": "def find_max_val(x: int, y: int, k: int) -> int:\n    \"\"\" Find the largest possible value of k such that k modulo x is y.\n    >>> find_max_val(15, 10, 5)\n    15\n    >>> find_max_val(187, 10, 5)\n    185\n    >>> find_max_val(16, 11, 1)\n    12\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(15, 10, 5) == 15\n    assert candidate(187, 10, 5) == 185\n    assert candidate(16, 11, 1) == 12\n\n", "entry_point": "find_max_val"}
{"task_id": 664, "prompt": "def average_Even(n: int) -> float:\n    \"\"\" Calculate the average of all even numbers from 2 up to and including n.\n    >>> average_Even(2)\n    2\n    >>> average_Even(4)\n    3\n    >>> average_Even(100)\n    51\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(4) == 3\n    assert candidate(100) == 51\n", "entry_point": "average_Even"}
{"task_id": 665, "prompt": "def move_last(lst: List[int]) -> List[int]:\n    \"\"\" Shift the first element of the given list to the end.\n    >>> move_last([1,2,3,4])\n    [2,3,4,1]\n    >>> move_last([2,3,4,1,5,0])\n    [3,4,1,5,0,2]\n    >>> move_last([5,4,3,2,1])\n    [4,3,2,1,5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4]) == [2,3,4,1]\n    assert candidate([2,3,4,1,5,0]) == [3,4,1,5,0,2]\n    assert candidate([5,4,3,2,1]) == [4,3,2,1,5]\n", "entry_point": "move_last"}
{"task_id": 666, "prompt": "def count_char(s: str, char: str) -> int:\n    \"\"\" Count the number of times a character appears in a string.\n    >>> count_char(\"Python\", 'o')\n    1\n    >>> count_char(\"little\", 't')\n    2\n    >>> count_char(\"assert\", 's')\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Python\", 'o') == 1\n    assert candidate(\"little\", 't') == 2\n    assert candidate(\"assert\", 's') == 2\n", "entry_point": "count_char"}
{"task_id": 667, "prompt": "from typing import List\n\n\ndef Check_Vow(text: str, vowels: str) -> int:\n    \"\"\" Count the number of vowels in the given string.\n    >>> Check_Vow('corner', 'AaEeIiOoUu')\n    2\n    >>> Check_Vow('valid', 'AaEeIiOoUu')\n    2\n    >>> Check_Vow('true', 'AaEeIiOoUu')\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('corner', 'AaEeIiOoUu') == 2\n    assert candidate('valid', 'AaEeIiOoUu') == 2\n    assert candidate('true', 'AaEeIiOoUu') == 2\n", "entry_point": "Check_Vow"}
{"task_id": 668, "prompt": "def replace(text: str, char: str) -> str:\n    \"\"\" Replace multiple occurrences of a character by a single occurrence in the given string.\n    >>> replace('peep', 'e')\n    'pep'\n    >>> replace('Greek', 'e')\n    'Grek'\n    >>> replace('Moon', 'o')\n    'Mon'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('peep', 'e') == 'pep'\n    assert candidate('Greek', 'e') == 'Grek'\n    assert candidate('Moon', 'o') == 'Mon'\n", "entry_point": "replace"}
{"task_id": 669, "prompt": "import re\n\n\ndef check_IP(ip: str) -> str:\n    \"\"\" Check whether the given ip address is valid or not using regex.\n    >>> check_IP(\"192.168.0.1\")\n    'Valid IP address'\n    >>> check_IP(\"366.1.2.2\")\n    'Invalid IP address'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"192.168.0.1\") == 'Valid IP address'\n    assert candidate(\"110.234.52.124\") == 'Valid IP address'\n    assert candidate(\"366.1.2.2\") == 'Invalid IP address'\n", "entry_point": "check_IP"}
{"task_id": 670, "prompt": "from typing import List\n\n\ndef decreasing_trend(numbers: List[int]) -> bool:\n    \"\"\" Check whether a sequence of numbers has a decreasing trend or not.\n    >>> decreasing_trend([-4, -3, -2, -1])\n    True\n    >>> decreasing_trend([1, 2, 3])\n    True\n    >>> decreasing_trend([3, 2, 1])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-4, -3, -2, -1]) == True\n    assert candidate([1, 2, 3]) == True\n    assert candidate([3, 2, 1]) == False\n", "entry_point": "decreasing_trend"}
{"task_id": 671, "prompt": "from typing import int\n\n\ndef set_Right_most_Unset_Bit(n: int) -> int:\n    \"\"\" Set the rightmost unset bit in the given number and return the new number.\n    >>> set_Right_most_Unset_Bit(21)\n    23\n    >>> set_Right_most_Unset_Bit(11)\n    15\n    >>> set_Right_most_Unset_Bit(15)\n    15\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(21) == 23\n    assert candidate(11) == 15\n    assert candidate(15) == 15\n\n", "entry_point": "set_Right_most_Unset_Bit"}
{"task_id": 672, "prompt": "def max_of_three(a: int, b: int, c: int) -> int:\n    \"\"\" Return the maximum of three numbers.\n    >>> max_of_three(10, 20, 30)\n    30\n    >>> max_of_three(55, 47, 39)\n    55\n    >>> max_of_three(10, 49, 30)\n    49\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20, 30) == 30\n    assert candidate(55, 47, 39) == 55\n    assert candidate(10, 49, 30) == 49\n", "entry_point": "max_of_three"}
{"task_id": 673, "prompt": "def convert(numbers: List[int]) -> int:\n    \"\"\" Convert a list of multiple integers into a single integer.\n    >>> convert([1,2,3])\n    123\n    >>> convert([4,5,6])\n    456\n    >>> convert([7,8,9])\n    789\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3]) == 123\n    assert candidate([4,5,6]) == 456\n    assert candidate([7,8,9]) == 789\n", "entry_point": "convert"}
{"task_id": 674, "prompt": "from typing import List\n\n\ndef remove_duplicate(sentence: str) -> str:\n    \"\"\" Remove duplicate words from a given string.\n    >>> remove_duplicate(\"Python Exercises Practice Solution Exercises\")\n    'Python Exercises Practice Solution'\n    >>> remove_duplicate(\"Python Exercises Practice Solution Python\")\n    'Python Exercises Practice Solution'\n    >>> remove_duplicate(\"Python Exercises Practice Solution Practice\")\n    'Python Exercises Practice Solution'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Python Exercises Practice Solution Exercises\") == \"Python Exercises Practice Solution\"\n    assert candidate(\"Python Exercises Practice Solution Python\") == \"Python Exercises Practice Solution\"\n    assert candidate(\"Python Exercises Practice Solution Practice\") == \"Python Exercises Practice Solution\"\n", "entry_point": "remove_duplicate"}
{"task_id": 675, "prompt": "def sum_nums(a: int, b: int, min_range: int, max_range: int) -> int:\n    \"\"\" Add two integers. However, if the sum is between the given range (inclusive), return 20.\n    >>> sum_nums(2, 10, 11, 20)\n    20\n    >>> sum_nums(15, 17, 1, 10)\n    32\n    >>> sum_nums(10, 15, 5, 30)\n    20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 10, 11, 20) == 20\n    assert candidate(15, 17, 1, 10) == 32\n    assert candidate(10, 15, 5, 30) == 20\n", "entry_point": "sum_nums"}
{"task_id": 676, "prompt": "import re\n\n\ndef remove_extra_char(s: str) -> str:\n    \"\"\" Remove everything except alphanumeric characters from the given string.\n    >>> remove_extra_char('**//Google Android// - 12. ')\n    'GoogleAndroid12'\n    >>> remove_extra_char('****//Google Flutter//*** - 36. ')\n    'GoogleFlutter36'\n    >>> remove_extra_char('**//Google Firebase// - 478. ')\n    'GoogleFirebase478'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('**//Google Android// - 12. ') == 'GoogleAndroid12'\n    assert candidate('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\n    assert candidate('**//Google Firebase// - 478. ') == 'GoogleFirebase478'\n\n", "entry_point": "remove_extra_char"}
{"task_id": 677, "prompt": "def validity_triangle(angle1: int, angle2: int, angle3: int) -> bool:\n    \"\"\" Check if the sum of the three angles is equal to 180, which makes a valid triangle.\n    >>> validity_triangle(60, 50, 90)\n    False\n    >>> validity_triangle(45, 75, 60)\n    True\n    >>> validity_triangle(30, 50, 100)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(60, 50, 90) == False\n    assert candidate(45, 75, 60) == True\n    assert candidate(30, 50, 100) == True\n", "entry_point": "validity_triangle"}
{"task_id": 678, "prompt": "def remove_spaces(s: str) -> str:\n    \"\"\" Remove all spaces from the given string.\n    >>> remove_spaces(\"a b c\")\n    'abc'\n    >>> remove_spaces(\"1 2 3\")\n    '123'\n    >>> remove_spaces(\" b c\")\n    'bc'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"a b c\") == \"abc\"\n    assert candidate(\"1 2 3\") == \"123\"\n    assert candidate(\" b c\") == \"bc\"\n", "entry_point": "remove_spaces"}
{"task_id": 679, "prompt": "def access_key(data: dict, index: int) -> str:\n    \"\"\" Access dictionary key's element by index.\n    >>> access_key({'physics': 80, 'math': 90, 'chemistry': 86}, 0)\n    'physics'\n    >>> access_key({'python': 10, 'java': 20, 'C++': 30}, 2)\n    'C++'\n    >>> access_key({'program': 15, 'computer': 45}, 1)\n    'computer'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'physics': 80, 'math': 90, 'chemistry': 86}, 0) == 'physics'\n    assert candidate({'python': 10, 'java': 20, 'C++': 30}, 2) == 'C++'\n    assert candidate({'program': 15, 'computer': 45}, 1) == 'computer'\n\n", "entry_point": "access_key"}
{"task_id": 680, "prompt": "from typing import List\n\n\ndef increasing_trend(numbers: List[int]) -> bool:\n    \"\"\" Check whether a sequence of numbers has an increasing trend or not.\n    >>> increasing_trend([1,2,3,4])\n    True\n    >>> increasing_trend([4,3,2,1])\n    False\n    >>> increasing_trend([0,1,4,9])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4]) == True\n    assert candidate([4,3,2,1]) == False\n    assert candidate([0,1,4,9]) == True\n", "entry_point": "increasing_trend"}
{"task_id": 681, "prompt": "from typing import List\n\n\ndef smallest_Divisor(number: int) -> int:\n    \"\"\" Find the smallest prime divisor of a given number.\n    >>> smallest_Divisor(10)\n    2\n    >>> smallest_Divisor(25)\n    5\n    >>> smallest_Divisor(31)\n    31\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 2\n    assert candidate(25) == 5\n    assert candidate(31) == 31\n", "entry_point": "smallest_Divisor"}
{"task_id": 682, "prompt": "from typing import List\n\n\ndef mul_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Multiply two lists element-wise using map and lambda function.\n    >>> mul_list([1, 2, 3], [4, 5, 6])\n    [4, 10, 18]\n    >>> mul_list([1, 2], [3, 4])\n    [3, 8]\n    >>> mul_list([90, 120], [50, 70])\n    [4500, 8400]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [4, 10, 18]\n    assert candidate([1, 2], [3, 4]) == [3, 8]\n    assert candidate([90, 120], [50, 70]) == [4500, 8400]\n", "entry_point": "mul_list"}
{"task_id": 683, "prompt": "from typing import List\n\n\ndef sum_Square(number: int) -> bool:\n    \"\"\" Check whether the given number can be represented by sum of two squares or not.\n    >>> sum_Square(25)\n    True\n    >>> sum_Square(24)\n    False\n    >>> sum_Square(17)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(25) == True\n    assert candidate(24) == False\n    assert candidate(17) == True\n", "entry_point": "sum_Square"}
{"task_id": 684, "prompt": "from typing import List\n\n\ndef count_Char(s: str, char: str) -> int:\n    \"\"\" Count occurrences of a character in a repeated string.\n    >>> count_Char(\"abcac\", 'a')\n    4\n    >>> count_Char(\"abca\", 'c')\n    2\n    >>> count_Char(\"aba\", 'a')\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcac\", 'a') == 4\n    assert candidate(\"abca\", 'c') == 2\n    assert candidate(\"aba\", 'a') == 7\n\n", "entry_point": "count_Char"}
{"task_id": 685, "prompt": "def sum_Of_Primes(n: int) -> int:\n    \"\"\" Calculate the sum of all prime numbers between 1 and n (inclusive).\n    >>> sum_Of_Primes(10)\n    17\n    >>> sum_Of_Primes(20)\n    77\n    >>> sum_Of_Primes(5)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 17\n    assert candidate(20) == 77\n    assert candidate(5) == 10\n", "entry_point": "sum_Of_Primes"}
{"task_id": 686, "prompt": "from typing import List\n\n\ndef freq_element(elements: List[int]) -> dict:\n    \"\"\" Find the frequency of each element in the given list.\n    >>> freq_element([4, 5, 4, 5, 6, 6, 5, 5, 4])\n    {4: 3, 5: 4, 6: 2}\n    >>> freq_element([7, 8, 8, 9, 4, 7, 6, 5, 4])\n    {7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\n    >>> freq_element([1, 4, 3, 1, 4, 5, 2, 6, 2, 7])\n    {1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([4, 5, 4, 5, 6, 6, 5, 5, 4]) == {4: 3, 5: 4, 6: 2}\n    assert candidate([7, 8, 8, 9, 4, 7, 6, 5, 4]) == {7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}\n    assert candidate([1, 4, 3, 1, 4, 5, 2, 6, 2, 7]) == {1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}\n", "entry_point": "freq_element"}
{"task_id": 687, "prompt": "from typing import List\n\n\ndef recur_gcd(a: int, b: int) -> int:\n    \"\"\" Find the greatest common divisor (gcd) of two integers by using recursion.\n    >>> recur_gcd(12, 14)\n    2\n    >>> recur_gcd(13, 17)\n    1\n    >>> recur_gcd(9, 3)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12, 14) == 2\n    assert candidate(13, 17) == 1\n    assert candidate(9, 3) == 3\n", "entry_point": "recur_gcd"}
{"task_id": 688, "prompt": "from typing import Tuple\n\n\ndef len_complex(real: float, imag: float) -> float:\n    \"\"\" Calculate the length of a complex number given its real and imaginary parts.\n    >>> len_complex(3, 4)\n    5.0\n    >>> len_complex(9, 10)\n    13.45362404707371\n    >>> len_complex(7, 9)\n    11.40175425099138\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 5.0\n    assert candidate(9, 10) == 13.45362404707371\n    assert candidate(7, 9) == 11.40175425099138\n\n", "entry_point": "len_complex"}
{"task_id": 689, "prompt": "from typing import List\n\n\ndef min_jumps(jumps: List[int], length: int) -> int:\n    \"\"\" Find the minimum number of jumps to reach the end of the given array where each element represents\n    the max number of steps that can be made forward from that element.\n    >>> min_jumps([1, 3, 6, 1, 0, 9], 6)\n    3\n    >>> min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)\n    3\n    >>> min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 6, 1, 0, 9], 6) == 3\n    assert candidate([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\n    assert candidate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10\n\n", "entry_point": "min_jumps"}
{"task_id": 690, "prompt": "from typing import List\n\n\ndef mul_consecutive_nums(numbers: List[int]) -> List[int]:\n    \"\"\" Multiply each number by the next one in the given list and return the list of results.\n    >>> mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [1, 3, 12, 16, 20, 30, 42]\n    >>> mul_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [20, 40, 72, 54, 60]\n    >>> mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 6, 12, 20, 30, 42, 56, 72, 90]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\n    assert candidate([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]\n", "entry_point": "mul_consecutive_nums"}
{"task_id": 691, "prompt": "from typing import List, Tuple, Dict\n\n\ndef group_element(tuples: List[Tuple[int, int]]) -> Dict[int, List[int]]:\n    \"\"\" Group the 1st elements on the basis of 2nd elements in the given tuple list.\n    >>> group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)])\n    {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    >>> group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)])\n    {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    >>> group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)])\n    {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\n    assert candidate([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\n    assert candidate([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}\n", "entry_point": "group_element"}
{"task_id": 692, "prompt": "def last_Two_Digits(n: int) -> int:\n    \"\"\" Return the last two digits of the factorial of a given number.\n    >>> last_Two_Digits(7)\n    40\n    >>> last_Two_Digits(5)\n    20\n    >>> last_Two_Digits(2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 40\n    assert candidate(5) == 20\n    assert candidate(2) == 2\n", "entry_point": "last_Two_Digits"}
{"task_id": 693, "prompt": "import re\n\n\ndef remove_multiple_spaces(text: str) -> str:\n    \"\"\" Remove multiple spaces in a string and replace them with a single space.\n    >>> remove_multiple_spaces('Google      Assistant')\n    'Google Assistant'\n    >>> remove_multiple_spaces('Quad      Core')\n    'Quad Core'\n    >>> remove_multiple_spaces('ChromeCast      Built-in')\n    'ChromeCast Built-in'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Google      Assistant') == 'Google Assistant'\n    assert candidate('Quad      Core') == 'Quad Core'\n    assert candidate('ChromeCast      Built-in') == 'ChromeCast Built-in'\n", "entry_point": "remove_multiple_spaces"}
{"task_id": 694, "prompt": "from typing import Dict, List\n\n\ndef extract_unique(d: Dict[str, List[int]]) -> List[int]:\n    \"\"\" Extract unique values from the given dictionary values and return them as a sorted list.\n    >>> extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]})\n    [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    >>> extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]})\n    [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    >>> extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]})\n    [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\n    assert candidate({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\n    assert candidate({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]\n", "entry_point": "extract_unique"}
{"task_id": 695, "prompt": "from typing import Tuple\n\n\ndef check_greater(first_tuple: Tuple[int, int, int], second_tuple: Tuple[int, int, int]) -> bool:\n    \"\"\" Check if each element of the second tuple is greater than its corresponding index in the first tuple.\n    >>> check_greater((10, 4, 5), (13, 5, 18))\n    True\n    >>> check_greater((1, 2, 3), (2, 1, 4))\n    False\n    >>> check_greater((4, 5, 6), (5, 6, 7))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5), (13, 5, 18)) == True\n    assert candidate((1, 2, 3), (2, 1, 4)) == False\n    assert candidate((4, 5, 6), (5, 6, 7)) == True\n", "entry_point": "check_greater"}
{"task_id": 696, "prompt": "from typing import List\n\n\ndef zip_list(list1: List[List], list2: List[List]) -> List[List]:\n    \"\"\" Zip two given lists of lists.\n    >>> zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])\n    [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    >>> zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])\n    [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    >>> zip_list([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']])\n    [['a', 'b', 'e', 'f'], ['c', 'd', 'g', 'h']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]]) == [[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\n    assert candidate([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]]) == [[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\n    assert candidate([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']]) == [['a', 'b', 'e', 'f'], ['c', 'd', 'g', 'h']]\n", "entry_point": "zip_list"}
{"task_id": 697, "prompt": "from typing import List\n\n\ndef count_even(numbers: List[int]) -> int:\n    \"\"\" Find the number of even elements in the given list using a lambda function.\n    >>> count_even([1, 2, 3, 5, 7, 8, 9, 10])\n    3\n    >>> count_even([10, 15, 14, 13, -18, 12, -20])\n    5\n    >>> count_even([1, 2, 4, 8, 9])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10]) == 3\n    assert candidate([10, 15, 14, 13, -18, 12, -20]) == 5\n    assert candidate([1, 2, 4, 8, 9]) == 3\n", "entry_point": "count_even"}
{"task_id": 698, "prompt": "from typing import Dict, Tuple\n\n\ndef sort_dict_item(d: Dict[Tuple[int, int], int]) -> Dict[Tuple[int, int], int]:\n    \"\"\" Sort dictionary items by the product of tuple keys.\n    >>> sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12})\n    {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    >>> sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13})\n    {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    >>> sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14})\n    {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12}) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\n    assert candidate({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13}) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\n    assert candidate({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14}) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}\n\n", "entry_point": "sort_dict_item"}
{"task_id": 699, "prompt": "def min_Swaps(s1: str, s2: str) -> Union[int, str]:\n    \"\"\" Find the minimum number of swaps required to convert one binary string to another.\n    >>> min_Swaps(\"1101\",\"1110\")\n    1\n    >>> min_Swaps(\"1111\",\"0100\")\n    'Not Possible'\n    >>> min_Swaps(\"1110000\",\"0001101\")\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"1101\",\"1110\") == 1\n    assert candidate(\"1111\",\"0100\") == 'Not Possible'\n    assert candidate(\"1110000\",\"0001101\") == 3\n", "entry_point": "min_Swaps"}
{"task_id": 700, "prompt": "from typing import List, Union\n\n\ndef count_range_in_list(elements: List[Union[int, str]], start: Union[int, str], end: Union[int, str]) -> int:\n    \"\"\" Count the number of elements in the list that are within the specified range (inclusive).\n    >>> count_range_in_list([10,20,30,40,40,40,70,80,99], 40, 100)\n    6\n    >>> count_range_in_list(['a','b','c','d','e','f'], 'a', 'e')\n    5\n    >>> count_range_in_list([7,8,9,15,17,19,45], 15, 20)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10,20,30,40,40,40,70,80,99], 40, 100) == 6\n    assert candidate(['a','b','c','d','e','f'], 'a', 'e') == 5\n    assert candidate([7,8,9,15,17,19,45], 15, 20) == 3\n\n", "entry_point": "count_range_in_list"}
{"task_id": 701, "prompt": "from typing import List\n\n\ndef equilibrium_index(arr: List[int]) -> int:\n    \"\"\" Find the equilibrium index of the given array where the sum of elements at lower indexes\n    is equal to the sum of elements at higher indexes.\n    >>> equilibrium_index([1, 2, 3, 4, 1, 2, 3])\n    3\n    >>> equilibrium_index([-7, 1, 5, 2, -4, 3, 0])\n    3\n    >>> equilibrium_index([1, 2, 3])\n    -1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 1, 2, 3]) == 3\n    assert candidate([-7, 1, 5, 2, -4, 3, 0]) == 3\n    assert candidate([1, 2, 3]) == -1\n\n", "entry_point": "equilibrium_index"}
{"task_id": 702, "prompt": "from typing import List\n\n\ndef removals(arr: List[int], n: int, k: int) -> int:\n    \"\"\" Find the minimum number of elements that should be removed such that max(arr) - min(arr) <= k.\n    >>> removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)\n    5\n    >>> removals([1, 5, 6, 2, 8], 5, 2)\n    3\n    >>> removals([1, 2, 3, 4, 5, 6], 6, 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4) == 5\n    assert candidate([1, 5, 6, 2, 8], 5, 2) == 3\n    assert candidate([1, 2, 3, 4, 5, 6], 6, 3) == 2\n", "entry_point": "removals"}
{"task_id": 703, "prompt": "from typing import Dict\n\n\ndef is_key_present(dictionary: Dict[int, int], key: int) -> bool:\n    \"\"\" Check whether the given key is present in the dictionary or not.\n    >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5)\n    True\n    >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6)\n    True\n    >>> is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5) == True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6) == True\n    assert candidate({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10) == False\n", "entry_point": "is_key_present"}
{"task_id": 704, "prompt": "def harmonic_sum(n: int) -> float:\n    \"\"\" Calculate the harmonic sum of n-1.\n    >>> harmonic_sum(10)\n    2.9289682539682538\n    >>> harmonic_sum(4)\n    2.083333333333333\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 2.9289682539682538\n    assert candidate(4) == 2.083333333333333\n    assert candidate(7) == 2.5928571428571425\n", "entry_point": "harmonic_sum"}
{"task_id": 705, "prompt": "from typing import List\n\n\ndef sort_sublists(lists: List[List]) -> List[List]:\n    \"\"\" Sort a list of lists first by the length of each sublist and then by their\n    minimum value (or lexicographically for strings).\n    >>> sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])\n    [[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    >>> sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])\n    [[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    >>> sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])\n    [['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\n    assert candidate([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\n    assert candidate([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]\n", "entry_point": "sort_sublists"}
{"task_id": 706, "prompt": "def is_subset(arr1: list, n: int, arr2: list, m: int) -> bool:\n    \"\"\" Check if arr2 is a subset of arr1.\n    >>> is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)\n    True\n    >>> is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)\n    True\n    >>> is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\n    assert candidate([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False\n", "entry_point": "is_subset"}
{"task_id": 707, "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\" Count the total number of set bits from 1 to n.\n    >>> count_Set_Bits(16)\n    33\n    >>> count_Set_Bits(2)\n    2\n    >>> count_Set_Bits(14)\n    28\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(16) == 33\n    assert candidate(2) == 2\n    assert candidate(14) == 28\n", "entry_point": "count_Set_Bits"}
{"task_id": 708, "prompt": "def Convert(s: str) -> List[str]:\n    \"\"\" Convert a string to a list by splitting it on spaces.\n    >>> Convert('python program')\n    ['python', 'program']\n    >>> Convert('Data Analysis')\n    ['Data', 'Analysis']\n    >>> Convert('Hadoop Training')\n    ['Hadoop', 'Training']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python program') == ['python', 'program']\n    assert candidate('Data Analysis') == ['Data', 'Analysis']\n    assert candidate('Hadoop Training') == ['Hadoop', 'Training']\n", "entry_point": "Convert"}
{"task_id": 709, "prompt": "from typing import List, Tuple, Dict\n\n\ndef get_unique(pairs: List[Tuple[int, int]]) -> Dict[int, int]:\n    \"\"\" Write a function to count unique keys for each value present in the tuple.\n    >>> get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)])\n    '{4: 4, 2: 3, 1: 2}'\n    >>> get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)])\n    '{5: 4, 3: 3, 2: 2}'\n    >>> get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)])\n    '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)]) == '{4: 4, 2: 3, 1: 2}'\n    assert candidate([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)]) == '{5: 4, 3: 3, 2: 2}'\n    assert candidate([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)]) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'\n", "entry_point": "get_unique"}
{"task_id": 710, "prompt": "from typing import Tuple\n\n\ndef front_and_rear(record: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\" Access the initial and last data of the given tuple record.\n    >>> front_and_rear((10, 4, 5, 6, 7))\n    (10, 7)\n    >>> front_and_rear((1, 2, 3, 4, 5))\n    (1, 5)\n    >>> front_and_rear((6, 7, 8, 9, 10))\n    (6, 10)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, 7)) == (10, 7)\n    assert candidate((1, 2, 3, 4, 5)) == (1, 5)\n    assert candidate((6, 7, 8, 9, 10)) == (6, 10)\n", "entry_point": "front_and_rear"}
{"task_id": 711, "prompt": "def product_Equal(number: int) -> bool:\n    \"\"\" Check whether the product of digits of a number at even and odd places is equal or not.\n    >>> product_Equal(2841)\n    True\n    >>> product_Equal(1234)\n    False\n    >>> product_Equal(1212)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2841) == True\n    assert candidate(1234) == False\n    assert candidate(1212) == False\n", "entry_point": "product_Equal"}
{"task_id": 712, "prompt": "from typing import List\n\n\ndef remove_duplicate(lists: List[List]) -> List[List]:\n    \"\"\" Write a function to remove duplicates from a list of lists.\n    >>> remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    [[10, 20], [30, 56, 25], [33], [40]]\n    >>> remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"])\n    [\"a\", \"b\", \"c\"]\n    >>> remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1])\n    [1, 3, 5, 6]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]]) == [[10, 20], [30, 56, 25], [33], [40]]\n    assert candidate([\"a\", \"b\", \"a\", \"c\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    assert candidate([1, 3, 5, 6, 3, 5, 6, 1]) == [1, 3, 5, 6]\n", "entry_point": "remove_duplicate"}
{"task_id": 713, "prompt": "from typing import Tuple\n\n\ndef check_valid(values: Tuple[bool, ...]) -> bool:\n    \"\"\" Check if the given tuple contains all valid (True) values.\n    >>> check_valid((True, True, True, True))\n    True\n    >>> check_valid((True, False, True, True))\n    False\n    >>> check_valid((True, True, True, True))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((True, True, True, True)) == True\n    assert candidate((True, False, True, True)) == False\n    assert candidate((True, True, True, True)) == True\n", "entry_point": "check_valid"}
{"task_id": 714, "prompt": "from typing import List\n\n\ndef count_Fac(number: int) -> int:\n    \"\"\" Count the number of distinct power of prime factor of given number.\n    >>> count_Fac(24)\n    3\n    >>> count_Fac(12)\n    2\n    >>> count_Fac(4)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(24) == 3\n    assert candidate(12) == 2\n    assert candidate(4) == 1\n", "entry_point": "count_Fac"}
{"task_id": 715, "prompt": "def str_to_tuple(s: str) -> tuple:\n    \"\"\" Convert the given string of integers into a tuple.\n    >>> str_to_tuple(\"1, -5, 4, 6, 7\")\n    (1, -5, 4, 6, 7)\n    >>> str_to_tuple(\"1, 2, 3, 4, 5\")\n    (1, 2, 3, 4, 5)\n    >>> str_to_tuple(\"4, 6, 9, 11, 13, 14\")\n    (4, 6, 9, 11, 13, 14)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\n    assert candidate(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\n    assert candidate(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)\n\n", "entry_point": "str_to_tuple"}
{"task_id": 716, "prompt": "def rombus_perimeter(side_length: int) -> int:\n    \"\"\" Calculate the perimeter of a rombus given the length of its side.\n    >>> rombus_perimeter(10)\n    40\n    >>> rombus_perimeter(5)\n    20\n    >>> rombus_perimeter(4)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 40\n    assert candidate(5) == 20\n    assert candidate(4) == 16\n", "entry_point": "rombus_perimeter"}
{"task_id": 717, "prompt": "from typing import List\n\n\ndef sd_calc(numbers: List[float]) -> float:\n    \"\"\" Calculate the standard deviation of a list of numbers.\n    >>> sd_calc([4, 2, 5, 8, 6])\n    2.23606797749979\n    >>> sd_calc([1,2,3,4,5,6,7])\n    2.160246899469287\n    >>> sd_calc([5,9,10,15,6,4])\n    4.070217029430577\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([4, 2, 5, 8, 6]) == 2.23606797749979\n    assert candidate([1,2,3,4,5,6,7]) == 2.160246899469287\n    assert candidate([5,9,10,15,6,4]) == 4.070217029430577\n\n", "entry_point": "sd_calc"}
{"task_id": 718, "prompt": "from typing import List\n\n\ndef alternate_elements(lst: List) -> List:\n    \"\"\" Create a list taking alternate elements from the given list.\n    >>> alternate_elements(['red', 'black', 'white', 'green', 'orange'])\n    ['red', 'white', 'orange']\n    >>> alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])\n    [2, 3, 0, 8, 4]\n    >>> alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['red', 'black', 'white', 'green', 'orange']) == ['red', 'white', 'orange']\n    assert candidate([2, 0, 3, 4, 0, 2, 8, 3, 4, 2]) == [2, 3, 0, 8, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n", "entry_point": "alternate_elements"}
{"task_id": 719, "prompt": "import re\n\ndef text_match(text: str) -> str:\n    \"\"\" Check if the string matches an 'a' followed by zero or more 'b's.\n    >>> text_match(\"ac\")\n    'Found a match!'\n    >>> text_match(\"dc\")\n    'Not matched!'\n    >>> text_match(\"abba\")\n    'Found a match!'\n    \"\"\"\n    if re.match(\"ab*\", text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "test": "def check(candidate):\n    assert candidate(\"ac\") == 'Found a match!'\n    assert candidate(\"dc\") == 'Not matched!'\n    assert candidate(\"abba\") == 'Found a match!'\n", "entry_point": "text_match"}
{"task_id": 720, "prompt": "from typing import Tuple, Dict, Any\n\n\ndef add_dict_to_tuple(tup: Tuple[Any, ...], d: Dict[str, int]) -> Tuple[Any, ...]:\n    \"\"\" Add a dictionary to the end of a tuple.\n    >>> add_dict_to_tuple((4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3})\n    (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    >>> add_dict_to_tuple((1, 2, 3), {'UTS': 2, 'is': 3, 'Worst': 4})\n    (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    >>> add_dict_to_tuple((8, 9, 10), {'POS': 3, 'is': 4, 'Okay': 5})\n    (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    assert candidate((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4}) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\n    assert candidate((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5}) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})\n\n", "entry_point": "add_dict_to_tuple"}
{"task_id": 721, "prompt": "from typing import List\n\n\ndef maxAverageOfPath(matrix: List[List[int]], n: int) -> float:\n    \"\"\" Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\n    >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)\n    5.2\n    >>> maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)\n    6.2\n    >>> maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)\n    7.2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2\n\n", "entry_point": "maxAverageOfPath"}
{"task_id": 722, "prompt": "from typing import Dict, Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, int]], min_height: float, min_weight: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\" Filter students by minimum height and weight.\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)\n    {'Cierra Vega': (6.2, 70)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.9, 67)\n    {'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68)}\n    >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.7, 64)\n    {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.9, 67) == {'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68)}\n    assert candidate({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.7, 64) == {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n", "entry_point": "filter_data"}
{"task_id": 723, "prompt": "from typing import List\n\n\ndef count_same_pair(list1: List[int], list2: List[int]) -> int:\n    \"\"\" Count the number of elements that are the same and at the same positions in two lists.\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    >>> count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    11\n    >>> count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1\n", "entry_point": "count_same_pair"}
{"task_id": 724, "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\" Calculate the sum of all digits of the base raised to the specified power.\n    >>> power_base_sum(2, 100)\n    115\n    >>> power_base_sum(8, 10)\n    37\n    >>> power_base_sum(8, 15)\n    62\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 100) == 115\n    assert candidate(8, 10) == 37\n    assert candidate(8, 15) == 62\n", "entry_point": "power_base_sum"}
{"task_id": 725, "prompt": "from typing import List\n\n\ndef extract_quotation(s: str) -> List[str]:\n    \"\"\" Extract values between quotation marks of the given string by using regex.\n    >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n    ['A53', 'multi', 'Processor']\n    >>> extract_quotation('Cast your \"favorite\" entertainment \"apps\"')\n    ['favorite', 'apps']\n    >>> extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')\n    ['4k Ultra HD', 'HDR 10']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n    assert candidate('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']\n", "entry_point": "extract_quotation"}
{"task_id": 726, "prompt": "from typing import Tuple\n\n\ndef multiply_elements(numbers: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Multiply adjacent elements in the given tuple.\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    >>> multiply_elements((2, 4, 5, 6, 7))\n    (8, 20, 30, 42)\n    >>> multiply_elements((12, 13, 14, 9, 15))\n    (156, 182, 126, 135)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n    assert candidate((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\n    assert candidate((12, 13, 14, 9, 15)) == (156, 182, 126, 135)\n\n", "entry_point": "multiply_elements"}
{"task_id": 727, "prompt": "import re\n\n\ndef remove_char(s: str) -> str:\n    \"\"\" Remove all characters from the string except letters and numbers.\n    >>> remove_char(\"123abcjw:, .@! eiw\")\n    '123abcjweiw'\n    >>> remove_char(\"Hello1234:, ! Howare33u\")\n    'Hello1234Howare33u'\n    >>> remove_char(\"Cool543Triks@:, Make@987Trips\")\n    'Cool543TriksMake987Trips'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"123abcjw:, .@! eiw\") == '123abcjweiw'\n    assert candidate(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\n    assert candidate(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips'\n\n", "entry_point": "remove_char"}
{"task_id": 728, "prompt": "from typing import List\n\n\ndef sum_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Sum elements in two lists.\n    >>> sum_list([10,20,30],[15,25,35])\n    [25, 45, 65]\n    >>> sum_list([1,2,3],[5,6,7])\n    [6, 8, 10]\n    >>> sum_list([15,20,30],[15,45,75])\n    [30, 65, 105]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10,20,30],[15,25,35])==[25,45,65]\n    assert candidate([1,2,3],[5,6,7])==[6,8,10]\n    assert candidate([15,20,30],[15,45,75])==[30,65,105]\n", "entry_point": "sum_list"}
{"task_id": 729, "prompt": "from typing import List\n\n\ndef add_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Add two lists element-wise using map and lambda function.\n    >>> add_list([1, 2, 3], [4, 5, 6])\n    [5, 7, 9]\n    >>> add_list([1, 2], [3, 4])\n    [4, 6]\n    >>> add_list([10, 20], [50, 70])\n    [60, 90]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [5, 7, 9]\n    assert candidate([1, 2], [3, 4]) == [4, 6]\n    assert candidate([10, 20], [50, 70]) == [60, 90]\n", "entry_point": "add_list"}
{"task_id": 730, "prompt": "from typing import List\n\n\ndef consecutive_duplicates(items: List) -> List:\n    \"\"\" Remove consecutive duplicates from the given list.\n    >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    >>> consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [10, 15, 19, 18, 17, 26, 17, 18, 10]\n    >>> consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    ['a', 'b', 'c', 'd']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n", "entry_point": "consecutive_duplicates"}
{"task_id": 731, "prompt": "from typing import List\n\n\ndef lateralsurface_cone(radius: float, slant_height: float) -> float:\n    \"\"\" Calculate the lateral surface area of a cone given its radius and slant height.\n    >>> lateralsurface_cone(5, 12)\n    204.20352248333654\n    >>> lateralsurface_cone(10, 15)\n    566.3586699569488\n    >>> lateralsurface_cone(19, 17)\n    1521.8090132193388\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 12) == 204.20352248333654\n    assert candidate(10, 15) == 566.3586699569488\n    assert candidate(19, 17) == 1521.8090132193388\n\n", "entry_point": "lateralsurface_cone"}
{"task_id": 732, "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\" Replace all occurrences of spaces, commas, or dots with a colon.\n    >>> replace_specialchar('Python language, Programming language.')\n    'Python:language::Programming:language:'\n    >>> replace_specialchar('a b c,d e f')\n    'a:b:c:d:e:f'\n    >>> replace_specialchar('ram reshma,ram rahim')\n    'ram:reshma:ram:rahim'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Python language, Programming language.') == 'Python:language::Programming:language:'\n    assert candidate('a b c,d e f') == 'a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim') == 'ram:reshma:ram:rahim'\n", "entry_point": "replace_specialchar"}
{"task_id": 733, "prompt": "from typing import List\n\n\ndef find_first_occurrence(arr: List[int], target: int) -> int:\n    \"\"\" Find the index of the first occurrence of a given number in a sorted array.\n    >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    1\n    >>> find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    2\n    >>> find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4\n\n", "entry_point": "find_first_occurrence"}
{"task_id": 735, "prompt": "def toggle_middle_bits(number: int) -> int:\n    \"\"\" Toggle all bits of the number except the first and the last bit.\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(10)\n    12\n    >>> toggle_middle_bits(11)\n    13\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9) == 15\n    assert candidate(10) == 12\n    assert candidate(11) == 13\n", "entry_point": "toggle_middle_bits"}
{"task_id": 736, "prompt": "from typing import List\n\n\ndef left_insertion(sorted_list: List[int], value: int) -> int:\n    \"\"\" Locate the left insertion point for a specified value in sorted order.\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    >>> left_insertion([1,2,4,5], 3)\n    2\n    >>> left_insertion([1,2,4,5], 7)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,4,5], 6) == 4\n    assert candidate([1,2,4,5], 3) == 2\n    assert candidate([1,2,4,5], 7) == 4\n", "entry_point": "left_insertion"}
{"task_id": 737, "prompt": "import re\n\n\ndef check_str(s: str) -> str:\n    \"\"\" Check if the given string starts with a vowel.\n    >>> check_str(\"annie\")\n    'Valid'\n    >>> check_str(\"dawood\")\n    'Invalid'\n    >>> check_str(\"Else\")\n    'Valid'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"annie\") == 'Valid'\n    assert candidate(\"dawood\") == 'Invalid'\n    assert candidate(\"Else\") == 'Valid'\n", "entry_point": "check_str"}
{"task_id": 738, "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\" Calculate the geometric sum of n-1.\n    >>> geometric_sum(7)\n    1.9921875\n    >>> geometric_sum(4)\n    1.9375\n    >>> geometric_sum(8)\n    1.99609375\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 1.9921875\n    assert candidate(4) == 1.9375\n    assert candidate(8) == 1.99609375\n", "entry_point": "geometric_sum"}
{"task_id": 739, "prompt": "from typing import List\n\n\ndef find_Index(n: int) -> int:\n    \"\"\" Find the index of the smallest triangular number that has n digits.\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    14\n    >>> find_Index(4)\n    45\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 14\n    assert candidate(4) == 45\n", "entry_point": "find_Index"}
{"task_id": 740, "prompt": "from typing import Dict, Tuple\n\n\ndef tuple_to_dict(tup: Tuple[int, ...]) -> Dict[int, int]:\n    \"\"\" Convert the given tuple to a key-value dictionary using adjacent elements.\n    >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n    {1: 5, 7: 10, 13: 5}\n    >>> tuple_to_dict((1, 2, 3, 4, 5, 6))\n    {1: 2, 3: 4, 5: 6}\n    >>> tuple_to_dict((7, 8, 9, 10, 11, 12))\n    {7: 8, 9: 10, 11: 12}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    assert candidate((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\n    assert candidate((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}\n\n", "entry_point": "tuple_to_dict"}
{"task_id": 741, "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\" Check whether all characters in the string are the same.\n    >>> all_Characters_Same(\"python\")\n    False\n    >>> all_Characters_Same(\"aaa\")\n    True\n    >>> all_Characters_Same(\"data\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"aaa\") == True\n    assert candidate(\"data\") == False\n", "entry_point": "all_Characters_Same"}
{"task_id": 742, "prompt": "from typing import List\n\n\ndef area_tetrahedron(edge_length: float) -> float:\n    \"\"\" Calculate the area of a tetrahedron given its edge length.\n    >>> area_tetrahedron(3)\n    15.588457268119894\n    >>> area_tetrahedron(20)\n    692.8203230275509\n    >>> area_tetrahedron(10)\n    173.20508075688772\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 15.588457268119894\n    assert candidate(20) == 692.8203230275509\n    assert candidate(10) == 173.20508075688772\n\n", "entry_point": "area_tetrahedron"}
{"task_id": 743, "prompt": "from typing import List\n\n\ndef rotate_right(lst: List[int], k: int) -> List[int]:\n    \"\"\" Rotate the list to the right by k elements.\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)\n    [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n", "entry_point": "rotate_right"}
{"task_id": 745, "prompt": "from typing import List\n\n\ndef divisible_by_digits(start: int, end: int) -> List[int]:\n    \"\"\" Find numbers within a given range where every number is divisible by every digit it contains.\n    >>> divisible_by_digits(1,22)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    >>> divisible_by_digits(1,15)\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    >>> divisible_by_digits(20,25)\n    [22, 24]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20,25)==[22, 24]\n", "entry_point": "divisible_by_digits"}
{"task_id": 746, "prompt": "from typing import Optional\n\n\ndef sector_area(radius: float, angle: float) -> Optional[float]:\n    \"\"\" Calculate the area of a sector given its radius and angle in degrees.\n    If the angle is 360 degrees, return None as the sector is a full circle.\n    >>> sector_area(4, 45)\n    6.285714285714286\n    >>> sector_area(9, 45)\n    31.82142857142857\n    >>> sector_area(9, 360)\n    None\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 45) == 6.285714285714286\n    assert candidate(9, 45) == 31.82142857142857\n    assert candidate(9, 360) == None\n", "entry_point": "sector_area"}
{"task_id": 747, "prompt": "def lcs_of_three(str1: str, str2: str, str3: str, m: int, n: int, o: int) -> int:\n    \"\"\" Find the length of the longest common subsequence for the given three strings.\n    >>> lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)\n    2\n    >>> lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)\n    5\n    >>> lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3\n", "entry_point": "lcs_of_three"}
{"task_id": 748, "prompt": "import re\n\n\ndef capital_words_spaces(text: str) -> str:\n    \"\"\" Insert spaces before words in a string that start with a capital letter.\n    >>> capital_words_spaces(\"Python\")\n    'Python'\n    >>> capital_words_spaces(\"PythonProgrammingExamples\")\n    'Python Programming Examples'\n    >>> capital_words_spaces(\"GetReadyToBeCodingFreak\")\n    'Get Ready To Be Coding Freak'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Python\") == 'Python'\n    assert candidate(\"PythonProgrammingExamples\") == 'Python Programming Examples'\n    assert candidate(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'\n", "entry_point": "capital_words_spaces"}
{"task_id": 749, "prompt": "from typing import List\n\n\ndef sort_numeric_strings(strings: List[str]) -> List[int]:\n    \"\"\" Sort a given list of strings of numbers numerically.\n    >>> sort_numeric_strings(['4','12','45','7','0','100','200','-12','-500'])\n    [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    >>> sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])\n    [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    >>> sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])\n    [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['4','12','45','7','0','100','200','-12','-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    assert candidate(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2']) == [1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11']) == [1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n", "entry_point": "sort_numeric_strings"}
{"task_id": 750, "prompt": "from typing import List, Tuple\n\n\ndef add_tuple(lst: List[int], tpl: Tuple[int, int]) -> List[int]:\n    \"\"\" Add the given tuple to the given list.\n    >>> add_tuple([5, 6, 7], (9, 10))\n    [5, 6, 7, 9, 10]\n    >>> add_tuple([6, 7, 8], (10, 11))\n    [6, 7, 8, 10, 11]\n    >>> add_tuple([7, 8, 9], (11, 12))\n    [7, 8, 9, 11, 12]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n    assert candidate([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]\n\n", "entry_point": "add_tuple"}
{"task_id": 751, "prompt": "from typing import List\n\n\ndef check_min_heap(arr: List[int], index: int) -> bool:\n    \"\"\" Check if the given array represents a min heap starting from the given index.\n    >>> check_min_heap([1, 2, 3, 4, 5, 6], 0)\n    True\n    >>> check_min_heap([2, 3, 4, 5, 10, 15], 0)\n    True\n    >>> check_min_heap([2, 10, 4, 5, 3, 15], 0)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], 0) == True\n    assert candidate([2, 3, 4, 5, 10, 15], 0) == True\n    assert candidate([2, 10, 4, 5, 3, 15], 0) == False\n", "entry_point": "check_min_heap"}
{"task_id": 752, "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\" Return the nth Jacobsthal number.\n    >>> jacobsthal_num(5)\n    11\n    >>> jacobsthal_num(2)\n    1\n    >>> jacobsthal_num(4)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 11\n    assert candidate(2) == 1\n    assert candidate(4) == 5\n", "entry_point": "jacobsthal_num"}
{"task_id": 753, "prompt": "from typing import List, Tuple\n\n\ndef min_k(records: List[Tuple[str, int]], k: int) -> List[Tuple[str, int]]:\n    \"\"\" Find minimum k records from tuple list.\n    >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n    [('Akash', 2), ('Akshat', 4)]\n    >>> min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)\n    [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    >>> min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)\n    [('Ayesha', 9)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]\n", "entry_point": "min_k"}
{"task_id": 754, "prompt": "from typing import List\n\n\ndef extract_index_list(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\" Find common index elements from three lists.\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    [1, 7]\n    >>> extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])\n    [1, 6]\n    >>> extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])\n    [1, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\n\n", "entry_point": "extract_index_list"}
{"task_id": 755, "prompt": "from typing import List\n\n\ndef second_smallest(numbers: List[float]) -> float:\n    \"\"\" Find the second smallest number in a given list.\n    >>> second_smallest([1, 2, -8, -2, 0, -2])\n    -2\n    >>> second_smallest([1, 1, -0.5, 0, 2, -2, -2])\n    -0.5\n    >>> second_smallest([2,2])\n    None\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2])==-2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2,2])==None\n", "entry_point": "second_smallest"}
{"task_id": 756, "prompt": "import re\n\n\ndef text_match_zero_one(s: str) -> str:\n    \"\"\" Check if the string contains an 'a' followed by zero or one 'b'.\n    >>> text_match_zero_one('ac')\n    'Found a match!'\n    >>> text_match_zero_one('dc')\n    'Not matched!'\n    >>> text_match_zero_one('abbbba')\n    'Found a match!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ac\") == 'Found a match!'\n    assert candidate(\"dc\") == 'Not matched!'\n    assert candidate(\"abbbba\") == 'Found a match!'\n", "entry_point": "text_match_zero_one"}
{"task_id": 757, "prompt": "from typing import List\n\n\ndef count_reverse_pairs(strings: List[str]) -> int:\n    \"\"\" Count the number of pairs of reverse strings in the given list of strings.\n    >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n    2\n    >>> count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"])\n    1\n    >>> count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n    assert candidate([\"geeks\", \"best\", \"for\", \"skeeg\"]) == 1\n    assert candidate([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == 2\n\n", "entry_point": "count_reverse_pairs"}
{"task_id": 758, "prompt": "from typing import List, Dict, Tuple\n\n\ndef unique_sublists(lists: List[List]) -> Dict[Tuple, int]:\n    \"\"\" Count the number of unique lists within a list, returning a dictionary with the unique lists as keys\n    (converted to tuples) and their counts as values.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])\n    {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]]) == {(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}\n", "entry_point": "unique_sublists"}
{"task_id": 759, "prompt": "from typing import List\n\n\ndef is_decimal(s: str) -> bool:\n    \"\"\" Check if the string s is a decimal with a precision of 2.\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('e666.86')\n    False\n    >>> is_decimal('3.124587')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('e666.86') == False\n    assert candidate('3.124587') == False\n\n", "entry_point": "is_decimal"}
{"task_id": 760, "prompt": "from typing import List\n\n\ndef unique_Element(elements: List[int], size: int) -> str:\n    \"\"\" Check whether an array contains only one distinct element or not.\n    >>> unique_Element([1,1,1], 3)\n    'YES'\n    >>> unique_Element([1,2,1,2], 4)\n    'NO'\n    >>> unique_Element([1,2,3,4,5], 5)\n    'NO'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,1], 3) == 'YES'\n    assert candidate([1,2,1,2], 4) == 'NO'\n    assert candidate([1,2,3,4,5], 5) == 'NO'\n", "entry_point": "unique_Element"}
{"task_id": 761, "prompt": "from typing import Optional\n\n\ndef arc_length(radius: float, angle: float) -> Optional[float]:\n    \"\"\" Calculate the arc length of an angle (in degrees) for a given radius.\n    If the angle is not between 0 and 360, return None.\n    >>> arc_length(9, 45)\n    3.5357142857142856\n    >>> arc_length(9, 480)\n    None\n    >>> arc_length(5, 270)\n    11.785714285714285\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9, 45) == 3.5357142857142856\n    assert candidate(9, 480) == None\n    assert candidate(5, 270) == 11.785714285714285\n", "entry_point": "arc_length"}
{"task_id": 762, "prompt": "def check_monthnumber_number(month: int) -> bool:\n    \"\"\" Check whether the given month number contains 30 days or not.\n    >>> check_monthnumber_number(6)\n    True\n    >>> check_monthnumber_number(2)\n    False\n    >>> check_monthnumber_number(12)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6) == True\n    assert candidate(2) == False\n    assert candidate(12) == False\n", "entry_point": "check_monthnumber_number"}
{"task_id": 763, "prompt": "from typing import List\n\n\ndef find_Min_Diff(arr: List[int], n: int) -> int:\n    \"\"\" Find the minimum difference between any two elements in a given array.\n    >>> find_Min_Diff([1, 5, 3, 19, 18, 25], 6)\n    1\n    >>> find_Min_Diff([4, 3, 2, 6], 4)\n    1\n    >>> find_Min_Diff([30, 5, 20, 9], 4)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 19, 18, 25], 6) == 1\n    assert candidate([4, 3, 2, 6], 4) == 1\n    assert candidate([30, 5, 20, 9], 4) == 4\n\n", "entry_point": "find_Min_Diff"}
{"task_id": 764, "prompt": "def number_ctr(s: str) -> int:\n    \"\"\" Count the number of numeric values in the given string.\n    >>> number_ctr('program2bedone')\n    1\n    >>> number_ctr('3wonders')\n    1\n    >>> number_ctr('123')\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('program2bedone') == 1\n    assert candidate('3wonders') == 1\n    assert candidate('123') == 3\n", "entry_point": "number_ctr"}
{"task_id": 765, "prompt": "def is_polite(n: int) -> int:\n    \"\"\" Find the nth polite number.\n    >>> is_polite(7)\n    11\n    >>> is_polite(4)\n    7\n    >>> is_polite(9)\n    13\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 11\n    assert candidate(4) == 7\n    assert candidate(9) == 13\n", "entry_point": "is_polite"}
{"task_id": 766, "prompt": "from typing import List, Tuple\n\n\ndef pair_wise(elements: List[int]) -> List[Tuple[int, int]]:\n    \"\"\" Iterate over all pairs of consecutive items in a given list.\n    >>> pair_wise([1,1,2,3,3,4,4,5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    >>> pair_wise([1,5,7,9,10])\n    [(1, 5), (5, 7), (7, 9), (9, 10)]\n    >>> pair_wise([1,2,3,4,5,6,7,8,9,10])\n    [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    assert candidate([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n", "entry_point": "pair_wise"}
{"task_id": 767, "prompt": "from typing import List\n\n\ndef get_Pairs_Count(arr: List[int], n: int, sum: int) -> int:\n    \"\"\"\n    Count the number of pairs in an array whose sum is equal to 'sum'.\n    >>> get_Pairs_Count([1,1,1,1], 4, 2)\n    6\n    >>> get_Pairs_Count([1,5,7,-1,5], 5, 6)\n    3\n    >>> get_Pairs_Count([1,-2,3], 3, 1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,1,1], 4, 2) == 6\n    assert candidate([1,5,7,-1,5], 5, 6) == 3\n    assert candidate([1,-2,3], 3, 1) == 1\n", "entry_point": "get_Pairs_Count"}
{"task_id": 768, "prompt": "def check_Odd_Parity(number: int) -> bool:\n    \"\"\" Check if a given number has odd parity.\n    >>> check_Odd_Parity(13)\n    True\n    >>> check_Odd_Parity(21)\n    True\n    >>> check_Odd_Parity(18)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(13) == True\n    assert candidate(21) == True\n    assert candidate(18) == False\n", "entry_point": "check_Odd_Parity"}
{"task_id": 769, "prompt": "from typing import List\n\n\ndef Diff(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Get the difference between two lists.\n    >>> Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    >>> Diff([1,2,3,4,5], [6,7,1])\n    [2,3,4,5,6,7]\n    >>> Diff([1,2,3], [6,7,1])\n    [2,3,6,7]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n    assert candidate([1,2,3,4,5], [6,7,1]) == [2,3,4,5,6,7]\n    assert candidate([1,2,3], [6,7,1]) == [2,3,6,7]\n", "entry_point": "Diff"}
{"task_id": 770, "prompt": "def odd_Num_Sum(n: int) -> int:\n    \"\"\" Find the sum of fourth power of first n odd natural numbers.\n    >>> odd_Num_Sum(2)\n    82\n    >>> odd_Num_Sum(3)\n    707\n    >>> odd_Num_Sum(4)\n    3108\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 82\n    assert candidate(3) == 707\n    assert candidate(4) == 3108\n", "entry_point": "odd_Num_Sum"}
{"task_id": 771, "prompt": "def check_expression(expression: str) -> bool:\n    \"\"\" Check if the given expression is balanced or not.\n    >>> check_expression(\"{()}[{}]\")\n    True\n    >>> check_expression(\"{()}[{]\")\n    False\n    >>> check_expression(\"{()}[{}][]({})\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"{()}[{}]\") == True\n    assert candidate(\"{()}[{]\") == False\n    assert candidate(\"{()}[{}][]({})\") == True\n", "entry_point": "check_expression"}
{"task_id": 772, "prompt": "def remove_length(s: str, k: int) -> str:\n    \"\"\" Remove all words of length k from the given string.\n    >>> remove_length('The person is most value tet', 3)\n    'person is most value'\n    >>> remove_length('If you told me about this ok', 4)\n    'If you me about ok'\n    >>> remove_length('Forces of darkeness is come into the play', 4)\n    'Forces of darkeness is the'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('The person is most value tet', 3) == 'person is most value'\n    assert candidate('If you told me about this ok', 4) == 'If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'\n", "entry_point": "remove_length"}
{"task_id": 773, "prompt": "def occurance_substring(s: str, sub: str) -> tuple:\n    \"\"\" Find the occurrence and position of the substrings within a string.\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    >>> occurance_substring('python programming,programming language','programming')\n    ('programming', 7, 18)\n    >>> occurance_substring('python programming,programming language','language')\n    ('language', 31, 39)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python programming, python language','python')==('python', 0, 6)\n    assert candidate('python programming,programming language','programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language','language')==('language', 31, 39)\n", "entry_point": "occurance_substring"}
{"task_id": 774, "prompt": "import re\n\n\ndef check_email(email: str) -> str:\n    \"\"\" Check if the given string is a valid email address using regex.\n    >>> check_email(\"ankitrai326@gmail.com\")\n    'Valid Email'\n    >>> check_email(\"my.ownsite@ourearth.org\")\n    'Valid Email'\n    >>> check_email(\"ankitaoie326.com\")\n    'Invalid Email'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ankitrai326@gmail.com\") == 'Valid Email'\n    assert candidate(\"my.ownsite@ourearth.org\") == 'Valid Email'\n    assert candidate(\"ankitaoie326.com\") == 'Invalid Email'\n", "entry_point": "check_email"}
{"task_id": 775, "prompt": "from typing import List\n\n\ndef odd_position(numbers: List[int]) -> bool:\n    \"\"\" Check whether every odd index contains odd numbers of a given list.\n    >>> odd_position([2,1,4,3,6,7,6,3])\n    True\n    >>> odd_position([4,1,2])\n    True\n    >>> odd_position([1,2,3])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,1,4,3,6,7,6,3]) == True\n    assert candidate([4,1,2]) == True\n    assert candidate([1,2,3]) == False\n\n", "entry_point": "odd_position"}
{"task_id": 776, "prompt": "def count_vowels(s: str) -> int:\n    \"\"\" Count characters in the given string which have vowels as their neighbors.\n    >>> count_vowels('bestinstareels')\n    7\n    >>> count_vowels('partofthejourneyistheend')\n    12\n    >>> count_vowels('amazonprime')\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('bestinstareels') == 7\n    assert candidate('partofthejourneyistheend') == 12\n    assert candidate('amazonprime') == 5\n\n", "entry_point": "count_vowels"}
{"task_id": 777, "prompt": "from typing import List\n\n\ndef find_Sum(arr: List[int], n: int) -> int:\n    \"\"\" Find the sum of non-repeated elements in a given array.\n    >>> find_Sum([1,2,3,1,1,4,5,6], 8)\n    21\n    >>> find_Sum([1,10,9,4,2,10,10,45,4], 9)\n    71\n    >>> find_Sum([12,10,9,45,2,10,10,45,10], 9)\n    78\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6], 8) == 21\n    assert candidate([1,10,9,4,2,10,10,45,4], 9) == 71\n    assert candidate([12,10,9,45,2,10,10,45,10], 9) == 78\n\n", "entry_point": "find_Sum"}
{"task_id": 778, "prompt": "from typing import List\n\n\ndef pack_consecutive_duplicates(lst: List) -> List[List]:\n    \"\"\" Write a function to pack consecutive duplicates of a given list elements into sublists.\n    >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n    [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    >>> pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])\n    [[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    >>> pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])\n    [['a', 'a'], ['b'], ['c'], ['d', 'd']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n", "entry_point": "pack_consecutive_duplicates"}
{"task_id": 779, "prompt": "from typing import List, Dict, Tuple\n\n\ndef unique_sublists(lists: List[List]) -> Dict[Tuple, int]:\n    \"\"\" Count the number of unique lists within a list, returning a dictionary with the unique lists as keys\n    (converted to tuples) and their counts as values.\n    >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n    {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    >>> unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])\n    {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    >>> unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])\n    {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == {('green', 'orange'): 2, ('black',): 1, ('white',): 1}\n    assert candidate([[1, 2], [3, 4], [4, 5], [6, 7]]) == {(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}\n", "entry_point": "unique_sublists"}
{"task_id": 780, "prompt": "def find_combinations(tuples_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\" Find all unique combinations of sums within a list of tuples.\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    >>> find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])\n    [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    >>> find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])\n    [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n", "entry_point": "find_combinations"}
{"task_id": 781, "prompt": "def count_Divisors(n: int) -> str:\n    \"\"\" Check whether the count of divisors of n is even or odd.\n    >>> count_Divisors(10)\n    'Even'\n    >>> count_Divisors(100)\n    'Odd'\n    >>> count_Divisors(125)\n    'Even'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == \"Even\"\n    assert candidate(100) == \"Odd\"\n    assert candidate(125) == \"Even\"\n", "entry_point": "count_Divisors"}
{"task_id": 782, "prompt": "def Odd_Length_Sum(arr: List[int]) -> int:\n    \"\"\" Find the sum of all odd length subarrays.\n    >>> Odd_Length_Sum([1,2,4])\n    14\n    >>> Odd_Length_Sum([1,2,1,2])\n    15\n    >>> Odd_Length_Sum([1,7])\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,4]) == 14\n    assert candidate([1,2,1,2]) == 15\n    assert candidate([1,7]) == 8\n", "entry_point": "Odd_Length_Sum"}
{"task_id": 783, "prompt": "from typing import Tuple\n\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> Tuple[float, float, float]:\n    \"\"\" Convert RGB color to HSV color.\n    >>> rgb_to_hsv(255, 255, 255)\n    (0, 0.0, 100.0)\n    >>> rgb_to_hsv(0, 215, 0)\n    (120.0, 100.0, 84.31372549019608)\n    >>> rgb_to_hsv(10, 215, 110)\n    (149.26829268292684, 95.34883720930233, 84.31372549019608)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(255, 255, 255) == (0, 0.0, 100.0)\n    assert candidate(0, 215, 0) == (120.0, 100.0, 84.31372549019608)\n    assert candidate(10, 215, 110) == (149.26829268292684, 95.34883720930233, 84.31372549019608)\n\n", "entry_point": "rgb_to_hsv"}
{"task_id": 784, "prompt": "from typing import List\n\n\ndef mul_even_odd(numbers: List[int]) -> int:\n    \"\"\" Find the product of the first even and the first odd number in the given list.\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([1,2,3,4,5,6,7,8,9,10])\n    2\n    >>> mul_even_odd([1,5,7,9,10])\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8]) == 4\n    assert candidate([1,2,3,4,5,6,7,8,9,10]) == 2\n    assert candidate([1,5,7,9,10]) == 10\n", "entry_point": "mul_even_odd"}
{"task_id": 785, "prompt": "from typing import Tuple\n\n\ndef tuple_str_int(s: str) -> Tuple[int, ...]:\n    \"\"\" Convert a tuple represented as a string into a tuple of integers.\n    >>> tuple_str_int(\"(7, 8, 9)\")\n    (7, 8, 9)\n    >>> tuple_str_int(\"(1, 2, 3)\")\n    (1, 2, 3)\n    >>> tuple_str_int(\"(4, 5, 6)\")\n    (4, 5, 6)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"(7, 8, 9)\") == (7, 8, 9)\n    assert candidate(\"(1, 2, 3)\") == (1, 2, 3)\n    assert candidate(\"(4, 5, 6)\") == (4, 5, 6)\n\n", "entry_point": "tuple_str_int"}
{"task_id": 786, "prompt": "from typing import List\n\n\ndef right_insertion(sorted_list: List[int], value: int) -> int:\n    \"\"\" Locate the right insertion point for a specified value in sorted order.\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 7)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,4,5], 6) == 4\n    assert candidate([1,2,4,5], 3) == 2\n    assert candidate([1,2,4,5], 7) == 4\n", "entry_point": "right_insertion"}
{"task_id": 787, "prompt": "def text_match_three(s: str) -> str:\n    \"\"\" Check if the string contains an 'a' followed by exactly three 'b'.\n    >>> text_match_three('ac')\n    'Not matched!'\n    >>> text_match_three('abbbba')\n    'Found a match!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ac\") == 'Not matched!'\n    assert candidate(\"dc\") == 'Not matched!'\n    assert candidate(\"abbbba\") == 'Found a match!'\n", "entry_point": "text_match_three"}
{"task_id": 788, "prompt": "from typing import List, Tuple\n\n\ndef new_tuple(elements: List[str], last_element: str) -> Tuple[str, ...]:\n    \"\"\" Create a new tuple from the given list of strings and a string, by appending the string to the list and converting it to a tuple.\n    >>> new_tuple([\"WEB\", \"is\"], \"best\")\n    ('WEB', 'is', 'best')\n    >>> new_tuple([\"We\", \"are\"], \"Developers\")\n    ('We', 'are', 'Developers')\n    >>> new_tuple([\"Part\", \"is\"], \"Wrong\")\n    ('Part', 'is', 'Wrong')\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n    assert candidate([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\n    assert candidate([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')\n\n", "entry_point": "new_tuple"}
{"task_id": 789, "prompt": "from typing import List\n\n\ndef perimeter_polygon(sides: int, side_length: float) -> float:\n    \"\"\" Calculate the perimeter of a regular polygon.\n    >>> perimeter_polygon(4, 20)\n    80\n    >>> perimeter_polygon(10, 15)\n    150\n    >>> perimeter_polygon(9, 7)\n    63\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 20) == 80\n    assert candidate(10, 15) == 150\n    assert candidate(9, 7) == 63\n\n", "entry_point": "perimeter_polygon"}
{"task_id": 790, "prompt": "from typing import List\n\n\ndef even_position(numbers: List[int]) -> bool:\n    \"\"\" Check whether every even index contains even numbers in a given list.\n    >>> even_position([3, 2, 1])\n    False\n    >>> even_position([1, 2, 3])\n    False\n    >>> even_position([2, 1, 4])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == False\n    assert candidate([1, 2, 3]) == False\n    assert candidate([2, 1, 4]) == True\n", "entry_point": "even_position"}
{"task_id": 791, "prompt": "from typing import Tuple, Union\n\n\ndef remove_nested(record: Tuple[Union[int, Tuple[int, ...]], ...]) -> Tuple[int, ...]:\n    \"\"\" Write a function to remove the nested record from the given tuple.\n    >>> remove_nested((1, 5, 7, (4, 6), 10))\n    (1, 5, 7, 10)\n    >>> remove_nested((2, 6, 8, (5, 7), 11))\n    (2, 6, 8, 11)\n    >>> remove_nested((3, 7, 9, (6, 8), 12))\n    (3, 7, 9, 12)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n    assert candidate((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)\n\n", "entry_point": "remove_nested"}
{"task_id": 792, "prompt": "from typing import List\n\n\ndef count_list(list_of_lists: List[List[int]]) -> int:\n    \"\"\" Count the number of lists in a given list of lists.\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    >>> count_list([[1,2],[2,3],[4,5]])\n    3\n    >>> count_list([[1,0],[2,0]])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n    assert candidate([[1,2],[2,3],[4,5]]) == 3\n    assert candidate([[1,0],[2,0]]) == 2\n", "entry_point": "count_list"}
{"task_id": 793, "prompt": "from typing import List\n\n\ndef last(arr: List[int], target: int, n: int) -> int:\n    \"\"\" Find the last position of an element in a sorted array.\n    >>> last([1,2,3], 1, 3)\n    0\n    >>> last([1,1,1,2,3,4], 1, 6)\n    2\n    >>> last([2,3,2,3,6,8,9], 3, 8)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3], 1, 3) == 0\n    assert candidate([1,1,1,2,3,4], 1, 6) == 2\n    assert candidate([2,3,2,3,6,8,9], 3, 8) == 3\n", "entry_point": "last"}
{"task_id": 794, "prompt": "def text_starta_endb(s: str) -> str:\n    \"\"\" Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    >>> text_starta_endb(\"aabbbb\")\n    'Found a match!'\n    >>> text_starta_endb(\"aabAbbbc\")\n    'Not matched!'\n    >>> text_starta_endb(\"accddbbjjj\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aabbbb\") == 'Found a match!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjj\") == 'Not matched!'\n", "entry_point": "text_starta_endb"}
{"task_id": 795, "prompt": "from typing import List, Dict\n\n\ndef cheap_items(items: List[Dict[str, float]], n: int) -> List[Dict[str, float]]:\n    \"\"\" Find the n cheapest items from a given list of items using heap queue algorithm.\n    >>> cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)\n    [{'name': 'Item-1', 'price': 101.1}]\n    >>> cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2)\n    [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\n    >>> cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)\n    [{'name': 'Item-4', 'price': 22.75}]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-1', 'price': 101.1}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2) == [{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]\n    assert candidate([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1) == [{'name': 'Item-4', 'price': 22.75}]\n\n", "entry_point": "cheap_items"}
{"task_id": 796, "prompt": "from typing import Dict\n\n\ndef return_sum(items: Dict[str, int]) -> int:\n    \"\"\" Find the sum of all items in the given dictionary.\n    >>> return_sum({'a': 100, 'b':200, 'c':300})\n    600\n    >>> return_sum({'a': 25, 'b':18, 'c':45})\n    88\n    >>> return_sum({'a': 36, 'b':39, 'c':49})\n    124\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'a': 100, 'b':200, 'c':300}) == 600\n    assert candidate({'a': 25, 'b':18, 'c':45}) == 88\n    assert candidate({'a': 36, 'b':39, 'c':49}) == 124\n", "entry_point": "return_sum"}
{"task_id": 797, "prompt": "from typing import List\n\n\ndef sum_in_Range(l: int, r: int) -> int:\n    \"\"\" Find the sum of all odd natural numbers within the range l and r.\n    >>> sum_in_Range(2, 5)\n    8\n    >>> sum_in_Range(5, 7)\n    12\n    >>> sum_in_Range(7, 13)\n    40\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 5) == 8\n    assert candidate(5, 7) == 12\n    assert candidate(7, 13) == 40\n", "entry_point": "sum_in_Range"}
{"task_id": 798, "prompt": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\" Find the sum of an array.\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([15, 12, 13, 10])\n    50\n    >>> _sum([0, 1, 2])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([15, 12, 13, 10]) == 50\n    assert candidate([0, 1, 2]) == 3\n", "entry_point": "_sum"}
{"task_id": 799, "prompt": "def left_Rotate(n: int, d: int) -> int:\n    \"\"\" Left rotate the bits of a given number n by d positions.\n    >>> left_Rotate(16, 2)\n    64\n    >>> left_Rotate(10, 2)\n    40\n    >>> left_Rotate(99, 3)\n    792\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(16, 2) == 64\n    assert candidate(10, 2) == 40\n    assert candidate(99, 3) == 792\n", "entry_point": "left_Rotate"}
{"task_id": 800, "prompt": "def remove_all_spaces(s: str) -> str:\n    \"\"\" Remove all whitespaces from a string.\n    >>> remove_all_spaces('python  program')\n    'pythonprogram'\n    >>> remove_all_spaces('python   programming    language')\n    'pythonprogramminglanguage'\n    >>> remove_all_spaces('python                     program')\n    'pythonprogram'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python  program') == 'pythonprogram'\n    assert candidate('python   programming    language') == 'pythonprogramminglanguage'\n    assert candidate('python                     program') == 'pythonprogram'\n", "entry_point": "remove_all_spaces"}
{"task_id": 801, "prompt": "from typing import List\n\n\ndef count_equal_numbers(a: int, b: int, c: int) -> int:\n    \"\"\" Count the number of equal numbers from three given integers.\n    >>> count_equal_numbers(1, 1, 1)\n    3\n    >>> count_equal_numbers(-1, -2, -3)\n    0\n    >>> count_equal_numbers(1, 2, 2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 1, 1) == 3\n    assert candidate(-1, -2, -3) == 0\n    assert candidate(1, 2, 2) == 2\n", "entry_point": "count_equal_numbers"}
{"task_id": 802, "prompt": "from typing import List\n\n\ndef count_Rotation(arr: List[int], n: int) -> int:\n    \"\"\" Count the number of rotations required to generate a sorted array.\n    >>> count_Rotation([3,2,1],3)\n    1\n    >>> count_Rotation([4,5,1,2,3],5)\n    2\n    >>> count_Rotation([7,8,9,1,2,3],6)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3,2,1],3) == 1\n    assert candidate([4,5,1,2,3],5) == 2\n    assert candidate([7,8,9,1,2,3],6) == 3\n\n", "entry_point": "count_Rotation"}
{"task_id": 803, "prompt": "def is_Perfect_Square(number: int) -> bool:\n    \"\"\" Check whether the given number is a perfect square or not.\n    >>> is_Perfect_Square(10)\n    False\n    >>> is_Perfect_Square(36)\n    True\n    >>> is_Perfect_Square(14)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n", "entry_point": "is_Perfect_Square"}
{"task_id": 804, "prompt": "from typing import List\n\n\ndef is_Product_Even(numbers: List[int], threshold: int) -> bool:\n    \"\"\" Check whether the product of numbers is even or not.\n    >>> is_Product_Even([1,2,3], 3)\n    True\n    >>> is_Product_Even([1,2,1,4], 4)\n    True\n    >>> is_Product_Even([1,1], 2)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3], 3) == True\n    assert candidate([1,2,1,4], 4) == True\n    assert candidate([1,1], 2) == False\n", "entry_point": "is_Product_Even"}
{"task_id": 805, "prompt": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\" Find the list in a list of lists whose sum of elements is the highest.\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    >>> max_sum_list([[3,2,1], [6,5,4], [12,11,10]])\n    [12, 11, 10]\n    >>> max_sum_list([[2,3,1]])\n    [2, 3, 1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\n    assert candidate([[3,2,1], [6,5,4], [12,11,10]]) == [12, 11, 10]\n    assert candidate([[2,3,1]]) == [2, 3, 1]\n", "entry_point": "max_sum_list"}
{"task_id": 806, "prompt": "def max_run_uppercase(s: str) -> int:\n    \"\"\" Find the maximum run of uppercase characters in the given string.\n    >>> max_run_uppercase('GeMKSForGERksISBESt')\n    5\n    >>> max_run_uppercase('PrECIOusMOVemENTSYT')\n    6\n    >>> max_run_uppercase('GooGLEFluTTER')\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('GeMKSForGERksISBESt') == 5\n    assert candidate('PrECIOusMOVemENTSYT') == 6\n    assert candidate('GooGLEFluTTER') == 4\n", "entry_point": "max_run_uppercase"}
{"task_id": 807, "prompt": "from typing import List\n\n\ndef first_odd(numbers: List[int]) -> int:\n    \"\"\" Find the first odd number in a given list of numbers.\n    >>> first_odd([1, 3, 5])\n    1\n    >>> first_odd([2, 4, 1, 3])\n    1\n    >>> first_odd([8, 9, 1])\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5]) == 1\n    assert candidate([2, 4, 1, 3]) == 1\n    assert candidate([8, 9, 1]) == 9\n", "entry_point": "first_odd"}
{"task_id": 808, "prompt": "from typing import Tuple\n\n\ndef check_K(numbers: Tuple[int, ...], k: int) -> bool:\n    \"\"\" Check if the given tuple contains the value k.\n    >>> check_K((10, 4, 5, 6, 8), 6)\n    True\n    >>> check_K((1, 2, 3, 4, 5, 6), 7)\n    False\n    >>> check_K((7, 8, 9, 44, 11, 12), 11)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, 8), 6) == True\n    assert candidate((1, 2, 3, 4, 5, 6), 7) == False\n    assert candidate((7, 8, 9, 44, 11, 12), 11) == True\n", "entry_point": "check_K"}
{"task_id": 809, "prompt": "from typing import Tuple\n\n\ndef check_smaller(first_tuple: Tuple[int, int, int], second_tuple: Tuple[int, int, int]) -> bool:\n    \"\"\" Check if each element of the second tuple is smaller than its corresponding index in the first tuple.\n    >>> check_smaller((1, 2, 3), (2, 3, 4))\n    False\n    >>> check_smaller((4, 5, 6), (3, 4, 5))\n    True\n    >>> check_smaller((11, 12, 13), (10, 11, 12))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n", "entry_point": "check_smaller"}
{"task_id": 810, "prompt": "from typing import List\n\n\ndef count_variable(*args: int) -> List[str]:\n    \"\"\" Write a function to iterate over elements repeating each as many times as its count.\n    >>> count_variable(4,2,0,-2)\n    ['p', 'p', 'p', 'p', 'q', 'q']\n    >>> count_variable(0,1,2,3)\n    ['q', 'r', 'r', 's', 's', 's']\n    >>> count_variable(11,15,12,23)\n    ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q']\n    assert candidate(0,1,2,3)==['q', 'r', 'r', 's', 's', 's']\n    assert candidate(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']\n\n", "entry_point": "count_variable"}
{"task_id": 811, "prompt": "from typing import List, Tuple\n\n\ndef check_identical(list1: List[Tuple[int, int]], list2: List[Tuple[int, int]]) -> bool:\n    \"\"\" Check if two lists of tuples are identical.\n    >>> check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])\n    True\n    >>> check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])\n    False\n    >>> check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\n    assert candidate([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\n    assert candidate([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True\n", "entry_point": "check_identical"}
{"task_id": 812, "prompt": "def road_rd(address: str) -> str:\n    \"\"\" Replace 'Road' with 'Rd.' in the given address string.\n    >>> road_rd(\"ravipadu Road\")\n    'ravipadu Rd.'\n    >>> road_rd(\"palnadu Road\")\n    'palnadu Rd.'\n    >>> road_rd(\"eshwar enclave Road\")\n    'eshwar enclave Rd.'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ravipadu Road\") == ('ravipadu Rd.')\n    assert candidate(\"palnadu Road\") == ('palnadu Rd.')\n    assert candidate(\"eshwar enclave Road\") == ('eshwar enclave Rd.')\n", "entry_point": "road_rd"}
{"task_id": 813, "prompt": "def string_length(s: str) -> int:\n    \"\"\" Return the length of the given string.\n    >>> string_length('python')\n    6\n    >>> string_length('program')\n    7\n    >>> string_length('language')\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python') == 6\n    assert candidate('program') == 7\n    assert candidate('language') == 8\n", "entry_point": "string_length"}
{"task_id": 814, "prompt": "def rombus_area(diagonal1: float, diagonal2: float) -> float:\n    \"\"\" Calculate the area of a rombus given its diagonals.\n    >>> rombus_area(10, 20)\n    100\n    >>> rombus_area(10, 5)\n    25\n    >>> rombus_area(4, 2)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 100\n    assert candidate(10, 5) == 25\n    assert candidate(4, 2) == 4\n", "entry_point": "rombus_area"}
{"task_id": 815, "prompt": "from typing import List\n\n\ndef sort_by_dnf(arr: List[int], n: int) -> List[int]:\n    \"\"\" Write a function to sort the given array without using any sorting algorithm.\n    The given array consists of only 0, 1, and 2.\n    >>> sort_by_dnf([1,2,0,1,0,1,2,1,1], 9)\n    [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    >>> sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10)\n    [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    >>> sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10)\n    [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\n    assert candidate([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n    assert candidate([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\n", "entry_point": "sort_by_dnf"}
{"task_id": 816, "prompt": "from typing import Tuple\n\n\ndef clear_tuple(tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Clear the values of the given tuple and return an empty tuple.\n    >>> clear_tuple((1, 5, 3, 6, 8))\n    ()\n    >>> clear_tuple((2, 1, 4 ,5 ,6))\n    ()\n    >>> clear_tuple((3, 2, 5, 6, 8))\n    ()\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 3, 6, 8)) == ()\n    assert candidate((2, 1, 4 ,5 ,6)) == ()\n    assert candidate((3, 2, 5, 6, 8)) == ()\n\n", "entry_point": "clear_tuple"}
{"task_id": 817, "prompt": "from typing import List\n\n\ndef div_of_nums(numbers: List[int], m: int, n: int) -> List[int]:\n    \"\"\" Find numbers divisible by m or n from a list of numbers using lambda function.\n    >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)\n    [19, 65, 57, 39, 152, 190]\n    >>> div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n    [2, 5, 8, 10]\n    >>> div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n    [10, 15, 20]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13) == [19, 65, 57, 39, 152, 190]\n    assert candidate([1, 2, 3, 5, 7, 8, 10], 2, 5) == [2, 5, 8, 10]\n    assert candidate([10, 15, 14, 13, 18, 12, 20], 10, 5) == [10, 15, 20]\n", "entry_point": "div_of_nums"}
{"task_id": 818, "prompt": "from typing import List\n\n\ndef lower_ctr(s: str) -> int:\n    \"\"\" Count the number of lower case letters in the given string.\n    >>> lower_ctr('abc')\n    3\n    >>> lower_ctr('string')\n    6\n    >>> lower_ctr('Python')\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('abc') == 3\n    assert candidate('string') == 6\n    assert candidate('Python') == 5\n", "entry_point": "lower_ctr"}
{"task_id": 819, "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\n\n", "test": "def check(candidate):\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\n    assert candidate([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1, 1])\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])\n\n", "entry_point": "count_duplic"}
{"task_id": 820, "prompt": "def check_monthnum_number(month_num: int) -> bool:\n    \"\"\" Check whether the given month number contains 28 days or not.\n    >>> check_monthnum_number(2)\n    True\n    >>> check_monthnum_number(1)\n    False\n    >>> check_monthnum_number(3)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == True\n    assert candidate(1) == False\n    assert candidate(3) == False\n", "entry_point": "check_monthnum_number"}
{"task_id": 821, "prompt": "from typing import Dict\n\n\ndef merge_dictionaries(dict1: Dict[str, str], dict2: Dict[str, str]) -> Dict[str, str]:\n    \"\"\" Merge two dictionaries into a single dictionary.\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    >>> merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    >>> merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\n    assert candidate({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}\n", "entry_point": "merge_dictionaries"}
{"task_id": 822, "prompt": "def pass_validity(password: str) -> bool:\n    \"\"\" Check if the password is valid.\n    >>> pass_validity(\"password\")\n    False\n    >>> pass_validity(\"Password@10\")\n    True\n    >>> pass_validity(\"password@10\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"password\") == False\n    assert candidate(\"Password@10\") == True\n    assert candidate(\"password@10\") == False\n", "entry_point": "pass_validity"}
{"task_id": 823, "prompt": "import re\n\n\ndef check_substring(s: str, substring: str) -> str:\n    \"\"\" Check if the given string starts with the specified substring using regex.\n    >>> check_substring(\"dreams for dreams makes life fun\", \"makes\")\n    'string doesnt start with the given substring'\n    >>> check_substring(\"Hi there how are you Hi alex\", \"Hi\")\n    'string starts with the given substring'\n    >>> check_substring(\"Its been a long day\", \"been\")\n    'string doesnt start with the given substring'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\n    assert candidate(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\n    assert candidate(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'\n", "entry_point": "check_substring"}
{"task_id": 824, "prompt": "from typing import List\n\n\ndef remove_even(numbers: List[int]) -> List[int]:\n    \"\"\" Remove all even numbers from the given list and return the modified list.\n    >>> remove_even([1,3,5,2])\n    [1,3,5]\n    >>> remove_even([5,6,7])\n    [5,7]\n    >>> remove_even([1,2,3,4])\n    [1,3]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,5,2]) == [1,3,5]\n    assert candidate([5,6,7]) == [5,7]\n    assert candidate([1,2,3,4]) == [1,3]\n", "entry_point": "remove_even"}
{"task_id": 825, "prompt": "from typing import List\n\n\ndef access_elements(lst: List[int], indices: List[int]) -> List[int]:\n    \"\"\" Access multiple elements of specified index from a given list.\n    >>> access_elements([2,3,8,4,7,9],[0,3,5])\n    [2, 4, 9]\n    >>> access_elements([1, 2, 3, 4, 5],[1,2])\n    [2,3]\n    >>> access_elements([1,0,2,3],[0,1])\n    [1,0]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\n    assert candidate([1, 2, 3, 4, 5],[1,2]) == [2,3]\n    assert candidate([1,0,2,3],[0,1]) == [1,0]\n", "entry_point": "access_elements"}
{"task_id": 826, "prompt": "def check_Type_Of_Triangle(side1: int, side2: int, side3: int) -> str:\n    \"\"\" Determine the type of triangle based on the given sides.\n    >>> check_Type_Of_Triangle(1,2,3)\n    'Obtuse-angled Triangle'\n    >>> check_Type_Of_Triangle(2,2,2)\n    'Acute-angled Triangle'\n    >>> check_Type_Of_Triangle(1,0,1)\n    'Right-angled Triangle'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,2,3) == \"Obtuse-angled Triangle\"\n    assert candidate(2,2,2) == \"Acute-angled Triangle\"\n    assert candidate(1,0,1) == \"Right-angled Triangle\"\n", "entry_point": "check_Type_Of_Triangle"}
{"task_id": 827, "prompt": "from typing import List\n\n\ndef sum_column(matrix: List[List[int]], column_index: int) -> int:\n    \"\"\" Sum a specific column of a list in a given list of lists.\n    >>> sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 0)\n    12\n    >>> sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 1)\n    15\n    >>> sum_column([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 3)\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 0) == 12\n    assert candidate([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 1) == 15\n    assert candidate([[1,2,3,2],[4,5,6,2],[7,8,9,5]], 3) == 9\n\n", "entry_point": "sum_column"}
{"task_id": 828, "prompt": "def count_alpha_dig_spl(s: str) -> tuple:\n    \"\"\" Count the number of alphabets, digits, and special characters in the given string.\n    >>> count_alpha_dig_spl(\"abc!@#123\")\n    (3, 3, 3)\n    >>> count_alpha_dig_spl(\"dgsuy@#$%&1255\")\n    (5, 4, 5)\n    >>> count_alpha_dig_spl(\"fjdsif627348#%$^&\")\n    (6, 6, 5)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abc!@#123\") == (3, 3, 3)\n    assert candidate(\"dgsuy@#$%&1255\") == (5, 4, 5)\n    assert candidate(\"fjdsif627348#%$^&\") == (6, 6, 5)\n", "entry_point": "count_alpha_dig_spl"}
{"task_id": 829, "prompt": "def second_frequent(strings: List[str]) -> str:\n    \"\"\" Find out the second most repeated (or frequent) string in the given sequence.\n    >>> second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa'])\n    'bbb'\n    >>> second_frequent(['abc','bcd','abc','bcd','bcd','bcd'])\n    'abc'\n    >>> second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma'])\n    'gsm'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\n    assert candidate(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\n    assert candidate(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'\n", "entry_point": "second_frequent"}
{"task_id": 830, "prompt": "from typing import List\n\n\ndef round_up(number: float, digits: int) -> float:\n    \"\"\" Round up a number to specific digits.\n    >>> round_up(123.01247, 0)\n    124\n    >>> round_up(123.01247, 1)\n    123.1\n    >>> round_up(123.01247, 2)\n    123.02\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(123.01247, 0) == 124\n    assert candidate(123.01247, 1) == 123.1\n    assert candidate(123.01247, 2) == 123.02\n", "entry_point": "round_up"}
{"task_id": 831, "prompt": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\" Count the number of pairs of equal elements in the given array.\n    >>> count_Pairs([1,1,1,1], 4)\n    6\n    >>> count_Pairs([1,5,1], 3)\n    1\n    >>> count_Pairs([3,2,1,7,8,9], 6)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,1,1], 4) == 6\n    assert candidate([1,5,1], 3) == 1\n    assert candidate([3,2,1,7,8,9], 6) == 0\n\n", "entry_point": "count_Pairs"}
{"task_id": 832, "prompt": "import re\n\n\ndef extract_max(s: str) -> int:\n    \"\"\" Extract the maximum numeric value from a given string.\n    >>> extract_max('100klh564abc365bg')\n    564\n    >>> extract_max('hello300how546mer231')\n    546\n    >>> extract_max('its233beenalong343journey234')\n    343\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('100klh564abc365bg') == 564\n    assert candidate('hello300how546mer231') == 546\n    assert candidate('its233beenalong343journey234') == 343\n\n", "entry_point": "extract_max"}
{"task_id": 833, "prompt": "def get_key(d: dict) -> list:\n    \"\"\" Get dictionary keys as a list.\n    >>> get_key({1:'python', 2:'java'})\n    [1, 2]\n    >>> get_key({10:'red', 20:'blue', 30:'black'})\n    [10, 20, 30]\n    >>> get_key({27:'language', 39:'java', 44:'little'})\n    [27, 39, 44]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({1:'python', 2:'java'}) == [1, 2]\n    assert candidate({10:'red', 20:'blue', 30:'black'}) == [10, 20, 30]\n    assert candidate({27:'language', 39:'java', 44:'little'}) == [27, 39, 44]\n", "entry_point": "get_key"}
{"task_id": 834, "prompt": "from typing import List\n\n\ndef generate_matrix(n: int) -> List[List[int]]:\n    \"\"\" Generate a square matrix filled with elements from 1 to n^2 in spiral order.\n    >>> generate_matrix(3)\n    [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n    >>> generate_matrix(2)\n    [[1, 2], [4, 3]]\n    >>> generate_matrix(7)\n    [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n    assert candidate(2) == [[1, 2], [4, 3]]\n    assert candidate(7) == [[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]\n", "entry_point": "generate_matrix"}
{"task_id": 835, "prompt": "def slope(x1: float, y1: float, x2: float, y2: float) -> float:\n    \"\"\" Calculate the slope of a line given two points (x1, y1) and (x2, y2).\n    >>> slope(4, 2, 2, 5)\n    -1.5\n    >>> slope(2, 4, 4, 6)\n    1\n    >>> slope(1, 2, 4, 2)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 2, 2, 5) == -1.5\n    assert candidate(2, 4, 4, 6) == 1\n    assert candidate(1, 2, 4, 2) == 0\n", "entry_point": "slope"}
{"task_id": 836, "prompt": "from typing import List\n\n\ndef max_sub_array_sum(numbers: List[int], n: int) -> int:\n    \"\"\" Find length of the subarray having maximum sum.\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    5\n    >>> max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)\n    2\n    >>> max_sub_array_sum([-1, -2, 3, 4, 5], 5)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 5\n    assert candidate([1, -2, 1, 1, -2, 1], 6) == 2\n    assert candidate([-1, -2, 3, 4, 5], 5) == 3\n\n", "entry_point": "max_sub_array_sum"}
{"task_id": 837, "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\" Return the cube sum of first n odd natural numbers.\n    >>> cube_Sum(2)\n    28\n    >>> cube_Sum(3)\n    153\n    >>> cube_Sum(4)\n    496\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 28\n    assert candidate(3) == 153\n    assert candidate(4) == 496\n", "entry_point": "cube_Sum"}
{"task_id": 838, "prompt": "from typing import List\n\n\ndef min_Swaps(s1: str, s2: str) -> int:\n    \"\"\" Find the minimum number of swaps required to make two binary strings equal.\n    >>> min_Swaps(\"0011\",\"1111\")\n    1\n    >>> min_Swaps(\"00011\",\"01001\")\n    2\n    >>> min_Swaps(\"111\",\"111\")\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"0011\",\"1111\") == 1\n    assert candidate(\"00011\",\"01001\") == 2\n    assert candidate(\"111\",\"111\") == 0\n\n", "entry_point": "min_Swaps"}
{"task_id": 839, "prompt": "from typing import List, Tuple\n\n\ndef sort_tuple(tuples: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\" Sort the given list of tuples alphabetically by the first item of each tuple.\n    >>> sort_tuple([('Amana', 28), ('Zenat', 30), ('Abhishek', 29),('Nikhil', 21), ('B', 'C')])\n    [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    >>> sort_tuple([('aaaa', 28), ('aa', 30), ('bab', 29), ('bb', 21), ('csa', 'C')])\n    [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    >>> sort_tuple([('Sarala', 28), ('Ayesha', 30), ('Suman', 29),('Sai', 21), ('G', 'H')])\n    [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Amana', 28), ('Zenat', 30), ('Abhishek', 29),('Nikhil', 21), ('B', 'C')]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\n    assert candidate([('aaaa', 28), ('aa', 30), ('bab', 29), ('bb', 21), ('csa', 'C')]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\n    assert candidate([('Sarala', 28), ('Ayesha', 30), ('Suman', 29),('Sai', 21), ('G', 'H')]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]\n\n", "entry_point": "sort_tuple"}
{"task_id": 840, "prompt": "def Check_Solution(a: int, b: int, c: int) -> str:\n    \"\"\" Check whether the roots of a quadratic equation ax^2 + bx + c = 0 are numerically equal but opposite in sign or not.\n    >>> Check_Solution(2, 0, -1)\n    'Yes'\n    >>> Check_Solution(1, -5, 6)\n    'No'\n    >>> Check_Solution(2, 0, 2)\n    'Yes'\n    \"\"\n", "test": "def check(candidate):\n    assert candidate(2, 0, -1) == 'Yes'\n    assert candidate(1, -5, 6) == 'No'\n    assert candidate(2, 0, 2) == 'Yes'\n", "entry_point": "Check_Solution"}
{"task_id": 841, "prompt": "from typing import List\n\n\ndef get_inv_count(arr: List[int], n: int) -> int:\n    \"\"\" Count the number of inversions in the given array.\n    >>> get_inv_count([1, 20, 6, 4, 5], 5)\n    5\n    >>> get_inv_count([8, 4, 2, 1], 4)\n    6\n    >>> get_inv_count([3, 1, 2], 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 20, 6, 4, 5], 5) == 5\n    assert candidate([8, 4, 2, 1], 4) == 6\n    assert candidate([3, 1, 2], 3) == 2\n", "entry_point": "get_inv_count"}
{"task_id": 842, "prompt": "from typing import List\n\n\ndef get_odd_occurence(arr: List[int], n: int) -> int:\n    \"\"\" Find the number which occurs for an odd number of times in the given array.\n    >>> get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n    5\n    >>> get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)\n    3\n    >>> get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\n    assert candidate([1, 2, 3, 2, 3, 1, 3], 7) == 3\n    assert candidate([5, 7, 2, 7, 5, 2, 5], 7) == 5\n", "entry_point": "get_odd_occurence"}
{"task_id": 843, "prompt": "from typing import List\nimport heapq\n\ndef nth_super_ugly_number(n: int, primes: List[int]) -> int:\n    \"\"\" Find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n    >>> nth_super_ugly_number(12, [2, 7, 13, 19])\n    32\n    >>> nth_super_ugly_number(10, [2, 7, 13, 19])\n    26\n    >>> nth_super_ugly_number(100, [2, 7, 13, 19])\n    5408\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12, [2, 7, 13, 19]) == 32\n    assert candidate(10, [2, 7, 13, 19]) == 26\n    assert candidate(100, [2, 7, 13, 19]) == 5408\n\n", "entry_point": "nth_super_ugly_number"}
{"task_id": 844, "prompt": "from typing import List\n\n\ndef get_Number(n: int, k: int) -> int:\n    \"\"\" Find the kth element in an array containing odd elements first and then even elements.\n    >>> get_Number(8,5)\n    2\n    >>> get_Number(7,2)\n    3\n    >>> get_Number(5,2)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(8,5) == 2\n    assert candidate(7,2) == 3\n    assert candidate(5,2) == 3\n\n", "entry_point": "get_Number"}
{"task_id": 845, "prompt": "def find_Digits(n: int) -> int:\n    \"\"\" Return the number of digits in the factorial of the given number.\n    >>> find_Digits(7)\n    4\n    >>> find_Digits(5)\n    3\n    >>> find_Digits(4)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 4\n    assert candidate(5) == 3\n    assert candidate(4) == 2\n", "entry_point": "find_Digits"}
{"task_id": 846, "prompt": "from typing import List\n\n\ndef find_platform(arrival: List[int], departure: List[int], n: int) -> int:\n    \"\"\" Write a function to find the minimum number of platforms required for a railway/bus station.\n    >>> find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)\n    3\n    >>> find_platform([100,200,300,400],[700,800,900,1000],4)\n    4\n    >>> find_platform([5,6,7,8],[4,3,2,1],4)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\n    assert candidate([100,200,300,400],[700,800,900,1000],4)==4\n    assert candidate([5,6,7,8],[4,3,2,1],4)==1\n\n", "entry_point": "find_platform"}
{"task_id": 847, "prompt": "from typing import List\n\n\ndef lcopy(input_tuple: tuple) -> List[int]:\n    \"\"\" Copy a list from a singleton tuple.\n    >>> lcopy(([1, 2, 3],))\n    [1, 2, 3]\n    >>> lcopy(([4, 8, 2, 10, 15, 18],))\n    [4, 8, 2, 10, 15, 18]\n    >>> lcopy(([4, 5, 6],))\n    [4, 5, 6]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(([1, 2, 3],)) == [1, 2, 3]\n    assert candidate(([4, 8, 2, 10, 15, 18],)) == [4, 8, 2, 10, 15, 18]\n    assert candidate(([4, 5, 6],)) == [4, 5, 6]\n\n", "entry_point": "lcopy"}
{"task_id": 848, "prompt": "from typing import List\n\n\ndef area_trapezium(base1: float, base2: float, height: float) -> float:\n    \"\"\" Calculate the area of a trapezium given its bases and height.\n    >>> area_trapezium(6, 9, 4)\n    30\n    >>> area_trapezium(10, 20, 30)\n    450\n    >>> area_trapezium(15, 25, 35)\n    700\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 9, 4) == 30\n    assert candidate(10, 20, 30) == 450\n    assert candidate(15, 25, 35) == 700\n\n", "entry_point": "area_trapezium"}
{"task_id": 849, "prompt": "from typing import List\n\n\ndef Sum(number: int) -> int:\n    \"\"\" Find sum of all prime divisors of a given number.\n    >>> Sum(60)\n    10\n    >>> Sum(39)\n    16\n    >>> Sum(40)\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(60) == 10\n    assert candidate(39) == 16\n    assert candidate(40) == 7\n", "entry_point": "Sum"}
{"task_id": 850, "prompt": "from typing import List\n\n\ndef is_triangle_exists(angle1: int, angle2: int, angle3: int) -> bool:\n    \"\"\" Check if a triangle of positive area is possible with the given angles.\n    >>> is_triangle_exists(50, 60, 70)\n    True\n    >>> is_triangle_exists(90, 45, 45)\n    True\n    >>> is_triangle_exists(150, 30, 70)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(50, 60, 70) == True\n    assert candidate(90, 45, 45) == True\n    assert candidate(150, 30, 70) == False\n\n", "entry_point": "is_triangle_exists"}
{"task_id": 851, "prompt": "def Sum_of_Inverse_Divisors(start: int, end: int) -> float:\n    \"\"\" Calculate the sum of the inverse of all divisors for numbers in the given range [start, end].\n    >>> Sum_of_Inverse_Divisors(6, 12)\n    2\n    >>> Sum_of_Inverse_Divisors(9, 13)\n    1.44\n    >>> Sum_of_Inverse_Divisors(1, 4)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 12) == 2\n    assert candidate(9, 13) == 1.44\n    assert candidate(1, 4) == 4\n", "entry_point": "Sum_of_Inverse_Divisors"}
{"task_id": 852, "prompt": "from typing import List\n\n\ndef remove_negs(numbers: List[int]) -> List[int]:\n    \"\"\" Remove negative numbers from the given list of integers.\n    >>> remove_negs([1,-2,3,-4])\n    [1, 3]\n    >>> remove_negs([1,2,3,-4])\n    [1, 2, 3]\n    >>> remove_negs([4,5,-6,7,-8])\n    [4, 5, 7]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,-2,3,-4]) == [1,3]\n    assert candidate([1,2,3,-4]) == [1,2,3]\n    assert candidate([4,5,-6,7,-8]) == [4,5,7]\n", "entry_point": "remove_negs"}
{"task_id": 853, "prompt": "def sum_of_odd_Factors(number: int) -> int:\n    \"\"\" Find the sum of all odd factors of a given number.\n    >>> sum_of_odd_Factors(30)\n    24\n    >>> sum_of_odd_Factors(18)\n    13\n    >>> sum_of_odd_Factors(2)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(30) == 24\n    assert candidate(18) == 13\n    assert candidate(2) == 1\n", "entry_point": "sum_of_odd_Factors"}
{"task_id": 854, "prompt": "from typing import List\nimport heapq\n\ndef raw_heap(elements: List[int]) -> List[int]:\n    \"\"\" Accepts an arbitrary list and converts it to a heap using heap queue algorithm.\n    >>> raw_heap([25, 44, 68, 21, 39, 23, 89])\n    [21, 25, 23, 44, 39, 68, 89]\n    >>> raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    >>> raw_heap([4, 5, 6, 2])\n    [2, 4, 6, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\n    assert candidate([4, 5, 6, 2])==[2, 4, 6, 5]\n", "entry_point": "raw_heap"}
{"task_id": 855, "prompt": "def check_Even_Parity(number: int) -> bool:\n    \"\"\" Check for even parity of a given number.\n    >>> check_Even_Parity(10)\n    True\n    >>> check_Even_Parity(11)\n    False\n    >>> check_Even_Parity(18)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(18) == True\n", "entry_point": "check_Even_Parity"}
{"task_id": 856, "prompt": "def find_Min_Swaps(arr: List[int], n: int) -> int:\n    \"\"\" Find minimum adjacent swaps required to sort binary array.\n    >>> find_Min_Swaps([1,0,1,0], 4)\n    3\n    >>> find_Min_Swaps([0,1,0], 3)\n    1\n    >>> find_Min_Swaps([0,0,1,1,0], 5)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,0,1,0], 4) == 3\n    assert candidate([0,1,0], 3) == 1\n    assert candidate([0,0,1,1,0], 5) == 2\n", "entry_point": "find_Min_Swaps"}
{"task_id": 857, "prompt": "from typing import List\n\n\ndef listify_list(strings: List[str]) -> List[List[str]]:\n    \"\"\" Given a list of strings, return a list where each string is turned into a list of characters.\n    >>> listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])\n    [['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    >>> listify_list(['python'])\n    [['p', 'y', 't', 'h', 'o', 'n']]\n    >>> listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])\n    [[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n    \"\"", "test": "def check(candidate):\n    assert candidate(['Red', 'Blue', 'Black', 'White', 'Pink']) == [['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\n    assert candidate(['python']) == [['p', 'y', 't', 'h', 'o', 'n']]\n    assert candidate([' red ', 'green',' black', 'blue ',' orange', 'brown']) == [[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]\n", "entry_point": "listify_list"}
{"task_id": 858, "prompt": "from typing import List\n\n\ndef count_list(list_of_lists: List[List[int]]) -> int:\n    \"\"\" Count the number of lists in a given list of lists and square the count.\n    >>> count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    25\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    16\n    >>> count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 25\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 16\n    assert candidate([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]]) == 9\n\n", "entry_point": "count_list"}
{"task_id": 859, "prompt": "from typing import List\n\n\ndef sub_lists(lst: List) -> List[List]:\n    \"\"\" Generate all sublists of a given list.\n    >>> sub_lists([10, 20, 30, 40])\n    [[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    >>> sub_lists(['X', 'Y', 'Z'])\n    [[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    >>> sub_lists([1,2,3])\n    [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\n    assert candidate(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\n    assert candidate([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]\n", "entry_point": "sub_lists"}
{"task_id": 860, "prompt": "from typing import List\n\n\ndef check_alphanumeric(text: str) -> str:\n    \"\"\" Check whether the given string is ending with only alphanumeric characters or not using regex.\n    >>> check_alphanumeric(\"dawood@\")\n    'Discard'\n    >>> check_alphanumeric(\"skdmsam326\")\n    'Accept'\n    >>> check_alphanumeric(\"cooltricks@\")\n    'Discard'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"dawood@\") == 'Discard'\n    assert candidate(\"skdmsam326\") == 'Accept'\n    assert candidate(\"cooltricks@\") == 'Discard'\n", "entry_point": "check_alphanumeric"}
{"task_id": 861, "prompt": "from typing import List\n\n\ndef anagram_lambda(strings: List[str], word: str) -> List[str]:\n    \"\"\" Find all anagrams of a given word in a list of strings using a lambda function.\n    >>> anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"], \"abcd\")\n    ['bcda', 'cbda', 'adcb']\n    >>> anagram_lambda([\"recitals\", \"python\"], \"articles\")\n    ['recitals']\n    >>> anagram_lambda([\"keep\", \"abcdef\", \"xyz\"], \"peek\")\n    ['keep']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"], \"abcd\") == ['bcda', 'cbda', 'adcb']\n    assert candidate([\"recitals\", \"python\"], \"articles\") == ['recitals']\n    assert candidate([\"keep\", \"abcdef\", \"xyz\"], \"peek\") == ['keep']\n", "entry_point": "anagram_lambda"}
{"task_id": 862, "prompt": "from typing import List, Tuple\n\n\ndef n_common_words(text: str, n: int) -> List[Tuple[str, int]]:\n    \"\"\" Find the occurrences of n most common words in a given text.\n    >>> n_common_words(\"python is a programming language\", 1)\n    [('python', 1)]\n    >>> n_common_words(\"python is a programming language\", 5)\n    [('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python is a programming language\", 1) == [('python', 1)]\n    assert candidate(\"python is a programming language\", 2) == [('python', 1), ('is', 1)]\n    assert candidate(\"python is a programming language\", 5) == [('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]\n", "entry_point": "n_common_words"}
{"task_id": 863, "prompt": "from typing import List\n\n\ndef find_longest_conseq_subseq(arr: List[int], n: int) -> int:\n    \"\"\" Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers.\n    >>> find_longest_conseq_subseq([1, 2, 2, 3], 4)\n    3\n    >>> find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)\n    4\n    >>> find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)\n    5\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 2, 3], 4) == 3\n    assert candidate([1, 9, 3, 10, 4, 20, 2], 7) == 4\n    assert candidate([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5\n\n", "entry_point": "find_longest_conseq_subseq"}
{"task_id": 864, "prompt": "from typing import List\n\n\ndef palindrome_lambda(strings: List[str]) -> List[str]:\n    \"\"\" Find palindromes in a given list of strings using lambda function.\n    >>> palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])\n    ['php', 'aaa']\n    >>> palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])\n    ['abba', 'aba']\n    >>> palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])\n    ['abbccbba', 'abba', 'aba']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"]) == ['php', 'aaa']\n    assert candidate([\"abcd\", \"Python\", \"abba\", \"aba\"]) == ['abba', 'aba']\n    assert candidate([\"abcd\", \"abbccbba\", \"abba\", \"aba\"]) == ['abbccbba', 'abba', 'aba']\n", "entry_point": "palindrome_lambda"}
{"task_id": 865, "prompt": "from typing import List\n\n\ndef ntimes_list(numbers: List[int], n: int) -> List[int]:\n    \"\"\" Multiply each element in the list by n using map function.\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)\n    [3, 6, 9, 12, 15, 18, 21]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 4)\n    [4, 8, 12, 16, 20, 24, 28]\n    >>> ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)\n    [10, 20, 30, 40, 50, 60, 70]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7], 3) == [3, 6, 9, 12, 15, 18, 21]\n    assert candidate([1, 2, 3, 4, 5, 6, 7], 4) == [4, 8, 12, 16, 20, 24, 28]\n    assert candidate([1, 2, 3, 4, 5, 6, 7], 10) == [10, 20, 30, 40, 50, 60, 70]\n", "entry_point": "ntimes_list"}
{"task_id": 866, "prompt": "def check_monthnumb(month: str) -> bool:\n    \"\"\" Check whether the given month name contains 31 days or not.\n    >>> check_monthnumb(\"February\")\n    False\n    >>> check_monthnumb(\"January\")\n    True\n    >>> check_monthnumb(\"March\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"February\") == False\n    assert candidate(\"January\") == True\n    assert candidate(\"March\") == True\n", "entry_point": "check_monthnumb"}
{"task_id": 867, "prompt": "def min_Num(numbers: List[int], size: int) -> int:\n    \"\"\" Add a minimum number such that the sum of array becomes even.\n    >>> min_Num([1,2,3,4,5,6,7,8,9], 9)\n    1\n    >>> min_Num([1,2,3,4,5,6,7,8], 8)\n    2\n    >>> min_Num([1,2,3], 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9], 9) == 1\n    assert candidate([1,2,3,4,5,6,7,8], 8) == 2\n    assert candidate([1,2,3], 3) == 2\n", "entry_point": "min_Num"}
{"task_id": 868, "prompt": "def length_Of_Last_Word(s: str) -> int:\n    \"\"\" Find the length of the last word in the given string.\n    >>> length_Of_Last_Word(\"python language\")\n    8\n    >>> length_Of_Last_Word(\"PHP\")\n    3\n    >>> length_Of_Last_Word(\"\")\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python language\") == 8\n    assert candidate(\"PHP\") == 3\n    assert candidate(\"\") == 0\n", "entry_point": "length_Of_Last_Word"}
{"task_id": 869, "prompt": "from typing import List\n\n\ndef remove_list_range(lists: List[List[int]], min_val: int, max_val: int) -> List[List[int]]:\n    \"\"\" Remove sublists from a given list of lists, which are outside a given range.\n    >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)\n    [[13, 14, 15, 17]]\n    >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)\n    [[2], [1, 2, 3]]\n    >>> remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)\n    [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17) == [[13, 14, 15, 17]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3) == [[2], [1, 2, 3]]\n    assert candidate([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7) == [[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]\n", "entry_point": "remove_list_range"}
{"task_id": 870, "prompt": "from typing import List\n\n\ndef sum_positivenum(numbers: List[int]) -> int:\n    \"\"\" Calculate the sum of the positive numbers in a given list of numbers.\n    >>> sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    48\n    >>> sum_positivenum([10, 15, -14, 13, -18, 12, -20])\n    50\n    >>> sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n    522\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 48\n    assert candidate([10, 15, -14, 13, -18, 12, -20]) == 50\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == 522\n\n", "entry_point": "sum_positivenum"}
{"task_id": 871, "prompt": "from typing import List\n\n\ndef are_Rotations(str1: str, str2: str) -> bool:\n    \"\"\" Check whether the given strings are rotations of each other or not.\n    >>> are_Rotations('abc', 'cba')\n    False\n    >>> are_Rotations('abcd', 'cdba')\n    False\n    >>> are_Rotations('abacd', 'cdaba')\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('abc', 'cba') == False\n    assert candidate('abcd', 'cdba') == False\n    assert candidate('abacd', 'cdaba') == True\n", "entry_point": "are_Rotations"}
{"task_id": 872, "prompt": "from typing import List\n\n\ndef check_subset(nested_list1: List[List[int]], nested_list2: List[List[int]]) -> bool:\n    \"\"\" Check if a nested list is a subset of another nested list.\n    >>> check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])\n    True\n    >>> check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])\n    True\n    >>> check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\n    assert candidate([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\n    assert candidate([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False\n", "entry_point": "check_subset"}
{"task_id": 873, "prompt": "def fibonacci(n: int) -> int:\n    \"\"\" Solve the fibonacci sequence using recursion.\n    >>> fibonacci(7)\n    13\n    >>> fibonacci(8)\n    21\n    >>> fibonacci(9)\n    34\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 13\n    assert candidate(8) == 21\n    assert candidate(9) == 34\n", "entry_point": "fibonacci"}
{"task_id": 874, "prompt": "from typing import List\n\n\ndef check_Concat(s: str, part: str) -> bool:\n    \"\"\" Check if the string s is a concatenation of the string part.\n    >>> check_Concat(\"abcabcabc\", \"abc\")\n    True\n    >>> check_Concat(\"abcab\", \"abc\")\n    False\n    >>> check_Concat(\"aba\", \"ab\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcabcabc\", \"abc\") == True\n    assert candidate(\"abcab\", \"abc\") == False\n    assert candidate(\"aba\", \"ab\") == False\n\n", "entry_point": "check_Concat"}
{"task_id": 875, "prompt": "from typing import List, Tuple\n\n\ndef min_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Find the minimum difference in the tuple pairs of given tuples.\n    >>> min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    1\n    >>> min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])\n    2\n    >>> min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\n    assert candidate([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\n    assert candidate([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6\n", "entry_point": "min_difference"}
{"task_id": 876, "prompt": "def lcm(a: int, b: int) -> int:\n    \"\"\" Find the least common multiple (LCM) of two positive integers.\n    >>> lcm(4, 6)\n    12\n    >>> lcm(15, 17)\n    255\n    >>> lcm(2, 6)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 6) == 12\n    assert candidate(15, 17) == 255\n    assert candidate(2, 6) == 6\n", "entry_point": "lcm"}
{"task_id": 877, "prompt": "def sort_String(s: str) -> str:\n    \"\"\" Sort the characters in the given string and return the sorted string.\n    >>> sort_String(\"cba\")\n    'abc'\n    >>> sort_String(\"data\")\n    'aadt'\n    >>> sort_String(\"zxy\")\n    'xyz'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"cba\") == \"abc\"\n    assert candidate(\"data\") == \"aadt\"\n    assert candidate(\"zxy\") == \"xyz\"\n", "entry_point": "sort_String"}
{"task_id": 878, "prompt": "from typing import Tuple, List\n\n\ndef check_tuples(given_tuple: Tuple[int], k_elements: List[int]) -> bool:\n    \"\"\" Check if the given tuple contains only elements that are in the k_elements list.\n    >>> check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5])\n    True\n    >>> check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((3, 5, 6, 5, 3, 6), [3, 6, 5]) == True\n    assert candidate((4, 5, 6, 4, 6, 5), [4, 5, 6]) == True\n    assert candidate((9, 8, 7, 6, 8, 9), [9, 8, 1]) == False\n", "entry_point": "check_tuples"}
{"task_id": 879, "prompt": "import re\n\n\ndef text_match(text: str) -> str:\n    \"\"\" Check if the text matches: 'a' followed by anything, ending in 'b'.\n    >>> text_match(\"aabbbbd\")\n    'Not matched!'\n    >>> text_match(\"accddbbjjjb\")\n    'Found a match!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aabbbbd\") == 'Not matched!'\n    assert candidate(\"aabAbbbc\") == 'Not matched!'\n    assert candidate(\"accddbbjjjb\") == 'Found a match!'\n", "entry_point": "text_match"}
{"task_id": 880, "prompt": "def Check_Solution(a: int, b: int, c: int) -> str:\n    \"\"\" Find the number of solutions in a quadratic equation ax^2 + bx + c = 0.\n    >>> Check_Solution(2, 5, 2)\n    '2 solutions'\n    >>> Check_Solution(1, 1, 1)\n    'No solutions'\n    >>> Check_Solution(1, 2, 1)\n    '1 solution'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 5, 2) == '2 solutions'\n    assert candidate(1, 1, 1) == 'No solutions'\n    assert candidate(1, 2, 1) == '1 solution'\n", "entry_point": "Check_Solution"}
{"task_id": 881, "prompt": "def sum_even_odd(numbers: List[int]) -> int:\n    \"\"\" Find the sum of the first even and the first odd number in the given list.\n    >>> sum_even_odd([1,3,5,7,4,1,6,8])\n    5\n    >>> sum_even_odd([1,2,3,4,5,6,7,8,9,10])\n    3\n    >>> sum_even_odd([1,5,7,9,10])\n    11\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8]) == 5\n    assert candidate([1,2,3,4,5,6,7,8,9,10]) == 3\n    assert candidate([1,5,7,9,10]) == 11\n", "entry_point": "sum_even_odd"}
{"task_id": 882, "prompt": "def parallelogram_perimeter(length: int, width: int) -> int:\n    \"\"\" Calculate the perimeter of a parallelogram given its length and width.\n    >>> parallelogram_perimeter(10, 20)\n    60\n    >>> parallelogram_perimeter(15, 20)\n    70\n    >>> parallelogram_perimeter(8, 9)\n    34\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 60\n    assert candidate(15, 20) == 70\n    assert candidate(8, 9) == 34\n\n", "entry_point": "parallelogram_perimeter"}
{"task_id": 883, "prompt": "from typing import List\n\n\ndef div_of_nums(numbers: List[int], m: int, n: int) -> List[int]:\n    \"\"\" Find numbers divisible by m and n from a list of numbers.\n    >>> div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)\n    [152, 44]\n    >>> div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)\n    [10]\n    >>> div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)\n    [10, 20]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4) == [152, 44]\n    assert candidate([1, 2, 3, 5, 7, 8, 10], 2, 5) == [10]\n    assert candidate([10, 15, 14, 13, 18, 12, 20], 10, 5) == [10, 20]\n", "entry_point": "div_of_nums"}
{"task_id": 884, "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\" Check whether all the bits are within a given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(10, 2, 1)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(5, 2, 4)\n    False\n    >>> all_Bits_Set_In_The_Given_Range(22, 2, 3)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 2, 1) == True\n    assert candidate(5, 2, 4) == False\n    assert candidate(22, 2, 3) == True\n\n", "entry_point": "all_Bits_Set_In_The_Given_Range"}
{"task_id": 885, "prompt": "def is_Isomorphic(s1: str, s2: str) -> bool:\n    \"\"\" Check whether the two given strings are isomorphic to each other or not.\n    >>> is_Isomorphic(\"paper\",\"title\")\n    True\n    >>> is_Isomorphic(\"ab\",\"ba\")\n    True\n    >>> is_Isomorphic(\"ab\",\"aa\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"paper\",\"title\") == True\n    assert candidate(\"ab\",\"ba\") == True\n    assert candidate(\"ab\",\"aa\") == False\n", "entry_point": "is_Isomorphic"}
{"task_id": 886, "prompt": "from typing import List\n\n\ndef sum_num(numbers: List[int]) -> float:\n    \"\"\" Calculate the average of all numbers in a given list.\n    >>> sum_num([8, 2, 3, 0, 7])\n    4.0\n    >>> sum_num([-10, -20, -30])\n    -20.0\n    >>> sum_num([19, 15, 18])\n    17.333333333333332\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([8, 2, 3, 0, 7]) == 4.0\n    assert candidate([-10, -20, -30]) == -20.0\n    assert candidate([19, 15, 18]) == 17.333333333333332\n", "entry_point": "sum_num"}
{"task_id": 887, "prompt": "def is_odd(number: int) -> bool:\n    \"\"\" Check whether the given number is odd or not using bitwise operator.\n    >>> is_odd(5)\n    True\n    >>> is_odd(6)\n    False\n    >>> is_odd(7)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(6) == False\n    assert candidate(7) == True\n", "entry_point": "is_odd"}
{"task_id": 888, "prompt": "from typing import List, Tuple\n\n\ndef substract_elements(tuples1: List[Tuple[int, int]], tuples2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\" Substract the elements of the given nested tuples.\n    >>> substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    >>> substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))\n    ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    >>> substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))\n    ((7, -4), (1, -4), (6, 8), (-2, 7))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\n    assert candidate(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\n    assert candidate(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))\n", "entry_point": "substract_elements"}
{"task_id": 889, "prompt": "from typing import List\n\n\ndef reverse_list_lists(lists: List[List[int]]) -> List[List[int]]:\n    \"\"\" Write a function to reverse each list in a given list of lists.\n    >>> reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])\n    [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    >>> reverse_list_lists([[1,2],[2,3],[3,4]])\n    [[2,1],[3,2],[4,3]]\n    >>> reverse_list_lists([[10,20],[30,40]])\n    [[20,10],[40,30]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\n    assert candidate([[1,2],[2,3],[3,4]]) == [[2,1],[3,2],[4,3]]\n    assert candidate([[10,20],[30,40]]) == [[20,10],[40,30]]\n", "entry_point": "reverse_list_lists"}
{"task_id": 890, "prompt": "from typing import List\n\n\ndef find_Extra(arr1: List[int], arr2: List[int], n: int) -> int:\n    \"\"\" Find the index of an extra element present in one sorted array.\n    >>> find_Extra([1,2,3,4],[1,2,3],3)\n    3\n    >>> find_Extra([2,4,6,8,10],[2,4,6,8],4)\n    4\n    >>> find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4],[1,2,3],3) == 3\n    assert candidate([2,4,6,8,10],[2,4,6,8],4) == 4\n    assert candidate([1,3,5,7,9,11],[1,3,5,7,9],5) == 5\n\n", "entry_point": "find_Extra"}
{"task_id": 891, "prompt": "def same_Length(num1: int, num2: int) -> bool:\n    \"\"\" Check whether the given two numbers have the same number of digits.\n    >>> same_Length(12, 1)\n    False\n    >>> same_Length(2, 2)\n    True\n    >>> same_Length(10, 20)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12, 1) == False\n    assert candidate(2, 2) == True\n    assert candidate(10, 20) == True\n", "entry_point": "same_Length"}
{"task_id": 892, "prompt": "def remove_spaces(s: str) -> str:\n    \"\"\" Remove multiple spaces in a string and return the modified string.\n    >>> remove_spaces('python  program')\n    'python program'\n    >>> remove_spaces('python   programming    language')\n    'python programming language'\n    >>> remove_spaces('python                     program')\n    'python program'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python  program') == 'python program'\n    assert candidate('python   programming    language') == 'python programming language'\n    assert candidate('python                     program') == 'python program'\n", "entry_point": "remove_spaces"}
{"task_id": 893, "prompt": "from typing import List\n\n\ndef Extract(list_of_lists: List[List]) -> List:\n    \"\"\" Get the last element of each sublist in the given list of lists.\n    >>> Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    [3, 5, 9]\n    >>> Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])\n    ['z', 'm', 'b', 'v']\n    >>> Extract([[1, 2, 3], [4, 5]])\n    [3, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\n    assert candidate([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\n    assert candidate([[1, 2, 3], [4, 5]]) == [3, 5]\n\n", "entry_point": "Extract"}
{"task_id": 894, "prompt": "def float_to_tuple(float_string: str) -> tuple:\n    \"\"\" Convert the given string of float type into tuple.\n    >>> float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\")\n    (1.2, 1.3, 2.3, 2.4, 6.5)\n    >>> float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\")\n    (2.3, 2.4, 5.6, 5.4, 8.9)\n    >>> float_to_tuple(\"0.3, 0.5, 7.8, 9.4\")\n    (0.3, 0.5, 7.8, 9.4)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\n    assert candidate(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\n    assert candidate(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)\n", "entry_point": "float_to_tuple"}
{"task_id": 895, "prompt": "from typing import List\n\n\ndef max_sum_subseq(numbers: List[int]) -> int:\n    \"\"\" Find the maximum sum of subsequences of given array with no adjacent elements.\n    >>> max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])\n    26\n    >>> max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])\n    28\n    >>> max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])\n    44\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\n    assert candidate([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\n    assert candidate([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44\n\n", "entry_point": "max_sum_subseq"}
{"task_id": 896, "prompt": "from typing import List\n\n\ndef sort_list_last(tuples: List[tuple]) -> List[tuple]:\n    \"\"\" Sort a list of non-empty tuples in increasing order by the last element in each tuple.\n    >>> sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])\n    [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n    >>> sort_list_last([(9, 8), (4, 7), (3, 5), (7, 9), (1, 2)])\n    [(1, 2), (3, 5), (4, 7), (9, 8), (7, 9)]\n    >>> sort_list_last([(20, 50), (10, 20), (40, 40)])\n    [(10, 20), (40, 40), (20, 50)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]) == [(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]\n    assert candidate([(9, 8), (4, 7), (3, 5), (7, 9), (1, 2)]) == [(1, 2), (3, 5), (4, 7), (9, 8), (7, 9)]\n    assert candidate([(20, 50), (10, 20), (40, 40)]) == [(10, 20), (40, 40), (20, 50)]\n", "entry_point": "sort_list_last"}
{"task_id": 897, "prompt": "def is_Word_Present(sentence: str, word: str) -> bool:\n    \"\"\" Check whether the word is present in a given sentence or not.\n    >>> is_Word_Present(\"machine learning\", \"machine\")\n    True\n    >>> is_Word_Present(\"easy\", \"fun\")\n    False\n    >>> is_Word_Present(\"python language\", \"code\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"machine learning\", \"machine\") == True\n    assert candidate(\"easy\", \"fun\") == False\n    assert candidate(\"python language\", \"code\") == False\n", "entry_point": "is_Word_Present"}
{"task_id": 898, "prompt": "from typing import List\n\n\ndef extract_elements(lst: List[int], n: int) -> List[int]:\n    \"\"\" Extract specified number of elements from a given list, which follow each other continuously.\n    >>> extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)\n    [1, 4]\n    >>> extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)\n    [4]\n    >>> extract_elements([0, 0, 0, 0, 0], 5)\n    [0]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7], 2) == [1, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4) == [4]\n    assert candidate([0, 0, 0, 0, 0], 5) == [0]\n", "entry_point": "extract_elements"}
{"task_id": 899, "prompt": "def can_sort_by_corners(arr: List[int], n: int) -> bool:\n    \"\"\" Check whether an array can be sorted or not by picking only the corner elements.\n    >>> can_sort_by_corners([3,2,1,2,3,4], 6)\n    True\n    >>> can_sort_by_corners([2,1,4,5,1], 5)\n    True\n    >>> can_sort_by_corners([1,2,2,1,2,3], 6)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3,2,1,2,3,4], 6) == True\n    assert candidate([2,1,4,5,1], 5) == True\n    assert candidate([1,2,2,1,2,3], 6) == True\n", "entry_point": "can_sort_by_corners"}
{"task_id": 900, "prompt": "def match_num(s: str) -> bool:\n    \"\"\" Check if the string starts with a specific number.\n    >>> match_num('5-2345861')\n    True\n    >>> match_num('6-2345861')\n    False\n    >>> match_num('78910')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('5-2345861') == True\n    assert candidate('6-2345861') == False\n    assert candidate('78910') == False\n", "entry_point": "match_num"}
{"task_id": 901, "prompt": "def smallest_multiple(n: int) -> int:\n    \"\"\" Find the smallest multiple of the first n numbers.\n    >>> smallest_multiple(13)\n    360360\n    >>> smallest_multiple(2)\n    2\n    >>> smallest_multiple(1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(13) == 360360\n    assert candidate(2) == 2\n    assert candidate(1) == 1\n", "entry_point": "smallest_multiple"}
{"task_id": 902, "prompt": "def add_dict(dict1: dict, dict2: dict) -> dict:\n    \"\"\" Combine two dictionaries by adding values for common keys.\n    >>> add_dict({'a': 100, 'b': 200, 'c':300}, {'a': 300, 'b': 200, 'd':400})\n    {'a': 400, 'b': 400, 'c': 300, 'd': 400}\n    >>> add_dict({'a': 500, 'b': 700, 'c':900}, {'a': 500, 'b': 600, 'd':900})\n    {'a': 1000, 'b': 1300, 'c': 900, 'd': 900}\n    >>> add_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})\n    {'a': 1800, 'b': 1800, 'd': 1800}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'a': 100, 'b': 200, 'c':300}, {'a': 300, 'b': 200, 'd':400}) == {'a': 400, 'b': 400, 'c': 300, 'd': 400}\n    assert candidate({'a': 500, 'b': 700, 'c':900}, {'a': 500, 'b': 600, 'd':900}) == {'a': 1000, 'b': 1300, 'c': 900, 'd': 900}\n    assert candidate({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900}) == {'a': 1800, 'b': 1800, 'd': 1800}\n", "entry_point": "add_dict"}
{"task_id": 903, "prompt": "def count_Unset_Bits(n: int) -> int:\n    \"\"\" Count the total number of unset bits from 1 to n.\n    >>> count_Unset_Bits(2)\n    1\n    >>> count_Unset_Bits(5)\n    4\n    >>> count_Unset_Bits(14)\n    17\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(5) == 4\n    assert candidate(14) == 17\n", "entry_point": "count_Unset_Bits"}
{"task_id": 904, "prompt": "def even_num(number: float) -> bool:\n    \"\"\" Check if the given number is even.\n    >>> even_num(13.5)\n    False\n    >>> even_num(0)\n    True\n    >>> even_num(-9)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(13.5) == False\n    assert candidate(0) == True\n    assert candidate(-9) == False\n\n", "entry_point": "even_num"}
{"task_id": 905, "prompt": "def sum_of_square(n: int) -> int:\n    \"\"\" Find the sum of squares of binomial coefficients for a given number.\n    >>> sum_of_square(4)\n    70\n    >>> sum_of_square(5)\n    252\n    >>> sum_of_square(2)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 70\n    assert candidate(5) == 252\n    assert candidate(2) == 6\n", "entry_point": "sum_of_square"}
{"task_id": 906, "prompt": "from typing import List, Tuple\n\n\ndef extract_date(url: str) -> List[Tuple[str, str, str]]:\n    \"\"\" Extract year, month, and date from a URL using regex.\n    >>> extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\")\n    [('2016', '09', '02')]\n    >>> extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\")\n    [('2020', '11', '03')]\n    >>> extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\")\n    [('2020', '12', '29')]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\n    assert candidate(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\n    assert candidate(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]\n", "entry_point": "extract_date"}
{"task_id": 907, "prompt": "def lucky_num(n: int) -> List[int]:\n    \"\"\" Return the first n lucky numbers.\n    >>> lucky_num(10)\n    [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n    >>> lucky_num(5)\n    [1, 3, 7, 9, 13]\n    >>> lucky_num(8)\n    [1, 3, 7, 9, 13, 15, 21, 25]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == [1, 3, 7, 9, 13, 15, 21, 25, 31, 33]\n    assert candidate(5) == [1, 3, 7, 9, 13]\n    assert candidate(8) == [1, 3, 7, 9, 13, 15, 21, 25]\n", "entry_point": "lucky_num"}
{"task_id": 908, "prompt": "from typing import List\n\n\ndef find_fixed_point(arr: List[int], n: int) -> int:\n    \"\"\" Find the fixed point in the given array. A fixed point in an array is an index i such that arr[i] is equal to i.\n    >>> find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)\n    3\n    >>> find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8], 8)\n    -1\n    >>> find_fixed_point([0, 2, 5, 8, 17], 5)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], 8) == -1\n    assert candidate([0, 2, 5, 8, 17], 5) == 0\n", "entry_point": "find_fixed_point"}
{"task_id": 909, "prompt": "def previous_palindrome(number: int) -> int:\n    \"\"\" Find the previous palindrome of a specified number.\n    >>> previous_palindrome(99)\n    88\n    >>> previous_palindrome(1221)\n    1111\n    >>> previous_palindrome(120)\n    111\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(99) == 88\n    assert candidate(1221) == 1111\n    assert candidate(120) == 111\n", "entry_point": "previous_palindrome"}
{"task_id": 910, "prompt": "from typing import Tuple\n\n\ndef check_date(day: int, month: int, year: int) -> bool:\n    \"\"\" Validate a gregorian date.\n    >>> check_date(11,11,2002)\n    True\n    >>> check_date(13,11,2002)\n    False\n    >>> check_date('11','11','2002')\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(11,11,2002) == True\n    assert candidate(13,11,2002) == False\n    assert candidate('11','11','2002') == True\n", "entry_point": "check_date"}
{"task_id": 911, "prompt": "from typing import List\nimport heapq\n\ndef maximum_product(nums: List[int]) -> int:\n    \"\"\" Compute the maximum product of three numbers of a given array of integers.\n    >>> maximum_product([12, 74, 9, 50, 61, 41])\n    225700\n    >>> maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    414375\n    >>> maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n    2520\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12, 74, 9, 50, 61, 41]) == 225700\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58]) == 414375\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]) == 2520\n", "entry_point": "maximum_product"}
{"task_id": 912, "prompt": "from typing import List\n\n\ndef lobb_num(n: int, m: int) -> int:\n    \"\"\" Find the Lobb number given n and m.\n    >>> lobb_num(5, 3)\n    35\n    >>> lobb_num(3, 2)\n    5\n    >>> lobb_num(4, 2)\n    20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 3) == 35\n    assert candidate(3, 2) == 5\n    assert candidate(4, 2) == 20\n\n", "entry_point": "lobb_num"}
{"task_id": 913, "prompt": "def end_num(s: str) -> bool:\n    \"\"\" Check if the given string ends with a number.\n    >>> end_num('abcdef')\n    False\n    >>> end_num('abcdef7')\n    True\n    >>> end_num('abc')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('abcdef') == False\n    assert candidate('abcdef7') == True\n    assert candidate('abc') == False\n", "entry_point": "end_num"}
{"task_id": 914, "prompt": "from typing import List\n\n\ndef is_Two_Alter(s: str) -> bool:\n    \"\"\" Check whether the given string is made up of two alternating characters or not.\n    >>> is_Two_Alter(\"abab\")\n    True\n    >>> is_Two_Alter(\"aaaa\")\n    False\n    >>> is_Two_Alter(\"xyz\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abab\") == True\n    assert candidate(\"aaaa\") == False\n    assert candidate(\"xyz\") == False\n", "entry_point": "is_Two_Alter"}
{"task_id": 915, "prompt": "from typing import List\n\n\ndef rearrange_numbs(numbers: List[int]) -> List[int]:\n    \"\"\" Rearrange positive and negative numbers in a given array using lambda function.\n    >>> rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])\n    [2, 5, 7, 8, 9, -10, -3, -1]\n    >>> rearrange_numbs([10, 15, 14, 13, -18, 12, -20])\n    [10, 12, 13, 14, 15, -20, -18]\n    >>> rearrange_numbs([-20, 20, -10, 10, -30, 30])\n    [10, 20, 30, -30, -20, -10]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 5, 7, 8, 9, -10]) == [2, 5, 7, 8, 9, -10, -3, -1]\n    assert candidate([10, 15, 14, 13, -18, 12, -20]) == [10, 12, 13, 14, 15, -20, -18]\n    assert candidate([-20, 20, -10, 10, -30, 30]) == [10, 20, 30, -30, -20, -10]\n", "entry_point": "rearrange_numbs"}
{"task_id": 916, "prompt": "from typing import List, Tuple\n\n\ndef find_triplet_array(arr: List[int], n: int, sum_value: int) -> Tuple[int, int, int]:\n    \"\"\" Find if there is a triplet in the array whose sum is equal to a given value.\n    >>> find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)\n    (4, 10, 8)\n    >>> find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)\n    (12, 3, 9)\n    >>> find_triplet_array([1, 2, 3, 4, 5], 5, 9)\n    (1, 3, 5)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\n    assert candidate([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\n    assert candidate([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)\n", "entry_point": "find_triplet_array"}
{"task_id": 917, "prompt": "import re\n\n\ndef text_uppercase_lowercase(s: str) -> str:\n    \"\"\" Find sequences of one upper case letter followed by lower case letters.\n    >>> text_uppercase_lowercase(\"AaBbGg\")\n    'Found a match!'\n    >>> text_uppercase_lowercase(\"aA\")\n    'Not matched!'\n    >>> text_uppercase_lowercase(\"PYTHON\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AaBbGg\") == 'Found a match!'\n    assert candidate(\"aA\") == 'Not matched!'\n    assert candidate(\"PYTHON\") == 'Not matched!'\n\n", "entry_point": "text_uppercase_lowercase"}
{"task_id": 918, "prompt": "from typing import List\n\n\ndef coin_change(coins: List[int], n: int, total: int) -> int:\n    \"\"\" Count different ways to make change for a given value total using n types of coins.\n    >>> coin_change([1, 2, 3], 3, 4)\n    4\n    >>> coin_change([4, 5, 6, 7, 8, 9], 6, 9)\n    2\n    >>> coin_change([4, 5, 6, 7, 8, 9], 6, 4)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], 3, 4) == 4\n    assert candidate([4, 5, 6, 7, 8, 9], 6, 9) == 2\n    assert candidate([4, 5, 6, 7, 8, 9], 6, 4) == 1\n\n", "entry_point": "coin_change"}
{"task_id": 919, "prompt": "from typing import List\n\n\ndef multiply_list(numbers: List[int]) -> int:\n    \"\"\" Multiply all items in the list.\n    >>> multiply_list([1, -2, 3])\n    -6\n    >>> multiply_list([1, 2, 3, 4])\n    24\n    >>> multiply_list([3, 1, 2, 3])\n    18\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, -2, 3]) == -6\n    assert candidate([1, 2, 3, 4]) == 24\n    assert candidate([3, 1, 2, 3]) == 18\n", "entry_point": "multiply_list"}
{"task_id": 920, "prompt": "from typing import List, Tuple\n\n\ndef remove_tuple(tuples: List[Tuple]) -> List[Tuple]:\n    \"\"\" Write a function to remove all tuples with all none values in the given tuple list.\n    >>> remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )])\n    [(None, 2), (3, 4), (12, 3)]\n    >>> remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )])\n    [(3, 6), (17, 3), (None, 1)]\n    >>> remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )])\n    [(1, 2), (2, None), (3, None), (24, 3)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(None, 2), (None, None), (3, 4), (12, 3), (None, )]) == [(None, 2), (3, 4), (12, 3)]\n    assert candidate([(None, None), (None, None), (3, 6), (17, 3), (None,1 )]) == [(3, 6), (17, 3), (None, 1)]\n    assert candidate([(1, 2), (2, None), (3, None), (24, 3), (None, None )]) == [(1, 2), (2, None), (3, None), (24, 3)]\n", "entry_point": "remove_tuple"}
{"task_id": 921, "prompt": "from typing import List, Tuple\n\n\ndef chunk_tuples(tup: Tuple[int, ...], n: int) -> List[Tuple[int, ...]]:\n    \"\"\" Write a function to perform chunking of tuples each of size n.\n    >>> chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)\n    [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    >>> chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)\n    [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    >>> chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)\n    [(11, 14, 16, 17), (19, 21, 22, 25)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\n    assert candidate((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\n    assert candidate((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]\n", "entry_point": "chunk_tuples"}
{"task_id": 922, "prompt": "from typing import List, Tuple\n\n\ndef max_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Find a pair with the highest product from a given array of integers.\n    >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_product([0, -1, -2, -4, 5, 0, -6])\n    (-4, -6)\n    >>> max_product([1, 3, 5, 6, 8, 9])\n    (8, 9)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    assert candidate([0, -1, -2, -4, 5, 0, -6]) == (-4, -6)\n    assert candidate([1, 3, 5, 6, 8, 9]) == (8, 9)\n", "entry_point": "max_product"}
{"task_id": 923, "prompt": "def super_seq(str1: str, str2: str, len1: int, len2: int) -> int:\n    \"\"\" Find the length of the shortest string that has both str1 and str2 as subsequences.\n    >>> super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n    9\n    >>> super_seq(\"feek\", \"eke\", 4, 3)\n    5\n    >>> super_seq(\"PARRT\", \"RTA\", 5, 3)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\n    assert candidate(\"feek\", \"eke\", 4, 3) == 5\n    assert candidate(\"PARRT\", \"RTA\", 5, 3) == 6\n", "entry_point": "super_seq"}
{"task_id": 924, "prompt": "def max_of_two(a: int, b: int) -> int:\n    \"\"\" Return the maximum of two numbers.\n    >>> max_of_two(10, 20)\n    20\n    >>> max_of_two(19, 15)\n    19\n    >>> max_of_two(-10, -20)\n    -10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 20\n    assert candidate(19, 15) == 19\n    assert candidate(-10, -20) == -10\n", "entry_point": "max_of_two"}
{"task_id": 925, "prompt": "from typing import Tuple\n\n\ndef multiple_tuple(numbers: Tuple[int, ...]) -> int:\n    \"\"\" Calculate the product of all the numbers in a given tuple.\n    >>> multiple_tuple((4, 3, 2, 2, -1, 18))\n    -864\n    >>> multiple_tuple((1, 2, 3))\n    6\n    >>> multiple_tuple((-2, -4, -6))\n    -48\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((4, 3, 2, 2, -1, 18)) == -864\n    assert candidate((1, 2, 3)) == 6\n    assert candidate((-2, -4, -6)) == -48\n", "entry_point": "multiple_tuple"}
{"task_id": 926, "prompt": "from typing import List\n\n\ndef rencontres_number(n: int, m: int) -> int:\n    \"\"\" Find the n-th rencontres number, which is defined as the number of derangements of n items with m items fixed.\n    >>> rencontres_number(7, 2)\n    924\n    >>> rencontres_number(3, 0)\n    2\n    >>> rencontres_number(3, 1)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7, 2) == 924\n    assert candidate(3, 0) == 2\n    assert candidate(3, 1) == 3\n", "entry_point": "rencontres_number"}
{"task_id": 927, "prompt": "from typing import Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_height(root: Optional[TreeNode]) -> int:\n    \"\"\" Calculate the height of the given binary tree.\n    >>> max_height(root)\n    3\n    >>> max_height(root1)\n    5\n    >>> max_height(root2)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(root) == 3\n    assert candidate(root1) == 5\n    assert candidate(root2) == 4\n", "entry_point": "max_height"}
{"task_id": 928, "prompt": "def change_date_format(date_str: str) -> str:\n    \"\"\" Convert a date from yyyy-mm-dd format to dd-mm-yyyy format.\n    >>> change_date_format('2026-01-02')\n    '02-01-2026'\n    >>> change_date_format('2021-01-04')\n    '04-01-2021'\n    >>> change_date_format('2030-06-06')\n    '06-06-2030'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('2026-01-02') == '02-01-2026'\n    assert candidate('2021-01-04') == '04-01-2021'\n    assert candidate('2030-06-06') == '06-06-2030'\n\n", "entry_point": "change_date_format"}
{"task_id": 929, "prompt": "from typing import Tuple\n\n\ndef count_tuplex(tuplex: Tuple[int, ...], item: int) -> int:\n    \"\"\" Count how many times an item appears in a tuple.\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)\n    3\n    >>> count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2)\n    2\n    >>> count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7), 7)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7), 4) == 3\n    assert candidate((2, 4, 5, 6, 2, 3, 4, 4, 7), 2) == 2\n    assert candidate((2, 4, 7, 7, 7, 3, 4, 4, 7), 7) == 4\n\n", "entry_point": "count_tuplex"}
{"task_id": 930, "prompt": "import re\n\n\ndef text_match(text: str) -> str:\n    \"\"\" Check if the string matches an 'a' followed by zero or more 'b's.\n    >>> text_match(\"msb\")\n    'Not matched!'\n    >>> text_match(\"a0c\")\n    'Found a match!'\n    >>> text_match(\"abbc\")\n    'Found a match!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"msb\") == 'Not matched!'\n    assert candidate(\"a0c\") == 'Found a match!'\n    assert candidate(\"abbc\") == 'Found a match!'\n", "entry_point": "text_match"}
{"task_id": 931, "prompt": "from typing import List\n\n\ndef sum_series(n: int) -> int:\n    \"\"\" Calculate the sum of the series 1^3 + 2^3 + 3^3 + ... + n^3.\n    >>> sum_series(7)\n    784\n    >>> sum_series(5)\n    225\n    >>> sum_series(15)\n    14400\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 784\n    assert candidate(5) == 225\n    assert candidate(15) == 14400\n\n", "entry_point": "sum_series"}
{"task_id": 932, "prompt": "from typing import List\n\n\ndef remove_duplic_list(strings: List[str]) -> List[str]:\n    \"\"\" Remove duplicate words from a given list of strings.\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])\n    ['Python', 'Exercises', 'Practice', 'Solution']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])\n    ['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    >>> remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])\n    ['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\n    assert candidate([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']\n", "entry_point": "remove_duplic_list"}
{"task_id": 933, "prompt": "import re\n\n\ndef camel_to_snake(name: str) -> str:\n    \"\"\" Convert camel case string to snake case string.\n    >>> camel_to_snake('GoogleAssistant')\n    'google_assistant'\n    >>> camel_to_snake('ChromeCast')\n    'chrome_cast'\n    >>> camel_to_snake('QuadCore')\n    'quad_core'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('GoogleAssistant') == 'google_assistant'\n    assert candidate('ChromeCast') == 'chrome_cast'\n    assert candidate('QuadCore') == 'quad_core'\n", "entry_point": "camel_to_snake"}
{"task_id": 934, "prompt": "def dealnnoy_num(m: int, n: int) -> int:\n    \"\"\" Calculate the nth Delannoy number.\n    >>> dealnnoy_num(3, 4)\n    129\n    >>> dealnnoy_num(3, 3)\n    63\n    >>> dealnnoy_num(4, 5)\n    681\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 129\n    assert candidate(3, 3) == 63\n    assert candidate(4, 5) == 681\n", "entry_point": "dealnnoy_num"}
{"task_id": 935, "prompt": "def series_sum(n: int) -> int:\n    \"\"\" Calculate the sum of the series 1²+2²+3²+….+n².\n    >>> series_sum(6)\n    91\n    >>> series_sum(7)\n    140\n    >>> series_sum(12)\n    650\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6) == 91\n    assert candidate(7) == 140\n    assert candidate(12) == 650\n\n", "entry_point": "series_sum"}
{"task_id": 936, "prompt": "from typing import List, Tuple\n\n\ndef re_arrange_tuples(tuples: List[Tuple[int, int]], order: List[int]) -> List[Tuple[int, int]]:\n    \"\"\" Re-arrange the given tuples based on the given ordered list.\n    >>> re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3])\n    [(1, 9), (4, 3), (2, 10), (3, 2)]\n    >>> re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3])\n    [(3, 11), (4, 3), (2, 10), (3, 11)]\n    >>> re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6])\n    [(2, 4), (5, 7), (3, 8), (6, 3)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\n    assert candidate([(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\n    assert candidate([(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]\n", "entry_point": "re_arrange_tuples"}
{"task_id": 937, "prompt": "def max_char(s: str) -> str:\n    \"\"\" Return the most common character in the given string.\n    >>> max_char(\"hello world\")\n    'l'\n    >>> max_char(\"hello \")\n    'l'\n    >>> max_char(\"python pr\")\n    'p'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"hello world\") == 'l'\n    assert candidate(\"hello \") == 'l'\n    assert candidate(\"python pr\") == 'p'\n", "entry_point": "max_char"}
{"task_id": 938, "prompt": "from typing import List\n\n\ndef find_closet(arr1: List[int], arr2: List[int], arr3: List[int], n1: int, n2: int, n3: int) -> tuple:\n    \"\"\" Find three closest elements from three sorted arrays.\n    >>> find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2)\n    (10, 15, 10)\n    >>> find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5)\n    (24, 22, 23)\n    >>> find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2)\n    (11, 16, 11)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\n    assert candidate([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\n    assert candidate([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)\n", "entry_point": "find_closet"}
{"task_id": 939, "prompt": "from typing import List, Dict\n\n\ndef sorted_models(models: List[Dict[str, any]]) -> List[Dict[str, any]]:\n    \"\"\" Sort a list of dictionaries using lambda function.\n    >>> sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])\n    [{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]\n    >>> sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\n    [{'make':'Apple','model':11,'color':'red'}, {'make': 'oppo','model':17,'color':'Gold'}, {'make':'Vivo', 'model':20,'color':'Blue'}]\n    >>> sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])\n    [{'make':'micromax','model':40,'color':'grey'}, {'make':'poco','model':60,'color':'blue'}]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Nokia', 'model': 216, 'color': 'Black'}]\n    assert candidate([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==[{'make':'Apple','model':11,'color':'red'}, {'make': 'oppo','model':17,'color':'Gold'}, {'make':'Vivo', 'model':20,'color':'Blue'}]\n    assert candidate([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==[{'make':'micromax','model':40,'color':'grey'}, {'make':'poco','model':60,'color':'blue'}]\n", "entry_point": "sorted_models"}
{"task_id": 940, "prompt": "from typing import List\n\n\ndef heap_sort(numbers: List[int]) -> List[int]:\n    \"\"\" Sort the given array by using heap sort.\n    >>> heap_sort([12, 2, 4, 5, 2, 3])\n    [2, 2, 3, 4, 5, 12]\n    >>> heap_sort([32, 14, 5, 6, 7, 19])\n    [5, 6, 7, 14, 19, 32]\n    >>> heap_sort([21, 15, 29, 78, 65])\n    [15, 21, 29, 65, 78]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\n    assert candidate([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\n    assert candidate([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]\n", "entry_point": "heap_sort"}
{"task_id": 941, "prompt": "from typing import List\n\n\ndef count_elim(elements: List) -> int:\n    \"\"\" Count the elements in the list until an element is a tuple.\n    >>> count_elim([10,20,30,(10,20),40])\n    3\n    >>> count_elim([10,(20,30),(10,20),40])\n    1\n    >>> count_elim([(10,(20,30,(10,20),40))])\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10,20,30,(10,20),40]) == 3\n    assert candidate([10,(20,30),(10,20),40]) == 1\n    assert candidate([(10,(20,30,(10,20),40))]) == 0\n\n", "entry_point": "count_elim"}
{"task_id": 942, "prompt": "from typing import List\n\n\ndef check_element(elements: List[int], check_list: List[int]) -> bool:\n    \"\"\" Check if any element from the first list is present in the second list.\n    >>> check_element([4, 5, 7, 9, 3], [6, 7, 10, 11])\n    True\n    >>> check_element([1, 2, 3, 4], [4, 6, 7, 8, 9])\n    True\n    >>> check_element([3, 2, 1, 4, 5], [9, 8, 7, 6])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([4, 5, 7, 9, 3], [6, 7, 10, 11]) == True\n    assert candidate([1, 2, 3, 4], [4, 6, 7, 8, 9]) == True\n    assert candidate([3, 2, 1, 4, 5], [9, 8, 7, 6]) == False\n\n", "entry_point": "check_element"}
{"task_id": 943, "prompt": "from typing import List\nimport heapq\n\ndef combine_lists(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Combine two given sorted lists using heapq module.\n    >>> combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    >>> combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])\n    [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n    >>> combine_lists([1, 3, 7], [2, 4, 6])\n    [1, 2, 3, 4, 6, 7]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11]) == [1, 2, 3, 5, 5, 6, 7, 8, 9, 11]\n    assert candidate([1, 3, 7], [2, 4, 6]) == [1, 2, 3, 4, 6, 7]\n", "entry_point": "combine_lists"}
{"task_id": 944, "prompt": "from typing import List\n\n\ndef num_position(sentence: str) -> int:\n    \"\"\" Separate and print the numbers and their position of a given string.\n    >>> num_position(\"there are 70 flats in this apartment\")\n    10\n    >>> num_position(\"every adult have 32 teeth\")\n    17\n    >>> num_position(\"isha has 79 chocolates in her bag\")\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"there are 70 flats in this apartment\") == 10\n    assert candidate(\"every adult have 32 teeth\") == 17\n    assert candidate(\"isha has 79 chocolates in her bag\") == 9\n\n", "entry_point": "num_position"}
{"task_id": 945, "prompt": "from typing import Set, Tuple\n\n\ndef tuple_to_set(input_tuple: Tuple[str, ...]) -> Set[str]:\n    \"\"\" Convert the given tuple into a set.\n    >>> tuple_to_set(('x', 'y', 'z'))\n    {'y', 'x', 'z'}\n    >>> tuple_to_set(('a', 'b', 'c'))\n    {'c', 'a', 'b'}\n    >>> tuple_to_set(('z', 'd', 'e'))\n    {'d', 'e', 'z'}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(('x', 'y', 'z')) == {'y', 'x', 'z'}\n    assert candidate(('a', 'b', 'c')) == {'c', 'a', 'b'}\n    assert candidate(('z', 'd', 'e')) == {'d', 'e', 'z'}\n\n", "entry_point": "tuple_to_set"}
{"task_id": 946, "prompt": "from typing import List, Tuple\n\n\ndef most_common_elem(text: str, n: int) -> List[Tuple[str, int]]:\n    \"\"\" Find the most common elements and their counts in the specified text.\n    >>> most_common_elem('lkseropewdssafsdfafkpwe', 3)\n    [('s', 4), ('e', 3), ('f', 3)]\n    >>> most_common_elem('lkseropewdssafsdfafkpwe', 2)\n    [('s', 4), ('e', 3)]\n    >>> most_common_elem('lkseropewdssafsdfafkpwe', 7)\n    [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('lkseropewdssafsdfafkpwe', 3) == [('s', 4), ('e', 3), ('f', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe', 2) == [('s', 4), ('e', 3)]\n    assert candidate('lkseropewdssafsdfafkpwe', 7) == [('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]\n", "entry_point": "most_common_elem"}
{"task_id": 947, "prompt": "from typing import List\n\n\ndef len_log(words: List[str]) -> int:\n    \"\"\" Find the length of the shortest word in the given list of words.\n    >>> len_log([\"win\",\"lose\",\"great\"])\n    3\n    >>> len_log([\"a\",\"ab\",\"abc\"])\n    1\n    >>> len_log([\"12\",\"12\",\"1234\"])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"win\",\"lose\",\"great\"]) == 3\n    assert candidate([\"a\",\"ab\",\"abc\"]) == 1\n    assert candidate([\"12\",\"12\",\"1234\"]) == 2\n", "entry_point": "len_log"}
{"task_id": 948, "prompt": "def get_item(tup: tuple, index: int) -> any:\n    \"\"\" Get an item from the tuple by index.\n    >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3)\n    'e'\n    >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -4)\n    'u'\n    >>> get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -3)\n    'r'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) == 'e'\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -4) == 'u'\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), -3) == 'r'\n", "entry_point": "get_item"}
{"task_id": 949, "prompt": "from typing import List, Tuple\n\n\ndef sort_list(tuples: List[Tuple[int, ...]]) -> List[Tuple[int, ...]]:\n    \"\"\" Sort the given list of tuples based on the total number of digits in each tuple.\n    >>> sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])\n    [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\n    >>> sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])\n    [(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\n    >>> sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])\n    [(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)]) == [(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]\n    assert candidate([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)]) == [(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]\n    assert candidate([(34, 4, 61, 723), (1, 2), (145,), (134, 23)]) == [(1, 2), (145,), (134, 23), (34, 4, 61, 723)]\n", "entry_point": "sort_list"}
{"task_id": 950, "prompt": "def chinese_zodiac(year: int) -> str:\n    \"\"\" Return the Chinese zodiac sign for the given year.\n    >>> chinese_zodiac(1997)\n    'Ox'\n    >>> chinese_zodiac(1998)\n    'Tiger'\n    >>> chinese_zodiac(1994)\n    'Dog'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1997) == 'Ox'\n    assert candidate(1998) == 'Tiger'\n    assert candidate(1994) == 'Dog'\n\n", "entry_point": "chinese_zodiac"}
{"task_id": 951, "prompt": "from typing import List, Tuple\n\n\ndef max_similar_indices(list1: List[Tuple[int, int]], list2: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\" Find the maximum of similar indices in two lists of tuples.\n    >>> max_similar_indices([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)])\n    [(5, 4), (8, 10), (8, 14)]\n    >>> max_similar_indices([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)])\n    [(6, 5), (9, 11), (9, 15)]\n    >>> max_similar_indices([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)])\n    [(7, 6), (10, 12), (10, 16)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\n    assert candidate([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\n    assert candidate([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]\n", "entry_point": "max_similar_indices"}
{"task_id": 952, "prompt": "def nCr_mod_p(n: int, r: int, p: int) -> int:\n    \"\"\" Compute the value of nCr mod p.\n    >>> nCr_mod_p(10, 2, 13)\n    6\n    >>> nCr_mod_p(11, 3, 14)\n    11\n    >>> nCr_mod_p(18, 14, 19)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 2, 13) == 6\n    assert candidate(11, 3, 14) == 11\n    assert candidate(18, 14, 19) == 1\n\n", "entry_point": "nCr_mod_p"}
{"task_id": 953, "prompt": "from typing import List\n\n\ndef subset(arr: List[int], n: int) -> int:\n    \"\"\" Find the minimum number of subsets with distinct elements.\n    >>> subset([1, 2, 3, 4], 4)\n    1\n    >>> subset([5, 6, 9, 3, 4, 3, 4], 7)\n    2\n    >>> subset([1, 2, 3], 3)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4], 4) == 1\n    assert candidate([5, 6, 9, 3, 4, 3, 4], 7) == 2\n    assert candidate([1, 2, 3], 3) == 1\n", "entry_point": "subset"}
{"task_id": 954, "prompt": "def profit_amount(selling_price: float, cost_price: float) -> float:\n    \"\"\" Calculate the profit amount if there is any profit, else return None.\n    >>> profit_amount(1500, 1200)\n    300\n    >>> profit_amount(100, 200)\n    None\n    >>> profit_amount(2000, 5000)\n    None\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1500, 1200) == 300\n    assert candidate(100, 200) == None\n    assert candidate(2000, 5000) == None\n", "entry_point": "profit_amount"}
{"task_id": 955, "prompt": "def is_abundant(number: int) -> bool:\n    \"\"\" Determine if the given number is abundant.\n    A number is considered abundant if the sum of its proper divisors (excluding itself)\n    is greater than the number itself.\n    >>> is_abundant(12)\n    True\n    >>> is_abundant(13)\n    False\n    >>> is_abundant(9)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(9) == False\n", "entry_point": "is_abundant"}
{"task_id": 956, "prompt": "import re\n\n\ndef split_list(s: str) -> list:\n    \"\"\" Split the given string at uppercase letters using regex.\n    >>> split_list(\"LearnToBuildAnythingWithGoogle\")\n    ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    >>> split_list(\"ApmlifyingTheBlack+DeveloperCommunity\")\n    ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    >>> split_list(\"UpdateInTheGoEcoSystem\")\n    ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\n    assert candidate(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\n    assert candidate(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']\n\n", "entry_point": "split_list"}
{"task_id": 957, "prompt": "def get_First_Set_Bit_Pos(n: int) -> int:\n    \"\"\" Get the position of the rightmost set bit in the binary representation of n.\n    >>> get_First_Set_Bit_Pos(12)\n    3\n    >>> get_First_Set_Bit_Pos(18)\n    2\n    >>> get_First_Set_Bit_Pos(16)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 3\n    assert candidate(18) == 2\n    assert candidate(16) == 5\n", "entry_point": "get_First_Set_Bit_Pos"}
{"task_id": 958, "prompt": "def int_to_roman(num: int) -> str:\n    \"\"\" Convert an integer to a Roman numeral.\n    >>> int_to_roman(1)\n    'I'\n    >>> int_to_roman(50)\n    'L'\n    >>> int_to_roman(4)\n    'IV'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == 'I'\n    assert candidate(50) == 'L'\n    assert candidate(4) == 'IV'\n", "entry_point": "int_to_roman"}
{"task_id": 959, "prompt": "from typing import List\n\n\ndef Average(numbers: List[int]) -> float:\n    \"\"\" Calculate the average of a list of numbers.\n    >>> Average([15, 9, 55, 41, 35, 20, 62, 49])\n    35.75\n    >>> Average([4, 5, 1, 2, 9, 7, 10, 8])\n    5.75\n    >>> Average([1,2,3])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\n    assert candidate([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\n    assert candidate([1,2,3]) == 2\n", "entry_point": "Average"}
{"task_id": 960, "prompt": "from typing import List\n\n\ndef get_noOfways(n: int) -> int:\n    \"\"\" Solve the tiling problem by finding the number of ways to tile a 2xn board with 2x1 tiles.\n    >>> get_noOfways(4)\n    3\n    >>> get_noOfways(3)\n    2\n    >>> get_noOfways(5)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 3\n    assert candidate(3) == 2\n    assert candidate(5) == 5\n", "entry_point": "get_noOfways"}
{"task_id": 961, "prompt": "def roman_to_int(s: str) -> int:\n    \"\"\" Convert a roman numeral to an integer.\n    >>> roman_to_int('MMMCMLXXXVI')\n    3986\n    >>> roman_to_int('MMMM')\n    4000\n    >>> roman_to_int('C')\n    100\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('MMMCMLXXXVI') == 3986\n    assert candidate('MMMM') == 4000\n    assert candidate('C') == 100\n\n", "entry_point": "roman_to_int"}
{"task_id": 962, "prompt": "from typing import List\n\n\ndef sum_Even(l: int, r: int) -> int:\n    \"\"\" Find the sum of all even natural numbers within the range l and r.\n    >>> sum_Even(2, 5)\n    6\n    >>> sum_Even(3, 8)\n    18\n    >>> sum_Even(4, 6)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 5) == 6\n    assert candidate(3, 8) == 18\n    assert candidate(4, 6) == 10\n", "entry_point": "sum_Even"}
{"task_id": 963, "prompt": "def discriminant_value(a: float, b: float, c: float) -> tuple:\n    \"\"\" Calculate the discriminant value and determine the number of solutions.\n    >>> discriminant_value(4, 8, 2)\n    ('Two solutions', 32)\n    >>> discriminant_value(5, 7, 9)\n    ('no real solution', -131)\n    >>> discriminant_value(0, 0, 9)\n    ('one solution', 0)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 8, 2) == ('Two solutions', 32)\n    assert candidate(5, 7, 9) == ('no real solution', -131)\n    assert candidate(0, 0, 9) == ('one solution', 0)\n", "entry_point": "discriminant_value"}
{"task_id": 964, "prompt": "def word_len(word: str) -> bool:\n    \"\"\" Check whether the length of the word is even or not.\n    >>> word_len(\"program\")\n    False\n    >>> word_len(\"solution\")\n    True\n    >>> word_len(\"data\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"program\") == False\n    assert candidate(\"solution\") == True\n    assert candidate(\"data\") == True\n", "entry_point": "word_len"}
{"task_id": 965, "prompt": "from typing import List\n\n\ndef camel_to_snake(text: str) -> str:\n    \"\"\" Convert a camel case string to a snake case string.\n    >>> camel_to_snake('PythonProgram')\n    'python_program'\n    >>> camel_to_snake('pythonLanguage')\n    'python_language'\n    >>> camel_to_snake('ProgrammingLanguage')\n    'programming_language'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('PythonProgram') == 'python_program'\n    assert candidate('pythonLanguage') == 'python_language'\n    assert candidate('ProgrammingLanguage') == 'programming_language'\n\n", "entry_point": "camel_to_snake"}
{"task_id": 966, "prompt": "from typing import List\n\n\ndef remove_empty(tuples: List[tuple]) -> List[tuple]:\n    \"\"\" Remove all empty tuples from a list of tuples.\n    >>> remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])\n    [('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n    >>> remove_empty([(), (), ('',), (\"python\"), (\"program\")])\n    [('',), (\"python\"), (\"program\")]\n    >>> remove_empty([(), (), ('',), (\"java\")])\n    [('',),(\"java\") ]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']\n    assert candidate([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]\n    assert candidate([(), (), ('',), (\"java\")])==[('',),(\"java\") ]\n", "entry_point": "remove_empty"}
{"task_id": 967, "prompt": "def accept_strings_with_all_vowels(s: str) -> str:\n    \"\"\" Accept strings that contain all vowels.\n    >>> accept_strings_with_all_vowels('SEEquoiaL')\n    'accepted'\n    >>> accept_strings_with_all_vowels('program')\n    'not accepted'\n    >>> accept_strings_with_all_vowels('fine')\n    'not accepted'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"SEEquoiaL\") == 'accepted'\n    assert candidate('program') == \"not accepted\"\n    assert candidate('fine') == \"not accepted\"\n\n", "entry_point": "accept_strings_with_all_vowels"}
{"task_id": 968, "prompt": "from typing import List\n\n\ndef floor_Max(a: int, b: int, c: int) -> int:\n    \"\"\" Find maximum possible value for the given periodic function.\n    >>> floor_Max(11, 10, 9)\n    9\n    >>> floor_Max(5, 7, 4)\n    2\n    >>> floor_Max(2, 2, 1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(11, 10, 9) == 9\n    assert candidate(5, 7, 4) == 2\n    assert candidate(2, 2, 1) == 1\n", "entry_point": "floor_Max"}
{"task_id": 969, "prompt": "from typing import List, Tuple\n\n\ndef join_tuples(tuples: List[Tuple[int, int]]) -> List[Tuple[int, ...]]:\n    \"\"\" Write a function to join the tuples if they have similar initial elements.\n    >>> join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)])\n    [(5, 6, 7), (6, 8, 10), (7, 13)]\n    >>> join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)])\n    [(6, 7, 8), (7, 9, 11), (8, 14)]\n    >>> join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)])\n    [(7, 8, 9), (8, 10, 12), (9, 15)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]) == [(5, 6, 7), (6, 8, 10), (7, 13)]\n    assert candidate([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)]) == [(6, 7, 8), (7, 9, 11), (8, 14)]\n    assert candidate([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)]) == [(7, 8, 9), (8, 10, 12), (9, 15)]\n", "entry_point": "join_tuples"}
{"task_id": 970, "prompt": "def min_of_two(a: int, b: int) -> int:\n    \"\"\" Return the minimum of two numbers.\n    >>> min_of_two(10, 20)\n    10\n    >>> min_of_two(19, 15)\n    15\n    >>> min_of_two(-10, -20)\n    -20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 10\n    assert candidate(19, 15) == 15\n    assert candidate(-10, -20) == -20\n", "entry_point": "min_of_two"}
{"task_id": 971, "prompt": "def maximum_segments(n: int, a: int, b: int, c: int) -> int:\n    \"\"\" Find the maximum number of segments of lengths a, b, and c that can be formed from n.\n    >>> maximum_segments(7, 5, 2, 5)\n    2\n    >>> maximum_segments(17, 2, 1, 3)\n    17\n    >>> maximum_segments(18, 16, 3, 6)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7, 5, 2, 5) == 2\n    assert candidate(17, 2, 1, 3) == 17\n    assert candidate(18, 16, 3, 6) == 6\n", "entry_point": "maximum_segments"}
{"task_id": 972, "prompt": "def concatenate_nested(tuple1: tuple, tuple2: tuple) -> tuple:\n    \"\"\" Concatenate the given two tuples to a nested tuple.\n    >>> concatenate_nested((3, 4), (5, 6))\n    (3, 4, 5, 6)\n    >>> concatenate_nested((1, 2), (3, 4))\n    (1, 2, 3, 4)\n    >>> concatenate_nested((4, 5), (6, 8))\n    (4, 5, 6, 8)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((3, 4), (5, 6)) == (3, 4, 5, 6)\n    assert candidate((1, 2), (3, 4)) == (1, 2, 3, 4)\n    assert candidate((4, 5), (6, 8)) == (4, 5, 6, 8)\n\n", "entry_point": "concatenate_nested"}
{"task_id": 973, "prompt": "from typing import List\n\n\ndef left_rotate(s: str, n: int) -> str:\n    \"\"\" Rotate the string 's' to the left by 'n' characters.\n    >>> left_rotate(\"python\", 2)\n    'thonpy'\n    >>> left_rotate(\"bigdata\", 3)\n    'databig'\n    >>> left_rotate(\"hadoop\", 1)\n    'adooph'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\", 2) == \"thonpy\"\n    assert candidate(\"bigdata\", 3) == \"databig\"\n    assert candidate(\"hadoop\", 1) == \"adooph\"\n", "entry_point": "left_rotate"}
{"task_id": 974, "prompt": "from typing import List\n\n\ndef min_sum_path(triangle: List[List[int]]) -> int:\n    \"\"\" Find the minimum total path sum from top to bottom in the given triangle.\n    >>> min_sum_path([[2], [3, 9], [1, 6, 7]])\n    6\n    >>> min_sum_path([[2], [3, 7], [8, 5, 6]])\n    10\n    >>> min_sum_path([[3], [6, 4], [5, 2, 7]])\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[2], [3, 9], [1, 6, 7]]) == 6\n    assert candidate([[2], [3, 7], [8, 5, 6]]) == 10\n    assert candidate([[3], [6, 4], [5, 2, 7]]) == 9\n\n", "entry_point": "min_sum_path"}
