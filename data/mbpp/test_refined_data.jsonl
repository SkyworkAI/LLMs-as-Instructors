{"task_id": 11, "prompt": "from typing import List\n\n\ndef remove_Occ(s: str, char: str) -> str:\n    \"\"\" Remove first and last occurrence of a given character from the string.\n    >>> remove_Occ(\"hello\", \"l\")\n    'heo'\n    >>> remove_Occ(\"abcda\", \"a\")\n    'bcd'\n    >>> remove_Occ(\"PHP\", \"P\")\n    'H'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"hello\", \"l\") == \"heo\"\n    assert candidate(\"abcda\", \"a\") == \"bcd\"\n    assert candidate(\"PHP\", \"P\") == \"H\"\n", "entry_point": "remove_Occ"}
{"task_id": 12, "prompt": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    \"\"\" Sort a given matrix in ascending order according to the sum of its rows.\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    >>> sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])\n    [[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    >>> sort_matrix([[5,8,9],[6,4,3],[2,1,4]])\n    [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n", "entry_point": "sort_matrix"}
{"task_id": 13, "prompt": "from typing import List\n\n\ndef count_common(words: List[str]) -> List[tuple]:\n    \"\"\" Count the most common words in a list of words.\n    >>> count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red'])\n    [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    >>> count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])\n    [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    >>> count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])\n    [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    assert candidate(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    assert candidate(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n", "entry_point": "count_common"}
{"task_id": 14, "prompt": "def find_Volume(base: float, height: float, length: float) -> float:\n    \"\"\" Calculate the volume of a triangular prism.\n    >>> find_Volume(10, 8, 6)\n    240\n    >>> find_Volume(3, 2, 2)\n    6\n    >>> find_Volume(1, 2, 1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 8, 6) == 240\n    assert candidate(3, 2, 2) == 6\n    assert candidate(1, 2, 1) == 1\n", "entry_point": "find_Volume"}
{"task_id": 15, "prompt": "def split_lowerstring(s: str) -> list:\n    \"\"\" Split a string at lowercase letters.\n    >>> split_lowerstring(\"AbCd\")\n    ['bC','d']\n    >>> split_lowerstring(\"Python\")\n    ['y', 't', 'h', 'o', 'n']\n    >>> split_lowerstring(\"Programming\")\n    ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AbCd\")==['bC','d']\n    assert candidate(\"Python\")==['y', 't', 'h', 'o', 'n']\n    assert candidate(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n", "entry_point": "split_lowerstring"}
{"task_id": 16, "prompt": "import re\n\n\ndef text_lowercase_underscore(text: str) -> str:\n    \"\"\" Find sequences of lowercase letters joined with an underscore.\n    >>> text_lowercase_underscore('aab_cbbbc')\n    'Found a match!'\n    >>> text_lowercase_underscore('aab_Abbbc')\n    'Not matched!'\n    >>> text_lowercase_underscore('Aaab_abbbc')\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\n    assert candidate(\"aab_Abbbc\") == 'Not matched!'\n    assert candidate(\"Aaab_abbbc\") == 'Not matched!'\n\n", "entry_point": "text_lowercase_underscore"}
{"task_id": 17, "prompt": "def square_perimeter(side_length: int) -> int:\n    \"\"\" Calculate the perimeter of a square given the length of one side.\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(5)\n    20\n    >>> square_perimeter(4)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 40\n    assert candidate(5) == 20\n    assert candidate(4) == 16\n", "entry_point": "square_perimeter"}
{"task_id": 18, "prompt": "def remove_dirty_chars(s1: str, s2: str) -> str:\n    \"\"\" Remove characters from the first string which are present in the second string.\n    >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n    'bacuve'\n    >>> remove_dirty_chars(\"digitalindia\", \"talent\")\n    'digiidi'\n    >>> remove_dirty_chars(\"exoticmiles\", \"toxic\")\n    'emles'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"probasscurve\", \"pros\") == 'bacuve'\n    assert candidate(\"digitalindia\", \"talent\") == 'digiidi'\n    assert candidate(\"exoticmiles\", \"toxic\") == 'emles'\n", "entry_point": "remove_dirty_chars"}
{"task_id": 19, "prompt": "from typing import List\n\n\ndef test_duplicate(numbers: List[int]) -> bool:\n    \"\"\" Check if the given array of integers contains any duplicate element.\n    >>> test_duplicate([1, 2, 3, 4, 5])\n    False\n    >>> test_duplicate([1, 2, 3, 4, 4])\n    True\n    >>> test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 4]) == True\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5]) == True\n", "entry_point": "test_duplicate"}
{"task_id": 20, "prompt": "def is_woodall(n: int) -> bool:\n    \"\"\" Check if the given number is a Woodall number or not.\n    A Woodall number is of the form n*2^n - 1.\n    >>> is_woodall(383)\n    True\n    >>> is_woodall(254)\n    False\n    >>> is_woodall(200)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(383) == True\n    assert candidate(254) == False\n    assert candidate(200) == False\n", "entry_point": "is_woodall"}
{"task_id": 21, "prompt": "def multiples_of_num(m: int, n: int) -> list:\n    \"\"\" Return a list of m multiples of n.\n    >>> multiples_of_num(4, 3)\n    [3, 6, 9, 12]\n    >>> multiples_of_num(2, 5)\n    [5, 10]\n    >>> multiples_of_num(9, 2)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 3) == [3, 6, 9, 12]\n    assert candidate(2, 5) == [5, 10]\n    assert candidate(9, 2) == [2, 4, 6, 8, 10, 12, 14, 16, 18]\n", "entry_point": "multiples_of_num"}
{"task_id": 22, "prompt": "from typing import List\n\n\ndef find_first_duplicate(arr: List[int]) -> int:\n    \"\"\" Find the first duplicate element in a given array of integers.\n    >>> find_first_duplicate([1, 2, 3, 4, 4, 5])\n    4\n    >>> find_first_duplicate([1, 2, 3, 4])\n    -1\n    >>> find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 4, 5]) == 4\n    assert candidate([1, 2, 3, 4]) == -1\n    assert candidate([1, 1, 2, 3, 3, 2, 2]) == 1\n\n", "entry_point": "find_first_duplicate"}
{"task_id": 23, "prompt": "from typing import List\n\n\ndef maximum_Sum(lists: List[List[int]]) -> int:\n    \"\"\" Find the maximum sum of elements of list in a list of lists.\n    >>> maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]])\n    33\n    >>> maximum_Sum([[0,1,1],[1,1,2],[3,2,1]])\n    6\n    >>> maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]])\n    19\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n    assert candidate([[0,1,1],[1,1,2],[3,2,1]]) == 6\n    assert candidate([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19\n", "entry_point": "maximum_Sum"}
{"task_id": 24, "prompt": "def binary_to_decimal(binary_number: int) -> int:\n    \"\"\" Convert the given binary number to its decimal equivalent.\n    >>> binary_to_decimal(100)\n    4\n    >>> binary_to_decimal(1011)\n    11\n    >>> binary_to_decimal(1101101)\n    109\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(100) == 4\n    assert candidate(1011) == 11\n    assert candidate(1101101) == 109\n", "entry_point": "binary_to_decimal"}
{"task_id": 25, "prompt": "from typing import List\n\n\ndef find_Product(arr: List[int], n: int) -> int:\n    \"\"\" Find the product of non-repeated elements in a given array.\n    >>> find_Product([1,1,2,3], 4)\n    6\n    >>> find_Product([1,2,3,1,1], 5)\n    6\n    >>> find_Product([1,1,4,5,6], 5)\n    120\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3], 4) == 6\n    assert candidate([1,2,3,1,1], 5) == 6\n    assert candidate([1,1,4,5,6], 5) == 120\n\n", "entry_point": "find_Product"}
{"task_id": 26, "prompt": "from typing import List, Tuple\n\n\ndef check_k_elements(tuples: List[Tuple[int, ...]], k: int) -> bool:\n    \"\"\" Check if the given tuple list has all tuples with exactly k elements.\n    >>> check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4)\n    True\n    >>> check_k_elements([(7, 7, 7), (7, 7)], 7)\n    True\n    >>> check_k_elements([(9, 9), (9, 9, 9, 9)], 7)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n    assert candidate([(7, 7, 7), (7, 7)], 7) == True\n    assert candidate([(9, 9), (9, 9, 9, 9)], 7) == False\n", "entry_point": "check_k_elements"}
{"task_id": 27, "prompt": "from typing import List\n\n\ndef remove(strings: List[str]) -> List[str]:\n    \"\"\" Remove all digits from a list of strings.\n    >>> remove(['4words', '3letters', '4digits'])\n    ['words', 'letters', 'digits']\n    >>> remove(['28Jan','12Jan','11Jan'])\n    ['Jan','Jan','Jan']\n    >>> remove(['wonder1','wonder2','wonder3'])\n    ['wonder','wonder','wonder']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n    assert candidate(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n    assert candidate(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']\n", "entry_point": "remove"}
{"task_id": 28, "prompt": "from typing import List\n\n\ndef binomial_Coeff(n: int, k: int) -> int:\n    \"\"\" Calculate the binomial coefficient for given values of n and k.\n    >>> binomial_Coeff(5,2)\n    10\n    >>> binomial_Coeff(4,3)\n    4\n    >>> binomial_Coeff(3,2)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5,2) == 10\n    assert candidate(4,3) == 4\n    assert candidate(3,2) == 3\n\n", "entry_point": "binomial_Coeff"}
{"task_id": 29, "prompt": "from typing import List\n\n\ndef get_Odd_Occurrence(arr: List[int], n: int) -> int:\n    \"\"\" Find the element that occurs an odd number of times in an array.\n    >>> get_Odd_Occurrence([1,2,3,1,2,3,1], 7)\n    1\n    >>> get_Odd_Occurrence([1,2,3,2,3,1,3], 7)\n    3\n    >>> get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2], 13)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,1,2,3,1], 7) == 1\n    assert candidate([1,2,3,2,3,1,3], 7) == 3\n    assert candidate([2,3,5,4,5,2,4,3,5,2,4,4,2], 13) == 5\n\n", "entry_point": "get_Odd_Occurrence"}
{"task_id": 30, "prompt": "from typing import List\n\n\ndef count_Substring_With_Equal_Ends(s: str) -> int:\n    \"\"\" Count all the substrings starting and ending with the same character.\n    >>> count_Substring_With_Equal_Ends(\"abc\")\n    3\n    >>> count_Substring_With_Equal_Ends(\"abcda\")\n    6\n    >>> count_Substring_With_Equal_Ends(\"ab\")\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abc\") == 3\n    assert candidate(\"abcda\") == 6\n    assert candidate(\"ab\") == 2\n", "entry_point": "count_Substring_With_Equal_Ends"}
{"task_id": 31, "prompt": "from typing import List\n\n\ndef find_top_k_frequent(numbers_lists: List[List[int]], k: int) -> List[int]:\n    \"\"\" Find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    >>> find_top_k_frequent([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n    [5, 7, 1]\n    >>> find_top_k_frequent([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n    [1]\n    >>> find_top_k_frequent([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n    [6, 5, 7, 8, 1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3) == [5, 7, 1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1) == [1]\n    assert candidate([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5) == [6, 5, 7, 8, 1]\n\n", "entry_point": "find_top_k_frequent"}
{"task_id": 32, "prompt": "def max_Prime_Factors(n: int) -> int:\n    \"\"\" Find the largest prime factor of the given number.\n    >>> max_Prime_Factors(15)\n    5\n    >>> max_Prime_Factors(6)\n    3\n    >>> max_Prime_Factors(2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(15) == 5\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n", "entry_point": "max_Prime_Factors"}
{"task_id": 33, "prompt": "def decimal_To_Binary(n: int) -> int:\n    \"\"\" Convert a decimal number to binary number.\n    >>> decimal_To_Binary(10)\n    1010\n    >>> decimal_To_Binary(1)\n    1\n    >>> decimal_To_Binary(20)\n    10100\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 1010\n    assert candidate(1) == 1\n    assert candidate(20) == 10100\n", "entry_point": "decimal_To_Binary"}
{"task_id": 34, "prompt": "from typing import List\n\n\ndef find_missing(numbers: List[int], length: int) -> int:\n    \"\"\" Find the missing number in a sorted array of integers.\n    >>> find_missing([1,2,3,5], 4)\n    4\n    >>> find_missing([1,3,4,5], 4)\n    2\n    >>> find_missing([1,2,3,5,6,7], 6)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,5], 4) == 4\n    assert candidate([1,3,4,5], 4) == 2\n    assert candidate([1,2,3,5,6,7], 6) == 4\n", "entry_point": "find_missing"}
{"task_id": 35, "prompt": "def find_rect_num(n: int) -> int:\n    \"\"\" Find the n-th rectangular number.\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(5)\n    30\n    >>> find_rect_num(6)\n    42\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 20\n    assert candidate(5) == 30\n    assert candidate(6) == 42\n", "entry_point": "find_rect_num"}
{"task_id": 36, "prompt": "def find_Nth_Digit(numerator: int, denominator: int, n: int) -> int:\n    \"\"\" Find the nth digit in the proper fraction of two given numbers.\n    >>> find_Nth_Digit(1, 2, 1)\n    5\n    >>> find_Nth_Digit(3, 5, 1)\n    6\n    >>> find_Nth_Digit(5, 6, 5)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 2, 1) == 5\n    assert candidate(3, 5, 1) == 6\n    assert candidate(5, 6, 5) == 3\n\n", "entry_point": "find_Nth_Digit"}
{"task_id": 37, "prompt": "from typing import List, Union\n\n\ndef sort_mixed_list(mixed_list: List[Union[int, str]]) -> List[Union[int, str]]:\n    \"\"\" Sort a given mixed list of integers and strings.\n    >>> sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    assert candidate([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n", "entry_point": "sort_mixed_list"}
{"task_id": 38, "prompt": "from typing import List\n\n\ndef div_even_odd(numbers: List[int]) -> int:\n    \"\"\" Find the division of the first even and the first odd number in the given list.\n    >>> div_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> div_even_odd([1,2,3,4,5,6,7,8,9,10])\n    2\n    >>> div_even_odd([1,5,7,9,10])\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,5,7,4,1,6,8]) == 4\n    assert candidate([1,2,3,4,5,6,7,8,9,10]) == 2\n    assert candidate([1,5,7,9,10]) == 10\n", "entry_point": "div_even_odd"}
{"task_id": 39, "prompt": "def rearrange_string(s: str) -> str:\n    \"\"\" Check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    >>> rearrange_string(\"aab\")\n    'aba'\n    >>> rearrange_string(\"aabb\")\n    'abab'\n    >>> rearrange_string(\"abccdd\")\n    'cdabcd'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aab\") == 'aba'\n    assert candidate(\"aabb\") == 'abab'\n    assert candidate(\"abccdd\") == 'cdabcd'\n", "entry_point": "rearrange_string"}
{"task_id": 40, "prompt": "from typing import List\nfrom collections import Counter\n\ndef freq_element(lists: List[List[int]]) -> dict:\n    \"\"\"\n    Find frequency of the elements in a given list of lists using collections module.\n    >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n    {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n    >>> freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    >>> freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])\n    {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]]) == {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    assert candidate([[15,20,30,40],[80,90,100,110],[30,30,80,90]]) == {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}\n", "entry_point": "freq_element"}
{"task_id": 41, "prompt": "from typing import List\n\n\ndef filter_evennumbers(numbers: List[int]) -> List[int]:\n    \"\"\"\n    Filter even numbers from a list using a lambda function.\n    >>> filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    >>> filter_evennumbers([10, 20, 45, 67, 84, 93])\n    [10, 20, 84]\n    >>> filter_evennumbers([5, 7, 9, 8, 6, 4, 3])\n    [8, 6, 4]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n    assert candidate([10, 20, 45, 67, 84, 93])==[10, 20, 84]\n    assert candidate([5, 7, 9, 8, 6, 4, 3])==[8, 6, 4]\n", "entry_point": "filter_evennumbers"}
{"task_id": 42, "prompt": "from typing import List\n\n\ndef find_Sum(arr: List[int], n: int) -> int:\n    \"\"\" Find the sum of repeated elements in a given array.\n    >>> find_Sum([1,2,3,1,1,4,5,6], 8)\n    3\n    >>> find_Sum([1,2,3,1,1], 5)\n    3\n    >>> find_Sum([1,1,2], 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,1,1,4,5,6], 8) == 3\n    assert candidate([1,2,3,1,1], 5) == 3\n    assert candidate([1,1,2], 3) == 2\n", "entry_point": "find_Sum"}
{"task_id": 43, "prompt": "import re\n\n\ndef text_match(text: str) -> str:\n    \"\"\" Find sequences of lowercase letters joined with an underscore using regex.\n    >>> text_match(\"aab_cbbbc\")\n    'Found a match!'\n    >>> text_match(\"aab_Abbbc\")\n    'Not matched!'\n    >>> text_match(\"Aaab_abbbc\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aab_cbbbc\") == 'Found a match!'\n    assert candidate(\"aab_Abbbc\") == 'Not matched!'\n    assert candidate(\"Aaab_abbbc\") == 'Not matched!'\n", "entry_point": "text_match"}
{"task_id": 44, "prompt": "def text_match_string(s: str) -> str:\n    \"\"\" Check if the given string starts with a word.\n    >>> text_match_string(' python')\n    'Not matched!'\n    >>> text_match_string('python')\n    'Found a match!'\n    >>> text_match_string('  lang')\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(' python') == 'Not matched!'\n    assert candidate('python') == 'Found a match!'\n    assert candidate('  lang') == 'Not matched!'\n", "entry_point": "text_match_string"}
{"task_id": 45, "prompt": "from typing import List\n\n\ndef get_gcd(numbers: List[int]) -> int:\n    \"\"\" Find the greatest common divisor (gcd) of the given array elements.\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    >>> get_gcd([1, 2, 3])\n    1\n    >>> get_gcd([2, 4, 6, 8])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 4, 6, 8, 16]) == 2\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([2, 4, 6, 8]) == 2\n", "entry_point": "get_gcd"}
{"task_id": 46, "prompt": "from typing import List\n\n\ndef test_distinct(numbers: List[int]) -> bool:\n    \"\"\" Determine whether all numbers in the given list are different from each other.\n    >>> test_distinct([1, 5, 7, 9])\n    True\n    >>> test_distinct([2, 4, 5, 5, 7, 9])\n    False\n    >>> test_distinct([1, 2, 3])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 5, 7, 9]) == True\n    assert candidate([2, 4, 5, 5, 7, 9]) == False\n    assert candidate([1, 2, 3]) == True\n", "entry_point": "test_distinct"}
{"task_id": 47, "prompt": "def compute_Last_Digit(a: int, b: int) -> int:\n    \"\"\" Find the last digit when factorial of a divides factorial of b.\n    >>> compute_Last_Digit(2,4)\n    2\n    >>> compute_Last_Digit(6,8)\n    6\n    >>> compute_Last_Digit(1,2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2,4) == 2\n    assert candidate(6,8) == 6\n    assert candidate(1,2) == 2\n", "entry_point": "compute_Last_Digit"}
{"task_id": 48, "prompt": "def odd_bit_set_number(number: int) -> int:\n    \"\"\" Set all odd bits of a given number to 1.\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(20)\n    21\n    >>> odd_bit_set_number(30)\n    31\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 21\n    assert candidate(30) == 31\n", "entry_point": "odd_bit_set_number"}
{"task_id": 49, "prompt": "from typing import List\n\n\ndef specified_element(matrix: List[List[int]], index: int = 0) -> List[int]:\n    \"\"\" Extract every first or specified element from a given two-dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n    [2, 5, 1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2) == [3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1) == [2, 5, 1]\n", "entry_point": "specified_element"}
{"task_id": 50, "prompt": "from typing import List\n\n\ndef min_length_list(lists: List[List[int]]) -> tuple:\n    \"\"\" Find the list with minimum length using lambda function and return its length and the list itself.\n    >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (1, [0])\n    >>> min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (1, [1])\n    >>> min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])\n    (2, [1, 2])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (1, [0])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) == (1, [1])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12],[1,2]]) == (2, [1, 2])\n", "entry_point": "min_length_list"}
{"task_id": 51, "prompt": "def check_equilateral(side1: int, side2: int, side3: int) -> bool:\n    \"\"\" Check if the triangle with given sides is equilateral or not.\n    >>> check_equilateral(6, 8, 12)\n    False\n    >>> check_equilateral(6, 6, 12)\n    False\n    >>> check_equilateral(6, 6, 6)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 8, 12) == False\n    assert candidate(6, 6, 12) == False\n    assert candidate(6, 6, 6) == True\n\n", "entry_point": "check_equilateral"}
{"task_id": 52, "prompt": "def parallelogram_area(base: float, height: float) -> float:\n    \"\"\" Calculate the area of a parallelogram given its base and height.\n    >>> parallelogram_area(10, 20)\n    200\n    >>> parallelogram_area(15, 20)\n    300\n    >>> parallelogram_area(8, 9)\n    72\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(15, 20) == 300\n    assert candidate(8, 9) == 72\n\n", "entry_point": "parallelogram_area"}
{"task_id": 53, "prompt": "def check_Equality(s: str) -> str:\n    \"\"\" Check whether the first and last characters of a given string are equal or not.\n    >>> check_Equality(\"abcda\")\n    'Equal'\n    >>> check_Equality(\"ab\")\n    'Not Equal'\n    >>> check_Equality(\"mad\")\n    'Not Equal'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcda\") == \"Equal\"\n    assert candidate(\"ab\") == \"Not Equal\"\n    assert candidate(\"mad\") == \"Not Equal\"\n", "entry_point": "check_Equality"}
{"task_id": 54, "prompt": "from typing import List\n\n\ndef counting_sort(arr: List[int]) -> List[int]:\n    \"\"\" Write a function to sort the given array by using counting sort.\n    >>> counting_sort([1,23,4,5,6,7,8])\n    [1, 4, 5, 6, 7, 8, 23]\n    >>> counting_sort([12, 9, 28, 33, 69, 45])\n    [9, 12, 28, 33, 45, 69]\n    >>> counting_sort([8, 4, 14, 3, 2, 1])\n    [1, 2, 3, 4, 8, 14]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n    assert candidate([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n    assert candidate([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]\n\n", "entry_point": "counting_sort"}
{"task_id": 55, "prompt": "from typing import List\n\n\ndef tn_gp(a: int, n: int, r: int) -> int:\n    \"\"\" Find the n-th term of a geometric series with first term a and common ratio r.\n    >>> tn_gp(1, 5, 2)\n    16\n    >>> tn_gp(1, 5, 4)\n    256\n    >>> tn_gp(2, 6, 3)\n    486\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 5, 2) == 16\n    assert candidate(1, 5, 4) == 256\n    assert candidate(2, 6, 3) == 486\n\n", "entry_point": "tn_gp"}
{"task_id": 56, "prompt": "def is_one_less_than_twice_reverse(number: int) -> bool:\n    \"\"\" Check if a given number is one less than twice its reverse.\n    >>> is_one_less_than_twice_reverse(70)\n    False\n    >>> is_one_less_than_twice_reverse(23)\n    False\n    >>> is_one_less_than_twice_reverse(73)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(70) == False\n    assert candidate(23) == False\n    assert candidate(73) == True\n", "entry_point": "is_one_less_than_twice_reverse"}
{"task_id": 57, "prompt": "def find_Max_Num(digits: List[int], length: int) -> int:\n    \"\"\" Given a list of digits and the length of the list, return the largest number that can be formed with these digits.\n    >>> find_Max_Num([1,2,3],3)\n    321\n    >>> find_Max_Num([4,5,6,1],4)\n    6541\n    >>> find_Max_Num([1,2,3,9],4)\n    9321\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3],3) == 321\n    assert candidate([4,5,6,1],4) == 6541\n    assert candidate([1,2,3,9],4) == 9321\n\n", "entry_point": "find_Max_Num"}
{"task_id": 58, "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\" Check whether the given two integers have opposite signs.\n    >>> opposite_Signs(1, -2)\n    True\n    >>> opposite_Signs(3, 2)\n    False\n    >>> opposite_Signs(-10, -10)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, -2) == True\n    assert candidate(3, 2) == False\n    assert candidate(-10, -10) == False\n", "entry_point": "opposite_Signs"}
{"task_id": 59, "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\" Return the nth octagonal number.\n    An octagonal number is a figurate number that represents an octagon. The nth octagonal number is given by the formula: n*(3n-2).\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(10)\n    280\n    >>> is_octagonal(15)\n    645\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 65\n    assert candidate(10) == 280\n    assert candidate(15) == 645\n\n", "entry_point": "is_octagonal"}
{"task_id": 60, "prompt": "from typing import List\n\n\ndef max_len_sub(arr: List[int], diff: int) -> int:\n    \"\"\" Find the maximum length of the subsequence with difference between adjacent elements\n    for the given array.\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n    5\n    >>> max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)\n    4\n    >>> max_len_sub([9, 11, 13, 15, 18], 5)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n    assert candidate([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n    assert candidate([9, 11, 13, 15, 18], 5) == 1\n\n", "entry_point": "max_len_sub"}
{"task_id": 61, "prompt": "from typing import List\n\n\ndef count_Substrings(s: str, n: int) -> int:\n    \"\"\" Count the number of substrings where the sum of digits equals their length.\n    >>> count_Substrings('112112', 6)\n    6\n    >>> count_Substrings('111', 3)\n    6\n    >>> count_Substrings('1101112', 7)\n    12\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('112112', 6) == 6\n    assert candidate('111', 3) == 6\n    assert candidate('1101112', 7) == 12\n\n", "entry_point": "count_Substrings"}
{"task_id": 62, "prompt": "from typing import List\n\n\ndef smallest_num(numbers: List[int]) -> int:\n    \"\"\" Find the smallest number in a given list of integers.\n    >>> smallest_num([10, 20, 1, 45, 99])\n    1\n    >>> smallest_num([1, 2, 3])\n    1\n    >>> smallest_num([45, 46, 50, 60])\n    45\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 1, 45, 99]) == 1\n    assert candidate([1, 2, 3]) == 1\n    assert candidate([45, 46, 50, 60]) == 45\n", "entry_point": "smallest_num"}
{"task_id": 63, "prompt": "from typing import List, Tuple\n\n\ndef max_difference(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Find the maximum difference between available pairs in the given tuple list.\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n    15\n    >>> max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n    23\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23\n", "entry_point": "max_difference"}
{"task_id": 64, "prompt": "def subject_marks(subjects: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\" Sort a list of tuples by the second item in each tuple using a lambda function.\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    >>> subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])\n    [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    >>> subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])\n    [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)]) == [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)]) == [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n", "entry_point": "subject_marks"}
{"task_id": 65, "prompt": "from typing import List\n\n\ndef recursive_list_sum(numbers: List) -> int:\n    \"\"\" Calculate the sum of numbers in a nested list using recursion.\n    >>> recursive_list_sum([1, 2, [3, 4], [5, 6]])\n    21\n    >>> recursive_list_sum([7, 10, [15, 14], [19, 41]])\n    106\n    >>> recursive_list_sum([10, 20, [30, 40], [50, 60]])\n    210\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, [3, 4], [5, 6]]) == 21\n    assert candidate([7, 10, [15, 14], [19, 41]]) == 106\n    assert candidate([10, 20, [30, 40], [50, 60]]) == 210\n\n", "entry_point": "recursive_list_sum"}
{"task_id": 66, "prompt": "from typing import List\n\n\ndef pos_count(numbers: List[int]) -> int:\n    \"\"\" Count the number of positive numbers in the given list.\n    >>> pos_count([1, -2, 3, -4])\n    2\n    >>> pos_count([3, 4, 5, -1])\n    3\n    >>> pos_count([1, 2, 3, 4])\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, -2, 3, -4]) == 2\n    assert candidate([3, 4, 5, -1]) == 3\n    assert candidate([1, 2, 3, 4]) == 4\n", "entry_point": "pos_count"}
{"task_id": 67, "prompt": "def bell_number(n: int) -> int:\n    \"\"\" Return the nth Bell number.\n    >>> bell_number(2)\n    2\n    >>> bell_number(10)\n    115975\n    >>> bell_number(56)\n    6775685320645824322581483068371419745979053216268760300\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(10) == 115975\n    assert candidate(56) == 6775685320645824322581483068371419745979053216268760300\n", "entry_point": "bell_number"}
{"task_id": 68, "prompt": "from typing import List\n\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\" Check whether the given array is monotonic or not.\n    A monotonic array is one that is either entirely non-increasing or non-decreasing.\n    >>> is_Monotonic([6, 5, 4, 4])\n    True\n    >>> is_Monotonic([1, 2, 2, 3])\n    True\n    >>> is_Monotonic([1, 3, 2])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n", "entry_point": "is_Monotonic"}
{"task_id": 69, "prompt": "from typing import List\n\n\ndef is_sublist(main_list: List[int], sub_list: List[int]) -> bool:\n    \"\"\" Check whether a list contains the given sublist or not.\n    >>> is_sublist([2,4,3,5,7], [3,7])\n    False\n    >>> is_sublist([2,4,3,5,7], [4,3])\n    True\n    >>> is_sublist([2,4,3,5,7], [1,6])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,4,3,5,7], [3,7]) == False\n    assert candidate([2,4,3,5,7], [4,3]) == True\n    assert candidate([2,4,3,5,7], [1,6]) == False\n", "entry_point": "is_sublist"}
{"task_id": 70, "prompt": "from typing import List, Tuple\n\n\ndef get_equal(tuples: List[Tuple], length: int) -> str:\n    \"\"\" Check if all the given tuples have equal length or not.\n    >>> get_equal([(11, 22, 33), (44, 55, 66)], 3)\n    'All tuples have same length'\n    >>> get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)\n    'All tuples do not have same length'\n    >>> get_equal([(1, 2), (3, 4)], 2)\n    'All tuples have same length'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n    assert candidate([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n    assert candidate([(1, 2), (3, 4)], 2) == 'All tuples have same length'\n", "entry_point": "get_equal"}
{"task_id": 71, "prompt": "def comb_sort(elements: List[int]) -> List[int]:\n    \"\"\" Sort a list of elements using comb sort.\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([41, 32, 15, 19, 22])\n    [15, 19, 22, 32, 41]\n    >>> comb_sort([99, 15, 13, 47])\n    [13, 15, 47, 99]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n", "entry_point": "comb_sort"}
{"task_id": 72, "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\" Check whether the given number can be represented as the difference of two squares.\n    >>> dif_Square(5)\n    True\n    >>> dif_Square(10)\n    False\n    >>> dif_Square(15)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(10) == False\n    assert candidate(15) == True\n", "entry_point": "dif_Square"}
{"task_id": 73, "prompt": "import re\n\n\ndef multiple_split(text: str) -> list:\n    \"\"\" Split the given string with multiple delimiters by using regex.\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.')\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')\n    ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    >>> multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')\n    ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n    assert candidate('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    assert candidate('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n\n", "entry_point": "multiple_split"}
{"task_id": 74, "prompt": "from typing import List\n\n\ndef is_samepatterns(strings: List[str], patterns: List[str]) -> bool:\n    \"\"\" Check whether the sequence of strings follows the sequence given in the patterns array.\n    >>> is_samepatterns(['red','green','green'], ['a', 'b', 'b'])\n    True\n    >>> is_samepatterns(['red','green','greenn'], ['a', 'b', 'b'])\n    False\n    >>> is_samepatterns(['red','green','greenn'], ['a', 'b'])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['red','green','green'], ['a', 'b', 'b']) == True\n    assert candidate(['red','green','greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red','green','greenn'], ['a', 'b']) == False\n\n", "entry_point": "is_samepatterns"}
{"task_id": 75, "prompt": "from typing import List, Tuple\n\n\ndef find_tuples(tuples: List[Tuple[int, ...]], k: int) -> List[Tuple[int, ...]]:\n    \"\"\" Find tuples which have all elements divisible by k from the given list of tuples.\n    >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n    [(6, 24, 12)]\n    >>> find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)\n    [(5, 25, 30)]\n    >>> find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)\n    [(8, 16, 4)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n", "entry_point": "find_tuples"}
{"task_id": 76, "prompt": "def count_Squares(length: int, width: int) -> int:\n    \"\"\" Count the number of squares in a rectangle of given length and width.\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(2,2)\n    5\n    >>> count_Squares(1,1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(2,2) == 5\n    assert candidate(1,1) == 1\n\n", "entry_point": "count_Squares"}
{"task_id": 77, "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\" Calculate the difference between the sum of even and odd digits in the given number.\n    >>> is_Diff(12345)\n    False\n    >>> is_Diff(1212112)\n    True\n    >>> is_Diff(1212)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12345) == False\n    assert candidate(1212112) == True\n    assert candidate(1212) == False\n", "entry_point": "is_Diff"}
{"task_id": 78, "prompt": "def count_With_Odd_SetBits(n: int) -> int:\n    \"\"\" Find the number of integers less than or equal to n with an odd number of set bits.\n    >>> count_With_Odd_SetBits(5)\n    3\n    >>> count_With_Odd_SetBits(10)\n    5\n    >>> count_With_Odd_SetBits(15)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 3\n    assert candidate(10) == 5\n    assert candidate(15) == 8\n\n", "entry_point": "count_With_Odd_SetBits"}
{"task_id": 79, "prompt": "def word_len(word: str) -> bool:\n    \"\"\" Check whether the length of the word is odd or not.\n    >>> word_len(\"Hadoop\")\n    False\n    >>> word_len(\"great\")\n    True\n    >>> word_len(\"structure\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Hadoop\") == False\n    assert candidate(\"great\") == True\n    assert candidate(\"structure\") == True\n", "entry_point": "word_len"}
{"task_id": 80, "prompt": "def tetrahedral_number(n: int) -> float:\n    \"\"\" Calculate the nth tetrahedral number.\n    A tetrahedral number or triangular pyramid number is the number of stacked spheres in a tetrahedron with a base of n spheres.\n    The formula for the nth tetrahedral number is n*(n+1)*(n+2)/6\n    >>> tetrahedral_number(5)\n    35.0\n    >>> tetrahedral_number(6)\n    56.0\n    >>> tetrahedral_number(7)\n    84.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 35.0\n    assert candidate(6) == 56.0\n    assert candidate(7) == 84.0\n\n", "entry_point": "tetrahedral_number"}
{"task_id": 81, "prompt": "from typing import Tuple, List\n\n\ndef zip_tuples(tup1: Tuple[int, ...], tup2: Tuple[int, ...]) -> List[Tuple[int, int]]:\n    \"\"\" Zip the two given tuples in a cyclic manner.\n    >>> zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))\n    [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    >>> zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))\n    [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    >>> zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))\n    [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((7, 8, 4, 5, 9, 10), (1, 5, 6)) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    assert candidate((8, 9, 5, 6, 10, 11), (2, 6, 7)) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    assert candidate((9, 10, 6, 7, 11, 12), (3, 7, 8)) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n", "entry_point": "zip_tuples"}
{"task_id": 82, "prompt": "from typing import List\n\n\ndef volume_sphere(radius: float) -> float:\n    \"\"\" Calculate the volume of a sphere given its radius.\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(25)\n    65449.84694978735\n    >>> volume_sphere(20)\n    33510.32163829113\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 4188.790204786391\n    assert candidate(25) == 65449.84694978735\n    assert candidate(20) == 33510.32163829113\n\n", "entry_point": "volume_sphere"}
{"task_id": 83, "prompt": "def get_Char(s: str) -> str:\n    \"\"\" Find the character made by adding all the characters of the given string.\n    >>> get_Char(\"abc\")\n    'f'\n    >>> get_Char(\"gfg\")\n    't'\n    >>> get_Char(\"ab\")\n    'c'\n    \"\"\n", "test": "def check(candidate):\n    assert candidate(\"abc\") == \"f\"\n    assert candidate(\"gfg\") == \"t\"\n    assert candidate(\"ab\") == \"c\"\n", "entry_point": "get_Char"}
{"task_id": 84, "prompt": "def sequence(n: int) -> int:\n    \"\"\" Find the n-th number in Newman-Conway sequence.\n    >>> sequence(10)\n    6\n    >>> sequence(2)\n    1\n    >>> sequence(3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 6\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n", "entry_point": "sequence"}
{"task_id": 85, "prompt": "from typing import List\n\n\ndef surfacearea_sphere(radius: float) -> float:\n    \"\"\" Calculate the surface area of a sphere given its radius.\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(15)\n    2827.4333882308138\n    >>> surfacearea_sphere(20)\n    5026.548245743669\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 1256.6370614359173\n    assert candidate(15) == 2827.4333882308138\n    assert candidate(20) == 5026.548245743669\n", "entry_point": "surfacearea_sphere"}
{"task_id": 86, "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\" Return the nth centered hexagonal number.\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hexagonal_number(9)\n    217\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 271\n    assert candidate(2) == 7\n    assert candidate(9) == 217\n", "entry_point": "centered_hexagonal_number"}
{"task_id": 87, "prompt": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    \"\"\" Merge three dictionaries into a single dictionary.\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})\n    {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })\n    {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    assert candidate({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n", "entry_point": "merge_dictionaries_three"}
{"task_id": 88, "prompt": "from typing import List, Dict\n\n\ndef freq_count(numbers: List[int]) -> Dict[int, int]:\n    \"\"\" Get the frequency of the elements in a list.\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    >>> freq_count([1,2,3,4,3,2,4,1,3,1,4])\n    {1: 3, 2: 2, 3: 3, 4: 3}\n    >>> freq_count([5,6,7,4,9,10,4,5,6,7,9,5])\n    {5: 3, 6: 2, 7: 2, 4: 2, 9: 2, 10: 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    assert candidate([1,2,3,4,3,2,4,1,3,1,4]) == {1: 3, 2: 2, 3: 3, 4: 3}\n    assert candidate([5,6,7,4,9,10,4,5,6,7,9,5]) == {5: 3, 6: 2, 7: 2, 4: 2, 9: 2, 10: 1}\n", "entry_point": "freq_count"}
{"task_id": 89, "prompt": "def closest_num(n: int) -> int:\n    \"\"\" Find the closest smaller number than n.\n    >>> closest_num(11)\n    10\n    >>> closest_num(7)\n    6\n    >>> closest_num(12)\n    11\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(11) == 10\n    assert candidate(7) == 6\n    assert candidate(12) == 11\n", "entry_point": "closest_num"}
{"task_id": 90, "prompt": "from typing import List\n\n\ndef len_log(words: List[str]) -> int:\n    \"\"\" Find the length of the longest word in the given list of words.\n    >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n    7\n    >>> len_log([\"a\", \"ab\", \"abc\"])\n    3\n    >>> len_log([\"small\", \"big\", \"tall\"])\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"python\", \"PHP\", \"bigdata\"]) == 7\n    assert candidate([\"a\", \"ab\", \"abc\"]) == 3\n    assert candidate([\"small\", \"big\", \"tall\"]) == 5\n", "entry_point": "len_log"}
{"task_id": 91, "prompt": "from typing import List\n\n\ndef find_substring(strings: List[str], substring: str) -> bool:\n    \"\"\" Check if a substring is present in a given list of string values.\n    >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n    True\n    >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\")\n    False\n    >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"abc\") == False\n    assert candidate([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ange\") == True\n\n", "entry_point": "find_substring"}
{"task_id": 92, "prompt": "def is_undulating(number: str) -> bool:\n    \"\"\" Check whether the given number is undulating or not. A number is undulating if its digits alternate between two different values.\n    >>> is_undulating(\"1212121\")\n    True\n    >>> is_undulating(\"1991\")\n    False\n    >>> is_undulating(\"121\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"1212121\") == True\n    assert candidate(\"1991\") == False\n    assert candidate(\"121\") == True\n", "entry_point": "is_undulating"}
{"task_id": 93, "prompt": "def power(a: int, b: int) -> int:\n    \"\"\" Calculate the value of 'a' to the power 'b'.\n    >>> power(3, 4)\n    81\n    >>> power(2, 3)\n    8\n    >>> power(5, 5)\n    3125\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == 81\n    assert candidate(2, 3) == 8\n    assert candidate(5, 5) == 3125\n", "entry_point": "power"}
{"task_id": 94, "prompt": "from typing import List, Tuple\n\n\ndef index_minimum(records: List[Tuple[str, int]]) -> str:\n    \"\"\" Extract the name associated with the minimum value from the given list of tuples.\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    >>> index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\n    'Dawood'\n    >>> index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\n    'Ayesha'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'\n\n", "entry_point": "index_minimum"}
{"task_id": 95, "prompt": "def Find_Min_Length(sublists: List[List[int]]) -> int:\n    \"\"\" Find the minimum length of sublist from a list of sublists.\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    >>> Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]])\n    2\n    >>> Find_Min_Length([[3,3,3],[4,4,4,4]])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1],[1,2]]) == 1\n    assert candidate([[1,2],[1,2,3],[1,2,3,4]]) == 2\n    assert candidate([[3,3,3],[4,4,4,4]]) == 3\n", "entry_point": "Find_Min_Length"}
{"task_id": 96, "prompt": "def divisor(n: int) -> int:\n    \"\"\" Return the number of divisors of a given integer.\n    >>> divisor(15)\n    4\n    >>> divisor(12)\n    6\n    >>> divisor(9)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n", "entry_point": "divisor"}
{"task_id": 97, "prompt": "from typing import List, Dict\n\n\ndef frequency_lists(lists: List[List[int]]) -> Dict[int, int]:\n    \"\"\" Find the frequency count of elements in a list of lists.\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    >>> frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    >>> frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])\n    {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    assert candidate([[1,2,3,4],[5,6,7,8],[9,10,11,12]]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    assert candidate([[20,30,40,17],[18,16,14,13],[10,20,30,40]]) == {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}\n", "entry_point": "frequency_lists"}
{"task_id": 98, "prompt": "from typing import List\n\n\ndef multiply_num(numbers: List[float]) -> float:\n    \"\"\" Multiply all the numbers in a list and divide by the length of the list.\n    >>> multiply_num([8, 2, 3, -1, 7])\n    -67.2\n    >>> multiply_num([-10, -20, -30])\n    -2000.0\n    >>> multiply_num([19, 15, 18])\n    1710.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([8, 2, 3, -1, 7]) == -67.2\n    assert candidate([-10, -20, -30]) == -2000.0\n    assert candidate([19, 15, 18]) == 1710.0\n", "entry_point": "multiply_num"}
{"task_id": 99, "prompt": "def decimal_to_binary(number: int) -> str:\n    \"\"\" Convert the given decimal number to its binary equivalent.\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(18)\n    '10010'\n    >>> decimal_to_binary(7)\n    '111'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(8) == '1000'\n    assert candidate(18) == '10010'\n    assert candidate(7) == '111'\n", "entry_point": "decimal_to_binary"}
{"task_id": 100, "prompt": "def next_smallest_palindrome(number: int) -> int:\n    \"\"\" Find the next smallest palindrome greater than the given number.\n    >>> next_smallest_palindrome(99)\n    101\n    >>> next_smallest_palindrome(1221)\n    1331\n    >>> next_smallest_palindrome(120)\n    121\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(99) == 101\n    assert candidate(1221) == 1331\n    assert candidate(120) == 121\n", "entry_point": "next_smallest_palindrome"}
{"task_id": 101, "prompt": "from typing import List\n\n\ndef kth_element(arr: List[int], n: int, k: int) -> int:\n    \"\"\" Find the kth element in the given array.\n    >>> kth_element([12,3,5,7,19], 5, 2)\n    3\n    >>> kth_element([17,24,8,23], 4, 3)\n    8\n    >>> kth_element([16,21,25,36,4], 5, 4)\n    36\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12,3,5,7,19], 5, 2) == 3\n    assert candidate([17,24,8,23], 4, 3) == 8\n    assert candidate([16,21,25,36,4], 5, 4) == 36\n", "entry_point": "kth_element"}
{"task_id": 102, "prompt": "def snake_to_camel(snake_str: str) -> str:\n    \"\"\" Convert a snake case string to a camel case string.\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('python_language')\n    'PythonLanguage'\n    >>> snake_to_camel('programming_language')\n    'ProgrammingLanguage'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python_program') == 'PythonProgram'\n    assert candidate('python_language') == 'PythonLanguage'\n    assert candidate('programming_language') == 'ProgrammingLanguage'\n\n", "entry_point": "snake_to_camel"}
{"task_id": 103, "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\" Calculate the Eulerian number A(n, m).\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 1)\n    11\n    >>> eulerian_num(5, 3)\n    26\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 1) == 4\n    assert candidate(4, 1) == 11\n    assert candidate(5, 3) == 26\n", "entry_point": "eulerian_num"}
{"task_id": 104, "prompt": "from typing import List\n\n\ndef sort_sublists(lists: List[List[str]]) -> List[List[str]]:\n    \"\"\" Sort each sublist of strings in a given list of lists using lambda function.\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']])\n    [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    >>> sort_sublists([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']])\n    [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']])==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']])==[['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n", "entry_point": "sort_sublists"}
{"task_id": 105, "prompt": "from typing import List\n\n\ndef count(truths: List[bool]) -> int:\n    \"\"\" Count the number of True booleans in the given list.\n    >>> count([True, False, True])\n    2\n    >>> count([False, False])\n    0\n    >>> count([True, True, True])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([True, False, True]) == 2\n    assert candidate([False, False]) == 0\n    assert candidate([True, True, True]) == 3\n", "entry_point": "count"}
{"task_id": 106, "prompt": "from typing import List, Tuple\n\n\ndef add_lists(lst: List[int], tpl: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Add the given list to the given tuple.\n    >>> add_lists([5, 6, 7], (9, 10))\n    (9, 10, 5, 6, 7)\n    >>> add_lists([6, 7, 8], (10, 11))\n    (10, 11, 6, 7, 8)\n    >>> add_lists([7, 8, 9], (11, 12))\n    (11, 12, 7, 8, 9)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    assert candidate([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)\n\n", "entry_point": "add_lists"}
{"task_id": 107, "prompt": "def count_Hexadecimal(start: int, end: int) -> int:\n    \"\"\" Count the number of hexadecimal numbers within a given range (inclusive).\n    >>> count_Hexadecimal(10,15)\n    6\n    >>> count_Hexadecimal(2,4)\n    0\n    >>> count_Hexadecimal(15,16)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10,15) == 6\n    assert candidate(2,4) == 0\n    assert candidate(15,16) == 1\n\n", "entry_point": "count_Hexadecimal"}
{"task_id": 108, "prompt": "from typing import List\nimport heapq\n\ndef merge_sorted_list(*lists: List[int]) -> List[int]:\n    \"\"\" Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n    [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    >>> merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n    [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    >>> merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])\n    [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n", "entry_point": "merge_sorted_list"}
{"task_id": 109, "prompt": "def odd_Equivalent(binary_str: str, length: int) -> int:\n    \"\"\" Find the count of rotations of a binary string with odd value.\n    >>> odd_Equivalent(\"011001\", 6)\n    3\n    >>> odd_Equivalent(\"11011\", 5)\n    4\n    >>> odd_Equivalent(\"1010\", 4)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"011001\", 6) == 3\n    assert candidate(\"11011\", 5) == 4\n    assert candidate(\"1010\", 4) == 2\n", "entry_point": "odd_Equivalent"}
{"task_id": 110, "prompt": "def extract_missing(ranges: List[Tuple[int, int]], start: int, end: int) -> List[Tuple[int, int]]:\n    \"\"\" Extract the ranges that are missing from the given list with the given start range and end range values.\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n    [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    >>> extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)\n    [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    >>> extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)\n    [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    assert candidate([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n", "entry_point": "extract_missing"}
{"task_id": 111, "prompt": "from typing import List\n\n\ndef common_in_nested_lists(lists: List[List[int]]) -> List[int]:\n    \"\"\" Find common elements in given nested lists.\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [12, 18]\n    >>> common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n    [5, 23]\n    >>> common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n    [4]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]) == [12, 18]\n    assert candidate([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]) == [5, 23]\n    assert candidate([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]) == [4]\n", "entry_point": "common_in_nested_lists"}
{"task_id": 112, "prompt": "def perimeter(radius: float, height: float) -> float:\n    \"\"\" Calculate the perimeter of a cylinder given its radius and height.\n    >>> perimeter(2, 4)\n    12\n    >>> perimeter(1, 2)\n    6\n    >>> perimeter(3, 1)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 4) == 12\n    assert candidate(1, 2) == 6\n    assert candidate(3, 1) == 8\n", "entry_point": "perimeter"}
{"task_id": 113, "prompt": "def check_integer(s: str) -> bool:\n    \"\"\" Check if the given string represents an integer.\n    >>> check_integer(\"python\")\n    False\n    >>> check_integer(\"1\")\n    True\n    >>> check_integer(\"12345\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == False\n    assert candidate(\"1\") == True\n    assert candidate(\"12345\") == True\n", "entry_point": "check_integer"}
{"task_id": 114, "prompt": "from typing import List, Tuple\n\n\ndef assign_freq(tuples: List[Tuple[int, ...]]) -> List[Tuple[int, ...]]:\n    \"\"\" Assign a frequency to each unique tuple in the given list of tuples.\n    >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)])\n    [(6, 5, 8, 3), (2, 7, 2), (9, 1)]\n    >>> assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)])\n    [(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\n    >>> assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)])\n    [(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)]) == [(6, 5, 8, 3), (2, 7, 2), (9, 1)]\n    assert candidate([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)]) == [(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]\n    assert candidate([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)]) == [(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]\n", "entry_point": "assign_freq"}
{"task_id": 115, "prompt": "def empty_dit(dicts: List[Dict]) -> bool:\n    \"\"\" Check whether all dictionaries in a list are empty or not.\n    >>> empty_dit([{},{},{}])\n    True\n    >>> empty_dit([{1,2},{},{}])\n    False\n    >>> empty_dit([{}])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([{},{},{}]) == True\n    assert candidate([{1,2},{},{}]) == False\n    assert candidate([{}]) == True\n", "entry_point": "empty_dit"}
{"task_id": 116, "prompt": "def tuple_to_int(numbers: tuple) -> int:\n    \"\"\" Convert a given tuple of positive integers into an integer.\n    >>> tuple_to_int((1,2,3))\n    123\n    >>> tuple_to_int((4,5,6))\n    456\n    >>> tuple_to_int((5,6,7))\n    567\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1,2,3)) == 123\n    assert candidate((4,5,6)) == 456\n    assert candidate((5,6,7)) == 567\n\n", "entry_point": "tuple_to_int"}
{"task_id": 117, "prompt": "from typing import List, Tuple\n\n\ndef list_to_float(elements: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\" Convert all possible convertible elements in the list to float.\n    >>> list_to_float([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")])\n    [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    >>> list_to_float([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")])\n    [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    >>> list_to_float([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")])\n    [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate([(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n", "entry_point": "list_to_float"}
{"task_id": 118, "prompt": "def string_to_list(s: str) -> list:\n    \"\"\" Convert a string to a list by splitting it on spaces.\n    >>> string_to_list(\"python programming\")\n    ['python', 'programming']\n    >>> string_to_list(\"lists tuples strings\")\n    ['lists', 'tuples', 'strings']\n    >>> string_to_list(\"write a program\")\n    ['write', 'a', 'program']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python programming\") == ['python', 'programming']\n    assert candidate(\"lists tuples strings\") == ['lists', 'tuples', 'strings']\n    assert candidate(\"write a program\") == ['write', 'a', 'program']\n", "entry_point": "string_to_list"}
{"task_id": 119, "prompt": "from typing import List\n\n\ndef search(arr: List[int], n: int) -> int:\n    \"\"\" Find the element that appears only once in a sorted array.\n    >>> search([1,1,2,2,3],5)\n    3\n    >>> search([1,1,3,3,4,4,5,5,7,7,8],11)\n    8\n    >>> search([1,2,2,3,3,4,4],7)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,2,3],5) == 3\n    assert candidate([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n    assert candidate([1,2,2,3,3,4,4],7) == 1\n", "entry_point": "search"}
{"task_id": 120, "prompt": "from typing import List, Tuple\n\n\ndef max_product_tuple(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Find the maximum product from the pairs of tuples within a given list.\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    36\n    >>> max_product_tuple([(10, 20), (15, 2), (5, 10)])\n    200\n    >>> max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n    484\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484\n\n", "entry_point": "max_product_tuple"}
{"task_id": 121, "prompt": "from typing import List\n\n\ndef check_triplet(numbers: List[int], a: int, b: int, c: int) -> bool:\n    \"\"\" Check if there exists a triplet (a, b, c) within the given list of numbers that\n    sums up to a specific target sum.\n    >>> check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n    True\n    >>> check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n    False\n    >>> check_triplet([10, 4, 2, 3, 5], 5, 15, 0)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n    assert candidate([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n    assert candidate([10, 4, 2, 3, 5], 5, 15, 0) == True\n", "entry_point": "check_triplet"}
{"task_id": 122, "prompt": "def smartNumber(n: int) -> int:\n    \"\"\" Find the n\u2019th smart number.\n    >>> smartNumber(1)\n    30\n    >>> smartNumber(50)\n    273\n    >>> smartNumber(1000)\n    2664\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == 30\n    assert candidate(50) == 273\n    assert candidate(1000) == 2664\n", "entry_point": "smartNumber"}
{"task_id": 123, "prompt": "from typing import List\n\n\ndef amicable_numbers_sum(n: int) -> int:\n    \"\"\" Sum all amicable numbers from 1 to n.\n    >>> amicable_numbers_sum(999)\n    504\n    >>> amicable_numbers_sum(9999)\n    31626\n    >>> amicable_numbers_sum(99)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(999) == 504\n    assert candidate(9999) == 31626\n    assert candidate(99) == 0\n\n", "entry_point": "amicable_numbers_sum"}
{"task_id": 124, "prompt": "from typing import Complex\n\n\ndef angle_complex(number: Complex) -> float:\n    \"\"\" Get the angle of a complex number.\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(2+1j)\n    0.4636476090008061\n    >>> angle_complex(0+2j)\n    1.5707963267948966\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(0+1j) == 1.5707963267948966\n    assert candidate(2+1j) == 0.4636476090008061\n    assert candidate(0+2j) == 1.5707963267948966\n\n", "entry_point": "angle_complex"}
{"task_id": 125, "prompt": "def find_length(binary_string: str, length: int) -> int:\n    \"\"\" Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    >>> find_length(\"11000010001\", 11)\n    6\n    >>> find_length(\"10111\", 5)\n    1\n    >>> find_length(\"11011101100101\", 14)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"11000010001\", 11) == 6\n    assert candidate(\"10111\", 5) == 1\n    assert candidate(\"11011101100101\", 14) == 2\n\n", "entry_point": "find_length"}
{"task_id": 126, "prompt": "from typing import List\n\n\ndef sum_common_divisors(a: int, b: int) -> int:\n    \"\"\" Find the sum of common divisors of two given numbers.\n    >>> sum_common_divisors(10, 15)\n    6\n    >>> sum_common_divisors(100, 150)\n    93\n    >>> sum_common_divisors(4, 6)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 15) == 6\n    assert candidate(100, 150) == 93\n    assert candidate(4, 6) == 3\n\n", "entry_point": "sum_common_divisors"}
{"task_id": 127, "prompt": "def multiply_int(a: int, b: int) -> int:\n    \"\"\" Multiply two integers without using the * operator.\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(5, 10)\n    50\n    >>> multiply_int(4, 8)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(5, 10) == 50\n    assert candidate(4, 8) == 32\n", "entry_point": "multiply_int"}
{"task_id": 128, "prompt": "from typing import List\n\n\ndef long_words(n: int, sentence: str) -> List[str]:\n    \"\"\" Shortlist words that are longer than n from a given list of words.\n    >>> long_words(3, \"python is a programming language\")\n    ['python', 'programming', 'language']\n    >>> long_words(2, \"writing a program\")\n    ['writing', 'program']\n    >>> long_words(5, \"sorting list\")\n    ['sorting']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, \"python is a programming language\") == ['python', 'programming', 'language']\n    assert candidate(2, \"writing a program\") == ['writing', 'program']\n    assert candidate(5, \"sorting list\") == ['sorting']\n", "entry_point": "long_words"}
{"task_id": 129, "prompt": "def magic_square_test(matrix: List[List[int]]) -> bool:\n    \"\"\" Check if the given matrix is a magic square. A magic square is a square grid with distinct\n    integers in which the sum of the numbers in each row, column, and the main diagonals are equal.\n    >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]]) == False\n", "entry_point": "magic_square_test"}
{"task_id": 130, "prompt": "from typing import List, Tuple\n\n\ndef max_occurrences(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" Find the item with maximum frequency in a given list and return the item and its frequency.\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    (2, 5)\n    >>> max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])\n    (8, 2)\n    >>> max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])\n    (20, 3)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == (2, 5)\n    assert candidate([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18]) == (8, 2)\n    assert candidate([10,20,20,30,40,90,80,50,30,20,50,10]) == (20, 3)\n", "entry_point": "max_occurrences"}
{"task_id": 131, "prompt": "def reverse_vowels(s: str) -> str:\n    \"\"\" Reverse only the vowels in the given string.\n    >>> reverse_vowels(\"Python\")\n    'Python'\n    >>> reverse_vowels(\"USA\")\n    'ASU'\n    >>> reverse_vowels(\"ab\")\n    'ab'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Python\") == \"Python\"\n    assert candidate(\"USA\") == \"ASU\"\n    assert candidate(\"ab\") == \"ab\"\n", "entry_point": "reverse_vowels"}
{"task_id": 132, "prompt": "def tup_string(tup: tuple) -> str:\n    \"\"\" Convert a tuple of characters into a string.\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    >>> tup_string(('p','y','t','h','o','n'))\n    'python'\n    >>> tup_string(('p','r','o','g','r','a','m'))\n    'program'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\n    assert candidate(('p','y','t','h','o','n')) == \"python\"\n    assert candidate(('p','r','o','g','r','a','m')) == \"program\"\n\n", "entry_point": "tup_string"}
{"task_id": 133, "prompt": "from typing import List\n\n\ndef sum_negativenum(numbers: List[int]) -> int:\n    \"\"\" Calculate the sum of the negative numbers in a given list of numbers.\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    >>> sum_negativenum([10, 15, -14, 13, -18, 12, -20])\n    -52\n    >>> sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])\n    -894\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\n    assert candidate([10, 15, -14, 13, -18, 12, -20]) == -52\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190]) == -894\n", "entry_point": "sum_negativenum"}
{"task_id": 134, "prompt": "def check_last(arr: List[int], p: int, operation: int) -> str:\n    \"\"\" Check whether the last element of given array is even or odd after performing an operation p times.\n    >>> check_last([5,7,10],3,1)\n    'ODD'\n    >>> check_last([2,3],2,3)\n    'EVEN'\n    >>> check_last([1,2,3],3,1)\n    'ODD'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5,7,10],3,1) == \"ODD\"\n    assert candidate([2,3],2,3) == \"EVEN\"\n    assert candidate([1,2,3],3,1) == \"ODD\"\n", "entry_point": "check_last"}
{"task_id": 135, "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\" Return the nth hexagonal number.\n    A hexagonal number is defined by the formula: H_n = n(2n - 1), where n is the position of the number.\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(5)\n    45\n    >>> hexagonal_num(7)\n    91\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 190\n    assert candidate(5) == 45\n    assert candidate(7) == 91\n\n", "entry_point": "hexagonal_num"}
{"task_id": 136, "prompt": "def cal_electbill(units: int) -> float:\n    \"\"\" Calculate the electricity bill for given units.\n    The cost per unit varies as follows:\n    - For the first 50 units: $0.50/unit\n    - For the next 100 units: $0.75/unit\n    - For the next 100 units: $1.20/unit\n    - Beyond 250 units: $1.50/unit\n    >>> cal_electbill(75)\n    246.25\n    >>> cal_electbill(265)\n    1442.75\n    >>> cal_electbill(100)\n    327.5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(75) == 246.25\n    assert candidate(265) == 1442.75\n    assert candidate(100) == 327.5\n", "entry_point": "cal_electbill"}
{"task_id": 137, "prompt": "from typing import List\n\n\ndef zero_count(numbers: List[int]) -> float:\n    \"\"\" Calculate the ratio of zeroes in the given list of integers.\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.15\n    >>> zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.00\n    >>> zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.00\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.15\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.00\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.00\n", "entry_point": "zero_count"}
{"task_id": 138, "prompt": "def is_Sum_Of_Powers_Of_Two(number: int) -> bool:\n    \"\"\" Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    >>> is_Sum_Of_Powers_Of_Two(10)\n    True\n    >>> is_Sum_Of_Powers_Of_Two(7)\n    False\n    >>> is_Sum_Of_Powers_Of_Two(14)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(7) == False\n    assert candidate(14) == True\n", "entry_point": "is_Sum_Of_Powers_Of_Two"}
{"task_id": 139, "prompt": "from typing import Callable\n\n\ndef circle_circumference(radius: float) -> float:\n    \"\"\" Calculate the circumference of a circle given its radius.\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(5)\n    31.415000000000003\n    >>> circle_circumference(4)\n    25.132\n    \"\"\"\n", "test": "def check(candidate: Callable):\n    assert candidate(10) == 62.830000000000005\n    assert candidate(5) == 31.415000000000003\n    assert candidate(4) == 25.132\n", "entry_point": "circle_circumference"}
{"task_id": 140, "prompt": "from typing import List, Tuple\n\n\ndef extract_singly(tuples: List[Tuple[int]]) -> List[int]:\n    \"\"\" Extract elements that occur singly in the given tuple list.\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    >>> extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\n    [1, 2, 3, 4, 7, 8]\n    >>> extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\n    [7, 8, 9, 10, 11, 12]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n    assert candidate([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n    assert candidate([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]\n", "entry_point": "extract_singly"}
{"task_id": 141, "prompt": "from typing import List\n\n\ndef pancake_sort(arr: List[int]) -> List[int]:\n    \"\"\" Sort a list of elements using pancake sort.\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([98, 12, 54, 36, 85])\n    [12, 36, 54, 85, 98]\n    >>> pancake_sort([41, 42, 32, 12, 23])\n    [12, 23, 32, 41, 42]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n    assert candidate([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]\n\n", "entry_point": "pancake_sort"}
{"task_id": 142, "prompt": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\" Count the number of elements that are the same at the same index in three given lists.\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n    3\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n    4\n    >>> count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3\n    assert candidate([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 4\n    assert candidate([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8]) == 5\n", "entry_point": "count_samepair"}
{"task_id": 143, "prompt": "from typing import Tuple, List\n\n\ndef find_lists(tuples: Tuple[List[int], ...]) -> int:\n    \"\"\" Find the number of lists present in the given tuple.\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    >>> find_lists(([1, 2], [3, 4], [5, 6]))\n    3\n    >>> find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1]))\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n    assert candidate(([1, 2], [3, 4], [5, 6]))  == 3\n    assert candidate(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1\n\n", "entry_point": "find_lists"}
{"task_id": 144, "prompt": "from typing import List\n\n\ndef sum_Pairs(numbers: List[int], n: int) -> int:\n    \"\"\" Find the sum of absolute differences in all pairs of the given array.\n    >>> sum_Pairs([1,8,9,15,16], 5)\n    74\n    >>> sum_Pairs([1,2,3,4], 4)\n    10\n    >>> sum_Pairs([1,2,3,4,5,7,9,11,14], 9)\n    188\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,8,9,15,16], 5) == 74\n    assert candidate([1,2,3,4], 4) == 10\n    assert candidate([1,2,3,4,5,7,9,11,14], 9) == 188\n", "entry_point": "sum_Pairs"}
{"task_id": 145, "prompt": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int], n: int) -> int:\n    \"\"\" Find the maximum absolute difference between any two elements in a given array.\n    >>> max_Abs_Diff([2, 1, 5, 3], 4)\n    4\n    >>> max_Abs_Diff([9, 3, 2, 5, 1], 5)\n    8\n    >>> max_Abs_Diff([3, 2, 1], 3)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 1, 5, 3], 4) == 4\n    assert candidate([9, 3, 2, 5, 1], 5) == 8\n    assert candidate([3, 2, 1], 3) == 2\n\n", "entry_point": "max_Abs_Diff"}
{"task_id": 146, "prompt": "def ascii_value_string(s: str) -> int:\n    \"\"\" Return the ASCII value of the first character in the string.\n    >>> ascii_value_string(\"python\")\n    112\n    >>> ascii_value_string(\"Program\")\n    80\n    >>> ascii_value_string(\"Language\")\n    76\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == 112\n    assert candidate(\"Program\") == 80\n    assert candidate(\"Language\") == 76\n\n", "entry_point": "ascii_value_string"}
{"task_id": 147, "prompt": "from typing import List\n\n\ndef max_path_sum(triangle: List[List[int]], m: int, n: int) -> int:\n    \"\"\" Find the maximum total path sum in the given triangle.\n    >>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n    14\n    >>> max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n    24\n    >>> max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n    53\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n    assert candidate([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24\n    assert candidate([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53\n", "entry_point": "max_path_sum"}
{"task_id": 148, "prompt": "def sum_digits_twoparts(number: int) -> int:\n    \"\"\" Divide a number into two parts such that the sum of digits of those parts is maximum.\n    >>> sum_digits_twoparts(35)\n    17\n    >>> sum_digits_twoparts(7)\n    7\n    >>> sum_digits_twoparts(100)\n    19\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(35) == 17\n    assert candidate(7) == 7\n    assert candidate(100) == 19\n", "entry_point": "sum_digits_twoparts"}
{"task_id": 149, "prompt": "from typing import List\n\n\ndef longest_subseq_with_diff_one(arr: List[int]) -> int:\n    \"\"\" Find the longest subsequence such that the difference between adjacents is one.\n    >>> longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2])\n    6\n    >>> longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6])\n    3\n    >>> longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1])\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 3, 2]) == 6\n    assert candidate([10, 9, 4, 5, 4, 8, 6]) == 3\n    assert candidate([1, 2, 3, 2, 3, 7, 2, 1]) == 7\n", "entry_point": "longest_subseq_with_diff_one"}
{"task_id": 150, "prompt": "def does_Contain_B(start: int, step: int, num: int) -> bool:\n    \"\"\" Check if the given number is present in the sequence starting from 'start' and\n    increasing by 'step' infinitely.\n    >>> does_Contain_B(1, 7, 3)\n    True\n    >>> does_Contain_B(1, -3, 5)\n    False\n    >>> does_Contain_B(3, 2, 5)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 7, 3) == True\n    assert candidate(1, -3, 5) == False\n    assert candidate(3, 2, 5) == False\n\n", "entry_point": "does_Contain_B"}
{"task_id": 151, "prompt": "from typing import List\n\n\ndef is_coprime(a: int, b: int) -> bool:\n    \"\"\" Check whether the given two numbers are co-prime or not.\n    Co-prime numbers are those numbers whose greatest common divisor (GCD) is 1.\n    >>> is_coprime(17, 13)\n    True\n    >>> is_coprime(15, 21)\n    False\n    >>> is_coprime(25, 45)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(17, 13) == True\n    assert candidate(15, 21) == False\n    assert candidate(25, 45) == False\n", "entry_point": "is_coprime"}
{"task_id": 152, "prompt": "from typing import List\n\n\ndef merge_sort(numbers: List[int]) -> List[int]:\n    \"\"\" Sort the given array by using merge sort.\n    >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n    [1, 2, 3, 4, 5, 6, 7, 9]\n    >>> merge_sort([7, 25, 45, 78, 11, 33, 19])\n    [7, 11, 19, 25, 33, 45, 78]\n    >>> merge_sort([3, 1, 4, 9, 8])\n    [1, 3, 4, 8, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n    assert candidate([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n    assert candidate([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]\n", "entry_point": "merge_sort"}
{"task_id": 153, "prompt": "from typing import Tuple\n\n\ndef parabola_vertex(a: float, b: float, c: float) -> Tuple[float, float]:\n    \"\"\" Find the vertex of a parabola given its coefficients a, b, and c.\n    >>> parabola_vertex(5,3,2)\n    (-0.3, 1.55)\n    >>> parabola_vertex(9,8,4)\n    (-0.4444444444444444, 2.2222222222222223)\n    >>> parabola_vertex(2,4,6)\n    (-1.0, 4.0)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.55)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n    assert candidate(2,4,6)==(-1.0, 4.0)\n\n", "entry_point": "parabola_vertex"}
{"task_id": 154, "prompt": "from typing import List\n\n\ndef specified_element(matrix: List[List[int]], index: int) -> List[int]:\n    \"\"\" Extract every specified element (by index) from a given two-dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n    [2, 2, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0) == [1, 4, 7]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2) == [3, 6, 9]\n    assert candidate([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3) == [2, 2, 5]\n", "entry_point": "specified_element"}
{"task_id": 155, "prompt": "def even_bit_toggle_number(number: int) -> int:\n    \"\"\" Toggle all even bits of a given number.\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(20)\n    30\n    >>> even_bit_toggle_number(30)\n    20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 0\n    assert candidate(20) == 30\n    assert candidate(30) == 20\n", "entry_point": "even_bit_toggle_number"}
{"task_id": 156, "prompt": "from typing import Tuple\n\n\ndef tuple_int_str(tuples: Tuple[Tuple[str, ...], ...]) -> Tuple[Tuple[int, ...], ...]:\n    \"\"\" Convert a tuple of string values to a tuple of integer values.\n    >>> tuple_int_str((('333', '33'), ('1416', '55')))\n    ((333, 33), (1416, 55))\n    >>> tuple_int_str((('999', '99'), ('1000', '500')))\n    ((999, 99), (1000, 500))\n    >>> tuple_int_str((('666', '66'), ('1500', '555')))\n    ((666, 66), (1500, 555))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((('333', '33'), ('1416', '55'))) == ((333, 33), (1416, 55))\n    assert candidate((('999', '99'), ('1000', '500'))) == ((999, 99), (1000, 500))\n    assert candidate((('666', '66'), ('1500', '555'))) == ((666, 66), (1500, 555))\n\n", "entry_point": "tuple_int_str"}
{"task_id": 157, "prompt": "from typing import List, Union\n\n\ndef encode_list(input_list: Union[List[int], str]) -> List[List[Union[int, float, str]]]:\n    \"\"\" Reflect the run-length encoding from a list or string.\n    >>> encode_list([1,1,2,3,4,4.3,5,1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    >>> encode_list('automatically')\n    [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    >>> encode_list('python')\n    [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    assert candidate('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    assert candidate('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n", "entry_point": "encode_list"}
{"task_id": 158, "prompt": "def min_Ops(arr: List[int], n: int, k: int) -> int:\n    \"\"\" Find k number of operations required to make all elements equal.\n    >>> min_Ops([2,2,2,2], 4, 3)\n    0\n    >>> min_Ops([4,2,6,8], 4, 3)\n    -1\n    >>> min_Ops([21,33,9,45,63], 5, 6)\n    24\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([2,2,2,2], 4, 3) == 0\n    assert candidate([4,2,6,8], 4, 3) == -1\n    assert candidate([21,33,9,45,63], 5, 6) == 24\n", "entry_point": "min_Ops"}
{"task_id": 159, "prompt": "def month_season(month: str, day: int) -> str:\n    \"\"\" Given a month and a day, return the season (winter, spring, summer, autumn).\n    >>> month_season('January', 4)\n    'winter'\n    >>> month_season('October', 28)\n    'autumn'\n    >>> month_season('June', 6)\n    'spring'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('January', 4) == 'winter'\n    assert candidate('October', 28) == 'autumn'\n    assert candidate('June', 6) == 'spring'\n", "entry_point": "month_season"}
{"task_id": 160, "prompt": "def solution(a: int, b: int, n: int) -> str:\n    \"\"\" Find x and y that satisfies ax + by = n.\n    >>> solution(2, 3, 7)\n    ('x = ', 2, ', y = ', 1)\n    >>> solution(4, 2, 7)\n    'No solution'\n    >>> solution(1, 13, 17)\n    ('x = ', 4, ', y = ', 1)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n    assert candidate(4, 2, 7) == 'No solution'\n    assert candidate(1, 13, 17) == ('x = ', 4, ', y = ', 1)\n", "entry_point": "solution"}
{"task_id": 161, "prompt": "from typing import List\n\n\ndef remove_elements(source_list: List[int], elements_to_remove: List[int]) -> List[int]:\n    \"\"\" Write a function to remove all elements from a given list present in another list.\n    >>> remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])\n    [1, 3, 5, 7, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])\n    [2, 4, 6, 8, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])\n    [1, 2, 3, 4, 6, 8, 9, 10]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]\n", "entry_point": "remove_elements"}
{"task_id": 162, "prompt": "def sum_series(n: int) -> int:\n    \"\"\" Calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x <= 0).\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(9)\n    25\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6) == 12\n    assert candidate(10) == 30\n    assert candidate(9) == 25\n\n", "entry_point": "sum_series"}
{"task_id": 163, "prompt": "from typing import List\n\n\ndef area_polygon(sides: int, side_length: float) -> float:\n    \"\"\" Calculate the area of a regular polygon with a given number of sides and side length.\n    >>> area_polygon(4, 20)\n    400.00000000000006\n    >>> area_polygon(10, 15)\n    1731.1969896610804\n    >>> area_polygon(9, 7)\n    302.90938549487214\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 20) == 400.00000000000006\n    assert candidate(10, 15) == 1731.1969896610804\n    assert candidate(9, 7) == 302.90938549487214\n\n", "entry_point": "area_polygon"}
{"task_id": 164, "prompt": "def areEquivalent(num1: int, num2: int) -> bool:\n    \"\"\" Check whether the sum of divisors (excluding the number itself) of two numbers are equal or not.\n    >>> areEquivalent(36, 57)\n    False\n    >>> areEquivalent(2, 4)\n    False\n    >>> areEquivalent(23, 47)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n", "entry_point": "areEquivalent"}
{"task_id": 165, "prompt": "from typing import List\n\n\ndef count_char_position(s: str) -> int:\n    \"\"\" Count characters at the same position in a given string (lower and uppercase characters) as in English alphabet.\n    >>> count_char_position(\"xbcefg\")\n    2\n    >>> count_char_position(\"ABcED\")\n    3\n    >>> count_char_position(\"AbgdeF\")\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"xbcefg\") == 2\n    assert candidate(\"ABcED\") == 3\n    assert candidate(\"AbgdeF\") == 5\n\n", "entry_point": "count_char_position"}
{"task_id": 166, "prompt": "from typing import List\n\n\ndef find_even_Pair(numbers: List[int], n: int) -> int:\n    \"\"\" Count the pairs in the list where the XOR of the pair is an even number.\n    >>> find_even_Pair([5,4,7,2,1], 5)\n    4\n    >>> find_even_Pair([7,2,8,1,0,5,11], 7)\n    9\n    >>> find_even_Pair([1,2,3], 3)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5,4,7,2,1], 5) == 4\n    assert candidate([7,2,8,1,0,5,11], 7) == 9\n    assert candidate([1,2,3], 3) == 1\n", "entry_point": "find_even_Pair"}
{"task_id": 167, "prompt": "from typing import List\n\n\ndef next_Power_Of_2(n: int) -> int:\n    \"\"\" Find the smallest power of 2 greater than or equal to n.\n    >>> next_Power_Of_2(0)\n    1\n    >>> next_Power_Of_2(5)\n    8\n    >>> next_Power_Of_2(17)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(0) == 1\n    assert candidate(5) == 8\n    assert candidate(17) == 32\n\n", "entry_point": "next_Power_Of_2"}
{"task_id": 168, "prompt": "from typing import List\n\n\ndef frequency(arr: List[int], num: int) -> int:\n    \"\"\" Find the frequency of a number in a given array.\n    >>> frequency([1,2,3], 4)\n    0\n    >>> frequency([1,2,2,3,3,3,4], 3)\n    3\n    >>> frequency([0,1,2,3,1,2], 1)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3],4) == 0\n    assert candidate([1,2,2,3,3,3,4],3) == 3\n    assert candidate([0,1,2,3,1,2],1) == 2\n", "entry_point": "frequency"}
{"task_id": 169, "prompt": "def get_pell(n: int) -> int:\n    \"\"\" Calculate the nth Pell number.\n    Pell numbers are defined by the recurrence relation:\n    P(n) = 2*P(n-1) + P(n-2), with P(0) = 0 and P(1) = 1.\n    >>> get_pell(4)\n    12\n    >>> get_pell(7)\n    169\n    >>> get_pell(8)\n    408\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 12\n    assert candidate(7) == 169\n    assert candidate(8) == 408\n", "entry_point": "get_pell"}
{"task_id": 170, "prompt": "from typing import List\n\n\ndef sum_range_list(numbers: List[int], start_index: int, end_index: int) -> int:\n    \"\"\" Find sum of the numbers in a list between the indices of a specified range.\n    >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\n    29\n    >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7)\n    16\n    >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10)\n    38\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38\n\n", "entry_point": "sum_range_list"}
{"task_id": 171, "prompt": "def perimeter_pentagon(side_length: int) -> int:\n    \"\"\" Calculate the perimeter of a pentagon with given side length.\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(10)\n    50\n    >>> perimeter_pentagon(15)\n    75\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 25\n    assert candidate(10) == 50\n    assert candidate(15) == 75\n\n", "entry_point": "perimeter_pentagon"}
{"task_id": 172, "prompt": "def count_occurance(s: str) -> int:\n    \"\"\" Count the occurrence of the substring 'std' in the given string.\n    >>> count_occurance(\"letstdlenstdporstd\")\n    3\n    >>> count_occurance(\"truststdsolensporsd\")\n    1\n    >>> count_occurance(\"makestdsostdworthit\")\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"letstdlenstdporstd\") == 3\n    assert candidate(\"truststdsolensporsd\") == 1\n    assert candidate(\"makestdsostdworthit\") == 2\n", "entry_point": "count_occurance"}
{"task_id": 173, "prompt": "from typing import List\n\n\ndef remove_splchar(s: str) -> str:\n    \"\"\" Remove everything except alphanumeric characters from a string.\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    >>> remove_splchar('python %^$@!^&*()  programming24%$^^()    language')\n    'pythonprogramming24language'\n    >>> remove_splchar('python   ^%&^()(+_)(_^&67)                  program')\n    'python67program'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python  @#&^%$*program123') == 'pythonprogram123'\n    assert candidate('python %^$@!^&*()  programming24%$^^()    language') == 'pythonprogramming24language'\n    assert candidate('python   ^%&^()(+_)(_^&67)                  program') == 'python67program'\n\n", "entry_point": "remove_splchar"}
{"task_id": 174, "prompt": "from typing import List, Tuple, Dict\n\n\ndef group_keyvalue(pairs: List[Tuple[str, int]]) -> Dict[str, List[int]]:\n    \"\"\" Group a sequence of key-value pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    >>> group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])\n    {'python': [1, 2, 3, 4, 5]}\n    >>> group_keyvalue([('yellow', 100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])\n    {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]) == {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    assert candidate([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)]) == {'python': [1, 2, 3, 4, 5]}\n    assert candidate([('yellow', 100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)]) == {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n", "entry_point": "group_keyvalue"}
{"task_id": 175, "prompt": "def is_valid_parenthese(s: str) -> bool:\n    \"\"\" Check if the string of parentheses is valid.\n    >>> is_valid_parenthese(\"(){}[]\")\n    True\n    >>> is_valid_parenthese(\"()[{)}\")\n    False\n    >>> is_valid_parenthese(\"()\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"(){}[]\") == True\n    assert candidate(\"()[{)}\") == False\n    assert candidate(\"()\") == True\n", "entry_point": "is_valid_parenthese"}
{"task_id": 176, "prompt": "def perimeter_triangle(side1: int, side2: int, side3: int) -> int:\n    \"\"\" Calculate the perimeter of a triangle given its side lengths.\n    >>> perimeter_triangle(10, 20, 30)\n    60\n    >>> perimeter_triangle(3, 4, 5)\n    12\n    >>> perimeter_triangle(25, 35, 45)\n    105\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20, 30) == 60\n    assert candidate(3, 4, 5) == 12\n    assert candidate(25, 35, 45) == 105\n", "entry_point": "perimeter_triangle"}
{"task_id": 177, "prompt": "from typing import Tuple\n\n\ndef answer(low: int, high: int) -> Tuple[int, int]:\n    \"\"\" Find two distinct numbers such that their least common multiple (LCM) lies within the given range.\n    >>> answer(3, 8)\n    (3, 6)\n    >>> answer(2, 6)\n    (2, 4)\n    >>> answer(1, 3)\n    (1, 2)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 8) == (3, 6)\n    assert candidate(2, 6) == (2, 4)\n    assert candidate(1, 3) == (1, 2)\n\n", "entry_point": "answer"}
{"task_id": 178, "prompt": "def string_literals(search_terms: List[str], text: str) -> str:\n    \"\"\" Search for literals strings in a given string and return 'Matched!' if any of the search terms is found,\n    otherwise return 'Not Matched!'.\n    >>> string_literals(['language'], 'python language')\n    'Matched!'\n    >>> string_literals(['program'], 'python language')\n    'Not Matched!'\n    >>> string_literals(['python'], 'programming language')\n    'Not Matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['language'], 'python language') == 'Matched!'\n    assert candidate(['program'], 'python language') == 'Not Matched!'\n    assert candidate(['python'], 'programming language') == 'Not Matched!'\n", "entry_point": "string_literals"}
{"task_id": 179, "prompt": "def is_num_keith(number: int) -> bool:\n    \"\"\" Determine if a given number is a Keith number or not.\n    A Keith number is an integer N with d digits that, when starting with a sequence of its digits, the subsequent numbers in the sequence are formed by adding the preceding d numbers, and N appears as a term in this sequence.\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(12)\n    False\n    >>> is_num_keith(197)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(14) == True\n    assert candidate(12) == False\n    assert candidate(197) == True\n", "entry_point": "is_num_keith"}
{"task_id": 180, "prompt": "from typing import Tuple\n\n\ndef distance_lat_long(lat1: float, lon1: float, lat2: float, lon2: float) -> float:\n    \"\"\" Calculate the distance between two points on the earth (specified in decimal degrees)\n    >>> distance_lat_long(23.5, 67.5, 25.5, 69.5)\n    12179.372041317429\n    >>> distance_lat_long(10.5, 20.5, 30.5, 40.5)\n    6069.397933300514\n    >>> distance_lat_long(10, 20, 30, 40)\n    6783.751974994595\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(23.5, 67.5, 25.5, 69.5) == 12179.372041317429\n    assert candidate(10.5, 20.5, 30.5, 40.5) == 6069.397933300514\n    assert candidate(10, 20, 30, 40) == 6783.751974994595\n\n", "entry_point": "distance_lat_long"}
{"task_id": 181, "prompt": "from typing import List\n\n\ndef common_prefix(strings: List[str], count: int) -> str:\n    \"\"\" Find the longest common prefix in the given set of strings.\n    >>> common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4)\n    'ta'\n    >>> common_prefix([\"apples\", \"ape\", \"april\"], 3)\n    'ap'\n    >>> common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3)\n    'teen'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n    assert candidate([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n    assert candidate([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'\n", "entry_point": "common_prefix"}
{"task_id": 182, "prompt": "from typing import Tuple, List\n\n\ndef find_character(s: str) -> Tuple[List[str], List[str], List[str], List[str]]:\n    \"\"\" Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    >>> find_character(\"ThisIsGeeksforGeeks\")\n    (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    >>> find_character(\"Hithere2\")\n    (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    >>> find_character(\"HeyFolks32\")\n    (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    assert candidate(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    assert candidate(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n", "entry_point": "find_character"}
{"task_id": 183, "prompt": "from typing import List\n\n\ndef count_pairs(numbers: List[int], n: int, k: int) -> int:\n    \"\"\" Count all the distinct pairs in the array having a difference of k.\n    >>> count_pairs([1, 5, 3, 4, 2], 5, 3)\n    2\n    >>> count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n    5\n    >>> count_pairs([2, 4, 1, 3, 4], 5, 2)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 5, 3, 4, 2], 5, 3) == 2\n    assert candidate([8, 12, 16, 4, 0, 20], 6, 4) == 5\n    assert candidate([2, 4, 1, 3, 4], 5, 2) == 3\n\n", "entry_point": "count_pairs"}
{"task_id": 184, "prompt": "from typing import List\n\n\ndef greater_specificnum(numbers: List[int], specified_number: int) -> bool:\n    \"\"\" Find if there are any values in the list that are greater than the specified number.\n    >>> greater_specificnum([220, 330, 500], 200)\n    True\n    >>> greater_specificnum([12, 17, 21], 20)\n    False\n    >>> greater_specificnum([1, 2, 3, 4], 10)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([220, 330, 500], 200) == True\n    assert candidate([12, 17, 21], 20) == False\n    assert candidate([1, 2, 3, 4], 10) == False\n\n", "entry_point": "greater_specificnum"}
{"task_id": 185, "prompt": "from typing import Tuple\n\n\ndef parabola_focus(a: float, b: float, c: float) -> Tuple[float, float]:\n    \"\"\" Find the focus of a parabola given its coefficients a, b, and c in the form\n    y = ax^2 + bx + c.\n    >>> parabola_focus(5,3,2)\n    (-0.3, 1.6)\n    >>> parabola_focus(9,8,4)\n    (-0.4444444444444444, 2.25)\n    >>> parabola_focus(2,4,6)\n    (-1.0, 4.125)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5,3,2)==(-0.3, 1.6)\n    assert candidate(9,8,4)==(-0.4444444444444444, 2.25)\n    assert candidate(2,4,6)==(-1.0, 4.125)\n", "entry_point": "parabola_focus"}
{"task_id": 186, "prompt": "import re\n\n\ndef check_literals(sentence: str, words: List[str]) -> str:\n    \"\"\" Search for literals strings in a sentence using regex.\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])\n    'Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])\n    'Not Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])\n    'Matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('The quick brown fox jumps over the lazy dog.', ['fox']) == 'Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.', ['horse']) == 'Not Matched!'\n    assert candidate('The quick brown fox jumps over the lazy dog.', ['lazy']) == 'Matched!'\n", "entry_point": "check_literals"}
{"task_id": 187, "prompt": "def longest_common_subsequence(seq1: str, seq2: str, len1: int, len2: int) -> int:\n    \"\"\" Find the length of the longest common subsequence for the given two sequences.\n    >>> longest_common_subsequence(\"AGGTAB\", \"GXTXAYB\", 6, 7)\n    4\n    >>> longest_common_subsequence(\"ABCDGH\", \"AEDFHR\", 6, 6)\n    3\n    >>> longest_common_subsequence(\"AXYT\", \"AYZX\", 4, 4)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 4\n    assert candidate(\"ABCDGH\", \"AEDFHR\", 6, 6) == 3\n    assert candidate(\"AXYT\", \"AYZX\", 4, 4) == 2\n", "entry_point": "longest_common_subsequence"}
{"task_id": 188, "prompt": "from typing import List\n\n\ndef prod_Square(number: int) -> bool:\n    \"\"\" Check whether the given number can be represented by product of two squares or not.\n    >>> prod_Square(25)\n    False\n    >>> prod_Square(16)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(25) == False\n    assert candidate(30) == False\n    assert candidate(16) == True\n", "entry_point": "prod_Square"}
{"task_id": 189, "prompt": "from typing import List\n\n\ndef first_Missing_Positive(nums: List[int], n: int) -> int:\n    \"\"\" Find the first missing positive number from the list.\n    >>> first_Missing_Positive([1,2,3,-1,5], 5)\n    4\n    >>> first_Missing_Positive([0,-1,-2,1,5,8], 6)\n    2\n    >>> first_Missing_Positive([0,1,2,5,-8], 5)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,-1,5], 5) == 4\n    assert candidate([0,-1,-2,1,5,8], 6) == 2\n    assert candidate([0,1,2,5,-8], 5) == 3\n\n", "entry_point": "first_Missing_Positive"}
{"task_id": 190, "prompt": "from typing import Tuple\n\n\ndef count_Intgral_Points(x1: int, y1: int, x2: int, y2: int) -> int:\n    \"\"\" Count the number of integral coordinates that lie inside a square with vertices\n    at (x1, y1), (x1, y2), (x2, y1), and (x2, y2).\n    >>> count_Intgral_Points(1,1,4,4)\n    4\n    >>> count_Intgral_Points(1,2,1,2)\n    1\n    >>> count_Intgral_Points(4,2,6,4)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,1,4,4) == 4\n    assert candidate(1,2,1,2) == 1\n    assert candidate(4,2,6,4) == 1\n\n", "entry_point": "count_Intgral_Points"}
{"task_id": 191, "prompt": "def check_monthnumber(month: str) -> bool:\n    \"\"\" Check whether the given month name contains 30 days or not.\n    >>> check_monthnumber(\"February\")\n    False\n    >>> check_monthnumber(\"June\")\n    True\n    >>> check_monthnumber(\"April\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"February\") == False\n    assert candidate(\"June\") == True\n    assert candidate(\"April\") == True\n", "entry_point": "check_monthnumber"}
{"task_id": 192, "prompt": "def check_String(s: str) -> bool:\n    \"\"\" Check whether a string has at least one letter and one number.\n    >>> check_String('thishasboth29')\n    True\n    >>> check_String('python')\n    False\n    >>> check_String('string')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('thishasboth29') == True\n    assert candidate('python') == False\n    assert candidate('string') == False\n", "entry_point": "check_String"}
{"task_id": 193, "prompt": "from typing import Tuple\n\n\ndef remove_tuple(duplicates: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Remove duplicates from the given tuple and return a tuple with unique elements only.\n    >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n    (1, 2, 3, 5)\n    >>> remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n    (2, 3, 4, 5, 6, 7, 8)\n    >>> remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))\n    (11, 12, 13, 14)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n    assert candidate((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)\n", "entry_point": "remove_tuple"}
{"task_id": 194, "prompt": "def octal_To_Decimal(octal_num: int) -> int:\n    \"\"\" Convert an octal number (given as an int) to its decimal equivalent.\n    >>> octal_To_Decimal(25)\n    21\n    >>> octal_To_Decimal(30)\n    24\n    >>> octal_To_Decimal(40)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(25) == 21\n    assert candidate(30) == 24\n    assert candidate(40) == 32\n\n", "entry_point": "octal_To_Decimal"}
{"task_id": 195, "prompt": "from typing import List\n\n\ndef first(arr: List[int], target: int, n: int) -> int:\n    \"\"\" Find the first position of an element in a sorted array.\n    >>> first([1,2,3,4,5,6,6], 6, 7)\n    5\n    >>> first([1,2,2,2,3,2,2,4,2], 2, 9)\n    1\n    >>> first([1,2,3], 1, 3)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6,6], 6, 7) == 5\n    assert candidate([1,2,2,2,3,2,2,4,2], 2, 9) == 1\n    assert candidate([1,2,3], 1, 3) == 0\n\n", "entry_point": "first"}
{"task_id": 196, "prompt": "from typing import List, Tuple\n\n\ndef remove_tuples(tuples: List[Tuple], k: int) -> List[Tuple]:\n    \"\"\" Write a function to remove all the tuples with length k.\n    >>> remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1)\n    [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)\n    [(1, 2, 3), (3, 4, 6, 7)]\n    >>> remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3)\n    [(4, 3), (1,)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)], 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    assert candidate([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2) == [(1, 2, 3), (3, 4, 6, 7)]\n    assert candidate([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)], 3) == [(4, 3), (1,)]\n", "entry_point": "remove_tuples"}
{"task_id": 197, "prompt": "from typing import Tuple\n\n\ndef find_exponentio(base: Tuple[int, ...], exponent: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Perform the exponentiation of the given two tuples.\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    >>> find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n    (1771561, 78125, 1679616, 117649)\n    >>> find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))\n    (35831808, 1679616, 40353607, 2097152)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)\n", "entry_point": "find_exponentio"}
{"task_id": 198, "prompt": "def largest_triangle(a: float, b: float) -> float:\n    \"\"\" Calculate the area of the largest triangle that can be inscribed in an ellipse with semi-major axis a\n    and semi-minor axis b.\n    >>> largest_triangle(4,2)\n    10.392304845413264\n    >>> largest_triangle(5,7)\n    4.639421805988064\n    >>> largest_triangle(9,1)\n    105.2220865598093\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4,2) == 10.392304845413264\n    assert candidate(5,7) == 4.639421805988064\n    assert candidate(9,1) == 105.2220865598093\n\n", "entry_point": "largest_triangle"}
{"task_id": 199, "prompt": "from typing import List\n\n\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\" Find the highest power of 2 less than or equal to the given number.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n", "entry_point": "highest_Power_of_2"}
{"task_id": 200, "prompt": "from typing import List\n\n\ndef position_max(numbers: List[int]) -> List[int]:\n    \"\"\" Find all index positions of the maximum values in a given list.\n    >>> position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [7]\n    >>> position_max([1,2,2,2,4,4,4,5,5,5,5])\n    [7, 8, 9, 10]\n    >>> position_max([2,1,5,6,8,3,4,9,10,11,8,12])\n    [11]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [7]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5]) == [7, 8, 9, 10]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12]) == [11]\n", "entry_point": "position_max"}
{"task_id": 201, "prompt": "from typing import List\n\n\ndef chkList(elements: List[str]) -> bool:\n    \"\"\" Check whether all elements in the list are the same.\n    >>> chkList(['one', 'one', 'one'])\n    True\n    >>> chkList(['one', 'Two', 'Three'])\n    False\n    >>> chkList(['bigdata', 'python', 'Django'])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['one', 'one', 'one']) == True\n    assert candidate(['one', 'Two', 'Three']) == False\n    assert candidate(['bigdata', 'python', 'Django']) == False\n\n", "entry_point": "chkList"}
{"task_id": 202, "prompt": "def remove_even(s: str) -> str:\n    \"\"\" Remove even indexed characters from a string.\n    >>> remove_even(\"python\")\n    'pto'\n    >>> remove_even(\"program\")\n    'porm'\n    >>> remove_even(\"language\")\n    'lnug'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == \"pto\"\n    assert candidate(\"program\") == \"porm\"\n    assert candidate(\"language\") == \"lnug\"\n", "entry_point": "remove_even"}
{"task_id": 203, "prompt": "def hamming_Distance(x: int, y: int) -> int:\n    \"\"\" Calculate the Hamming distance between two integers.\n    >>> hamming_Distance(4, 8)\n    2\n    >>> hamming_Distance(2, 4)\n    2\n    >>> hamming_Distance(1, 2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 8) == 2\n    assert candidate(2, 4) == 2\n    assert candidate(1, 2) == 2\n", "entry_point": "hamming_Distance"}
{"task_id": 204, "prompt": "def count(s: str, char: str) -> int:\n    \"\"\" Count the occurrence of a given character in a string.\n    >>> count(\"abcc\", \"c\")\n    2\n    >>> count(\"ababca\", \"a\")\n    3\n    >>> count(\"mnmm0pm\", \"m\")\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcc\", \"c\") == 2\n    assert candidate(\"ababca\", \"a\") == 3\n    assert candidate(\"mnmm0pm\", \"m\") == 4\n", "entry_point": "count"}
{"task_id": 205, "prompt": "from typing import List, Tuple\n\n\ndef inversion_elements(numbers: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Find the inversions of tuple elements in the given tuple list.\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    (-8, -9, -10, -2, -11, -8)\n    >>> inversion_elements((2, 4, 5, 6, 1, 7))\n    (-3, -5, -6, -7, -2, -8)\n    >>> inversion_elements((8, 9, 11, 14, 12, 13))\n    (-9, -10, -12, -15, -13, -14)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n    assert candidate((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n    assert candidate((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)\n\n", "entry_point": "inversion_elements"}
{"task_id": 206, "prompt": "from typing import Tuple\n\n\ndef concatenate_elements(elements: Tuple[str, ...]) -> Tuple[str, ...]:\n    \"\"\" Perform the adjacent element concatenation in the given tuple of strings.\n    >>> concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\"))\n    ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    >>> concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\"))\n    ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    >>> concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\"))\n    ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    assert candidate((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    assert candidate((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n", "entry_point": "concatenate_elements"}
{"task_id": 207, "prompt": "def find_longest_repeating_subseq(s: str) -> int:\n    \"\"\" Count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    >>> find_longest_repeating_subseq(\"AABEBCDD\")\n    3\n    >>> find_longest_repeating_subseq(\"aabb\")\n    2\n    >>> find_longest_repeating_subseq(\"aab\")\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AABEBCDD\") == 3\n    assert candidate(\"aabb\") == 2\n    assert candidate(\"aab\") == 1\n", "entry_point": "find_longest_repeating_subseq"}
{"task_id": 208, "prompt": "import re\n\n\ndef is_decimal(number: str) -> bool:\n    \"\"\" Check if the given string is a decimal number with a precision of 2.\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('123.1214')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('123.11') == True\n    assert candidate('0.21') == True\n    assert candidate('123.1214') == False\n", "entry_point": "is_decimal"}
{"task_id": 209, "prompt": "from typing import List\n\n\ndef heap_replace(heap: List[int], new_item: int) -> List[int]:\n    \"\"\" Delete the smallest element from the given heap and then insert a new item.\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n    [21, 25, 23, 44, 39, 68, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 110)\n    [23, 25, 68, 44, 39, 110, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 500)\n    [23, 25, 68, 44, 39, 500, 89]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([25, 44, 68, 21, 39, 23, 89], 21) == [21, 25, 23, 44, 39, 68, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89], 110) == [23, 25, 68, 44, 39, 110, 89]\n    assert candidate([25, 44, 68, 21, 39, 23, 89], 500) == [23, 25, 68, 44, 39, 500, 89]\n", "entry_point": "heap_replace"}
{"task_id": 210, "prompt": "import re\n\n\ndef is_allowed_specific_char(s: str) -> bool:\n    \"\"\" Check if the string contains only certain set of characters (a-z, A-Z, 0-9).\n    >>> is_allowed_specific_char(\"ABCDEFabcdef123450\")\n    True\n    >>> is_allowed_specific_char(\"*&%@#!}{\")\n    False\n    >>> is_allowed_specific_char(\"HELLOhowareyou98765\")\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ABCDEFabcdef123450\") == True\n    assert candidate(\"*&%@#!}{\") == False\n    assert candidate(\"HELLOhowareyou98765\") == True\n", "entry_point": "is_allowed_specific_char"}
{"task_id": 211, "prompt": "def count_Num(n: int) -> int:\n    \"\"\" Count numbers whose 0th and nth bits are set.\n    >>> count_Num(2)\n    1\n    >>> count_Num(3)\n    2\n    >>> count_Num(1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(3) == 2\n    assert candidate(1) == 1\n", "entry_point": "count_Num"}
{"task_id": 212, "prompt": "def fourth_Power_Sum(n: int) -> int:\n    \"\"\" Calculate the sum of the fourth powers of the first n natural numbers.\n    >>> fourth_Power_Sum(2)\n    17\n    >>> fourth_Power_Sum(4)\n    354\n    >>> fourth_Power_Sum(6)\n    2275\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 17\n    assert candidate(4) == 354\n    assert candidate(6) == 2275\n", "entry_point": "fourth_Power_Sum"}
{"task_id": 213, "prompt": "from typing import Tuple\n\n\ndef concatenate_strings(first_tuple: Tuple[str, ...], second_tuple: Tuple[str, ...]) -> Tuple[str, ...]:\n    \"\"\" Concatenate corresponding elements of two string tuples.\n    >>> concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\"))\n    ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    >>> concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\"))\n    ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    >>> concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\"))\n    ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    assert candidate((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    assert candidate((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n", "entry_point": "concatenate_strings"}
{"task_id": 214, "prompt": "from typing import Callable\n\n\ndef degree_radian(radians: float) -> float:\n    \"\"\" Convert radians to degrees.\n    >>> degree_radian(90)\n    5156.620156177409\n    >>> degree_radian(60)\n    3437.746770784939\n    >>> degree_radian(120)\n    6875.493541569878\n    \"\"\"\n", "test": "def check(candidate: Callable):\n    assert candidate(90) == 5156.620156177409\n    assert candidate(60) == 3437.746770784939\n    assert candidate(120) == 6875.493541569878\n", "entry_point": "degree_radian"}
{"task_id": 215, "prompt": "from typing import List\n\n\ndef decode_list(encoded_list: List) -> List:\n    \"\"\" Decode a run-length encoded given list.\n    >>> decode_list([[2, 1], 2, 3, [2, 4], 5, 1])\n    [1, 1, 2, 3, 4, 4, 5, 1]\n    >>> decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])\n    ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    >>> decode_list(['p', 'y', 't', 'h', 'o', 'n'])\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[2, 1], 2, 3, [2, 4], 5, 1])==[1, 1, 2, 3, 4, 4, 5, 1]\n    assert candidate(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']\n", "entry_point": "decode_list"}
{"task_id": 216, "prompt": "from typing import List\n\n\ndef check_subset_list(big_list: List[List], small_list: List[List]) -> bool:\n    \"\"\" Check if a nested list (small_list) is a subset of another nested list (big_list).\n    >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    False\n    >>> check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])\n    True\n    >>> check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]]) == False\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]]) == True\n    assert candidate([['a', 'b'], ['e'], ['c', 'd']],[['g']]) == False\n", "entry_point": "check_subset_list"}
{"task_id": 217, "prompt": "def first_Repeated_Char(s: str) -> str:\n    \"\"\" Find the first repeated character in a given string.\n    >>> first_Repeated_Char(\"Google\")\n    'o'\n    >>> first_Repeated_Char(\"data\")\n    'a'\n    >>> first_Repeated_Char(\"python\")\n    '\\0'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Google\") == \"o\"\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"python\") == '\\0'\n", "entry_point": "first_Repeated_Char"}
{"task_id": 218, "prompt": "def min_Operations(a: int, b: int) -> int:\n    \"\"\" Find the minimum operations required to make two numbers equal.\n    >>> min_Operations(2, 4)\n    1\n    >>> min_Operations(4, 10)\n    4\n    >>> min_Operations(1, 4)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 4) == 1\n    assert candidate(4, 10) == 4\n    assert candidate(1, 4) == 3\n", "entry_point": "min_Operations"}
{"task_id": 219, "prompt": "from typing import Tuple, List\n\n\ndef extract_min_max(numbers: Tuple[int, ...], k: int) -> List[int]:\n    \"\"\" Extract maximum and minimum k elements from the given tuple.\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    >>> extract_min_max((4, 5, 6, 1, 2, 7), 3)\n    (1, 2, 4, 5, 6, 7)\n    >>> extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)\n    (2, 3, 4, 7, 8, 9, 11)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n    assert candidate((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n    assert candidate((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)\n", "entry_point": "extract_min_max"}
{"task_id": 220, "prompt": "def replace_max_specialchar(text: str, max_replacements: int) -> str:\n    \"\"\" Replace maximum n occurrences of spaces, commas, or dots with a colon.\n    >>> replace_max_specialchar('Python language, Programming language.', 2)\n    'Python:language: Programming language.'\n    >>> replace_max_specialchar('a b c,d e f', 3)\n    'a:b:c:d e f'\n    >>> replace_max_specialchar('ram reshma,ram rahim', 1)\n    'ram:reshma,ram rahim'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Python language, Programming language.', 2) == 'Python:language: Programming language.'\n    assert candidate('a b c,d e f', 3) == 'a:b:c:d e f'\n    assert candidate('ram reshma,ram rahim', 1) == 'ram:reshma,ram rahim'\n", "entry_point": "replace_max_specialchar"}
{"task_id": 221, "prompt": "from typing import List\n\n\ndef first_even(numbers: List[int]) -> int:\n    \"\"\" Find the first even number in a given list of numbers.\n    >>> first_even([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    >>> first_even([2, 3, 4])\n    2\n    >>> first_even([5, 6, 7])\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([2, 3, 4]) == 2\n    assert candidate([5, 6, 7]) == 6\n\n", "entry_point": "first_even"}
{"task_id": 222, "prompt": "def check_type(elements: tuple) -> bool:\n    \"\"\" Check if all the elements in the tuple have the same data type.\n    >>> check_type((5, 6, 7, 3, 5, 6))\n    True\n    >>> check_type((1, 2, \"4\"))\n    False\n    >>> check_type((3, 2, 1, 4, 5))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, \"4\")) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\n", "entry_point": "check_type"}
{"task_id": 223, "prompt": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\" Check for majority element x in a sorted array arr of size n.\n    >>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n    True\n    >>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n    False\n    >>> is_majority([1, 1, 1, 2, 2], 5, 1)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n    assert candidate([1, 1, 1, 2, 2], 5, 1) == True\n", "entry_point": "is_majority"}
{"task_id": 224, "prompt": "from typing import List\n\n\ndef count_Set_Bits(number: int) -> int:\n    \"\"\" Count the number of set bits (1s) in the binary representation of a given number.\n    >>> count_Set_Bits(2)\n    1\n    >>> count_Set_Bits(4)\n    1\n    >>> count_Set_Bits(6)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 1\n    assert candidate(6) == 2\n\n", "entry_point": "count_Set_Bits"}
{"task_id": 225, "prompt": "def find_Min(arr: List[int], low: int, high: int) -> int:\n    \"\"\" Find the minimum element in a sorted and rotated array.\n    >>> find_Min([1,2,3,4,5],0,4)\n    1\n    >>> find_Min([4,6,8],0,2)\n    4\n    >>> find_Min([2,3,5,7,9],0,4)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5],0,4) == 1\n    assert candidate([4,6,8],0,2) == 4\n    assert candidate([2,3,5,7,9],0,4) == 2\n", "entry_point": "find_Min"}
{"task_id": 226, "prompt": "def odd_values_string(s: str) -> str:\n    \"\"\" Remove the characters which have odd index values of a given string.\n    >>> odd_values_string('abcdef')\n    'ace'\n    >>> odd_values_string('python')\n    'pto'\n    >>> odd_values_string('data')\n    'dt'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('abcdef') == 'ace'\n    assert candidate('python') == 'pto'\n    assert candidate('data') == 'dt'\n", "entry_point": "odd_values_string"}
{"task_id": 227, "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\" Find the minimum of three numbers.\n    >>> min_of_three(10, 20, 0)\n    0\n    >>> min_of_three(19, 15, 18)\n    15\n    >>> min_of_three(-10, -20, -30)\n    -30\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20, 0) == 0\n    assert candidate(19, 15, 18) == 15\n    assert candidate(-10, -20, -30) == -30\n", "entry_point": "min_of_three"}
{"task_id": 228, "prompt": "from typing import List\n\n\ndef all_Bits_Set_In_The_Given_Range(n: int, start: int, end: int) -> bool:\n    \"\"\" Check whether all the bits are unset in the given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(4, 1, 2)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(17, 2, 4)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(39, 4, 6)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 1, 2) == True\n    assert candidate(17, 2, 4) == True\n    assert candidate(39, 4, 6) == False\n\n", "entry_point": "all_Bits_Set_In_The_Given_Range"}
{"task_id": 229, "prompt": "from typing import List\n\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\" Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    >>> re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)\n    [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    >>> re_arrange_array([12, -14, -26, 13, 15], 5)\n    [-14, -26, 12, 13, 15]\n    >>> re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)\n    [-42, -39, -78, 10, 24, 36, 85]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n    assert candidate([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]\n", "entry_point": "re_arrange_array"}
{"task_id": 230, "prompt": "def replace_blank(text: str, char: str) -> str:\n    \"\"\" Replace blank spaces with any character in a given string.\n    >>> replace_blank(\"hello people\", '@')\n    'hello@people'\n    >>> replace_blank(\"python program language\", '$')\n    'python$program$language'\n    >>> replace_blank(\"blank space\", '-')\n    'blank-space'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"hello people\", '@') == \"hello@people\"\n    assert candidate(\"python program language\", '$') == \"python$program$language\"\n    assert candidate(\"blank space\", '-') == \"blank-space\"\n", "entry_point": "replace_blank"}
{"task_id": 231, "prompt": "def max_sum(triangle: List[List[int]], n: int) -> int:\n    \"\"\" Find the maximum sum in the given right triangle of numbers.\n    >>> max_sum([[1], [2,1], [3,3,2]], 3)\n    6\n    >>> max_sum([[1], [1, 2], [4, 1, 12]], 3)\n    15\n    >>> max_sum([[2], [3,2], [13,23,12]], 3)\n    28\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1], [2,1], [3,3,2]], 3) == 6\n    assert candidate([[1], [1, 2], [4, 1, 12]], 3) == 15\n    assert candidate([[2], [3,2], [13,23,12]], 3) == 28\n", "entry_point": "max_sum"}
{"task_id": 232, "prompt": "from typing import List\n\n\ndef larg_nnum(numbers: List[int], n: int) -> List[int]:\n    \"\"\" Get the n largest numbers from a list of integers.\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n    [100, 90, 80, 70, 60]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n    [100, 90, 80]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2) == [100, 90]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5) == [100, 90, 80, 70, 60]\n    assert candidate([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3) == [100, 90, 80]\n", "entry_point": "larg_nnum"}
{"task_id": 233, "prompt": "from typing import List\n\n\ndef lateralsuface_cylinder(radius: float, height: float) -> float:\n    \"\"\" Calculate the lateral surface area of a cylinder given its radius and height.\n    >>> lateralsuface_cylinder(10, 5)\n    314.15000000000003\n    >>> lateralsuface_cylinder(4, 5)\n    125.66000000000001\n    >>> lateralsuface_cylinder(4, 10)\n    251.32000000000002\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 5) == 314.15000000000003\n    assert candidate(4, 5) == 125.66000000000001\n    assert candidate(4, 10) == 251.32000000000002\n\n", "entry_point": "lateralsuface_cylinder"}
{"task_id": 234, "prompt": "def volume_cube(side_length: int) -> int:\n    \"\"\" Calculate the volume of a cube given its side length.\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(2)\n    8\n    >>> volume_cube(5)\n    125\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(2) == 8\n    assert candidate(5) == 125\n\n", "entry_point": "volume_cube"}
{"task_id": 235, "prompt": "def even_bit_set_number(n: int) -> int:\n    \"\"\" Set all even bits of a given number.\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(20)\n    30\n    >>> even_bit_set_number(30)\n    30\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 10\n    assert candidate(20) == 30\n    assert candidate(30) == 30\n", "entry_point": "even_bit_set_number"}
{"task_id": 236, "prompt": "def No_of_Triangle(n: int, m: int) -> int:\n    \"\"\" Count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    >>> No_of_Triangle(4,2)\n    7\n    >>> No_of_Triangle(4,3)\n    3\n    >>> No_of_Triangle(1,3)\n    -1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4,2) == 7\n    assert candidate(4,3) == 3\n    assert candidate(1,3) == -1\n\n", "entry_point": "No_of_Triangle"}
{"task_id": 237, "prompt": "from typing import List, Tuple, Dict\n\n\ndef check_occurences(records: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\" Check the occurrences of records which occur similar times in the given tuples.\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n    {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    >>> check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])\n    {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    >>> check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])\n    {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n", "entry_point": "check_occurences"}
{"task_id": 238, "prompt": "from typing import str\n\n\ndef number_of_substrings(s: str) -> int:\n    \"\"\" Count the number of non-empty substrings of a given string.\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"abcde\")\n    15\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abc\") == 6\n    assert candidate(\"abcd\") == 10\n    assert candidate(\"abcde\") == 15\n\n", "entry_point": "number_of_substrings"}
{"task_id": 239, "prompt": "from typing import List\n\n\ndef get_total_number_of_sequences(n: int, m: int) -> int:\n    \"\"\" Find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    >>> get_total_number_of_sequences(10, 4)\n    4\n    >>> get_total_number_of_sequences(5, 2)\n    6\n    >>> get_total_number_of_sequences(16, 3)\n    84\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 4) == 4\n    assert candidate(5, 2) == 6\n    assert candidate(16, 3) == 84\n\n", "entry_point": "get_total_number_of_sequences"}
{"task_id": 240, "prompt": "from typing import List\n\n\ndef replace_list(original: List, replacement: List) -> List:\n    \"\"\" Replace the last element of the original list with another list.\n    >>> replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n    [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    >>> replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> replace_list(['red', 'blue', 'green'], ['yellow'])\n    ['red', 'blue', 'yellow']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate(['red', 'blue', 'green'], ['yellow']) == ['red', 'blue', 'yellow']\n", "entry_point": "replace_list"}
{"task_id": 241, "prompt": "from typing import List\n\n\ndef array_3d(x: int, y: int, z: int) -> List[List[List[str]]]:\n    \"\"\" Generate a 3D array of dimensions x*y*z, with each element initialized to '*'.\n    >>> array_3d(2, 2, 2)\n    [[['*', '*'], ['*', '*']], [['*', '*'], ['*', '*']]]\n    >>> array_3d(1, 1, 1)\n    [[['*']]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 4, 3) == [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    assert candidate(5, 3, 4) == [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    assert candidate(1, 2, 3) == [[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]\n", "entry_point": "array_3d"}
{"task_id": 242, "prompt": "def count_charac(s: str) -> int:\n    \"\"\" Count the total number of characters in a string.\n    >>> count_charac(\"python programming\")\n    18\n    >>> count_charac(\"language\")\n    8\n    >>> count_charac(\"words\")\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python programming\") == 18\n    assert candidate(\"language\") == 8\n    assert candidate(\"words\") == 5\n", "entry_point": "count_charac"}
{"task_id": 243, "prompt": "from typing import List, Tuple\n\n\ndef sort_on_occurence(items: List[Tuple]) -> List[Tuple]:\n    \"\"\" Sort the given list based on the occurrence of first element of tuples.\n    >>> sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n    [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    >>> sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])\n    [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    >>> sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])\n    [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    assert candidate([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    assert candidate([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n", "entry_point": "sort_on_occurence"}
{"task_id": 244, "prompt": "def next_Perfect_Square(number: int) -> int:\n    \"\"\" Find the next perfect square greater than the given number.\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(6)\n    9\n    >>> next_Perfect_Square(9)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(35) == 36\n    assert candidate(6) == 9\n    assert candidate(9) == 16\n", "entry_point": "next_Perfect_Square"}
{"task_id": 245, "prompt": "from typing import List\n\n\ndef max_sum(arr: List[int], n: int) -> int:\n    \"\"\" Find the maximum sum of bi-tonic sub-sequence for the given array.\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n    194\n    >>> max_sum([80, 60, 30, 40, 20, 10], 6)\n    210\n    >>> max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8)\n    138\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n    assert candidate([80, 60, 30, 40, 20, 10], 6) == 210\n    assert candidate([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138\n\n", "entry_point": "max_sum"}
{"task_id": 246, "prompt": "from typing import List\n\n\ndef babylonian_squareroot(number: float) -> float:\n    \"\"\" Compute the square root of a given number using the Babylonian method.\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    >>> babylonian_squareroot(2)\n    1.414213562373095\n    >>> babylonian_squareroot(9)\n    3.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 3.162277660168379\n    assert candidate(2) == 1.414213562373095\n    assert candidate(9) == 3.0\n", "entry_point": "babylonian_squareroot"}
{"task_id": 247, "prompt": "def lps(s: str) -> int:\n    \"\"\" Find the length of the longest palindromic subsequence in the given string.\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"CARDIO FOR CARDS\")\n    7\n    >>> lps(\"PART OF THE JOURNEY IS PART\")\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"TENS FOR TENS\") == 5\n    assert candidate(\"CARDIO FOR CARDS\") == 7\n    assert candidate(\"PART OF THE JOURNEY IS PART\") == 9\n", "entry_point": "lps"}
{"task_id": 248, "prompt": "def harmonic_sum(n: int) -> float:\n    \"\"\" Calculate the harmonic sum of n-1.\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    >>> harmonic_sum(4)\n    2.083333333333333\n    >>> harmonic_sum(19)\n    3.547739657143682\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7) == 2.5928571428571425\n    assert candidate(4) == 2.083333333333333\n    assert candidate(19) == 3.547739657143682\n", "entry_point": "harmonic_sum"}
{"task_id": 249, "prompt": "from typing import List\n\n\ndef intersection_array(arr1: List[int], arr2: List[int]) -> List[int]:\n    \"\"\" Find the intersection of two arrays using a lambda function.\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n    [1, 2, 8, 9]\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n    [3, 5, 7, 9]\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n    [10]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10]\n", "entry_point": "intersection_array"}
{"task_id": 250, "prompt": "from typing import Tuple\n\n\ndef count_X(elements: Tuple[int, ...], x: int) -> int:\n    \"\"\" Count the occurrences of an element x in a tuple.\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n    0\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)\n    3\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\n    assert candidate((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4\n", "entry_point": "count_X"}
{"task_id": 251, "prompt": "from typing import List\n\n\ndef insert_element(elements: List[str], insert_item: str) -> List[str]:\n    \"\"\" Insert an element before each element of a list.\n    >>> insert_element(['Red', 'Green', 'Black'], 'c')\n    ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    >>> insert_element(['python', 'java'], 'program')\n    ['program', 'python', 'program', 'java']\n    >>> insert_element(['happy', 'sad'], 'laugh')\n    ['laugh', 'happy', 'laugh', 'sad']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Black'], 'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    assert candidate(['python', 'java'], 'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'], 'laugh')==['laugh', 'happy', 'laugh', 'sad']\n", "entry_point": "insert_element"}
{"task_id": 252, "prompt": "from typing import Tuple\n\n\ndef convert(number: complex) -> Tuple[float, float]:\n    \"\"\" Convert a complex number into polar coordinates.\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(4)\n    (4.0, 0.0)\n    >>> convert(5)\n    (5.0, 0.0)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0, 0.0)\n    assert candidate(5) == (5.0, 0.0)\n\n", "entry_point": "convert"}
{"task_id": 253, "prompt": "from typing import List\n\n\ndef count_integer(numbers: List[int]) -> int:\n    \"\"\" Count the number of integers in a given list.\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([1, 2, 3])\n    3\n    >>> count_integer([1, 1.2, 4, 5.1])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 'abc', 1.2]) == 2\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([1, 1.2, 4, 5.1]) == 2\n", "entry_point": "count_integer"}
{"task_id": 254, "prompt": "def words_ae(s: str) -> List[str]:\n    \"\"\" Find all words in a given string that start with 'a' or 'e'.\n    >>> words_ae(\"python programe\")\n    ['ame']\n    >>> words_ae(\"python programe language\")\n    ['ame', 'anguage']\n    >>> words_ae(\"assert statement\")\n    ['assert', 'atement']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python programe\")==['ame']\n    assert candidate(\"python programe language\")==['ame','anguage']\n    assert candidate(\"assert statement\")==['assert', 'atement']\n", "entry_point": "words_ae"}
{"task_id": 255, "prompt": "from typing import List, Tuple\n\n\ndef combinations_colors(colors: List[str], number: int) -> List[Tuple[str, ...]]:\n    \"\"\" Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    >>> combinations_colors([\"Red\",\"Green\",\"Blue\"],3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n    assert candidate([\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    assert candidate([\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n", "entry_point": "combinations_colors"}
{"task_id": 256, "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\" Count the number of prime numbers less than a given non-negative number.\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n", "entry_point": "count_Primes_nums"}
{"task_id": 257, "prompt": "def swap_numbers(a: int, b: int) -> (int, int):\n    \"\"\" Swap two numbers.\n    >>> swap_numbers(10, 20)\n    (20, 10)\n    >>> swap_numbers(15, 17)\n    (17, 15)\n    >>> swap_numbers(100, 200)\n    (200, 100)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == (20, 10)\n    assert candidate(15, 17) == (17, 15)\n    assert candidate(100, 200) == (200, 100)\n", "entry_point": "swap_numbers"}
{"task_id": 258, "prompt": "from typing import List\n\n\ndef count_odd(numbers: List[int]) -> int:\n    \"\"\" Find the number of odd elements in the given list using a lambda function.\n    >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n    4\n    >>> count_odd([10, 15, 14, 13, -18, 12, -20])\n    2\n    >>> count_odd([1, 2, 4, 8, 9])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 10]) == 4\n    assert candidate([10, 15, 14, 13, -18, 12, -20]) == 2\n    assert candidate([1, 2, 4, 8, 9]) == 2\n", "entry_point": "count_odd"}
{"task_id": 259, "prompt": "from typing import Tuple, List\n\n\ndef maximize_elements(tup1: Tuple[Tuple[int, int], ...], tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    \"\"\" Given two tuples of tuples, return a new tuple of tuples where each element is the maximum of the corresponding elements in the input tuples.\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))\n", "entry_point": "maximize_elements"}
{"task_id": 260, "prompt": "def newman_prime(n: int) -> int:\n    \"\"\" Find the nth Newman-Shanks-Williams prime number.\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    17\n    >>> newman_prime(5)\n    41\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 7\n    assert candidate(4) == 17\n    assert candidate(5) == 41\n", "entry_point": "newman_prime"}
{"task_id": 261, "prompt": "from typing import Tuple\n\n\ndef division_elements(numerators: Tuple[int], denominators: Tuple[int]) -> Tuple[int]:\n    \"\"\" Perform mathematical division operation across the given tuples.\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((12, 6, 8, 16), (6, 3, 4, 4))\n    (2, 2, 2, 4)\n    >>> division_elements((20, 14, 36, 18), (5, 7, 6, 9))\n    (4, 2, 6, 2)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4)) == (2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9)) == (4, 2, 6, 2)\n", "entry_point": "division_elements"}
{"task_id": 262, "prompt": "from typing import List, Tuple\n\n\ndef split_two_parts(lst: List, n: int) -> Tuple[List, List]:\n    \"\"\" Split a given list into two parts where the length of the first part of the list is given.\n    >>> split_two_parts([1,1,2,3,4,4,5,1], 3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    >>> split_two_parts(['a', 'b', 'c', 'd'], 2)\n    (['a', 'b'], ['c', 'd'])\n    >>> split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)\n    (['p', 'y', 't', 'h'], ['o', 'n'])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n", "entry_point": "split_two_parts"}
{"task_id": 263, "prompt": "from typing import Dict\n\n\ndef merge_dict(dict1: Dict[str, int], dict2: Dict[str, int]) -> Dict[str, int]:\n    \"\"\" Write a function to merge two dictionaries.\n    >>> merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})\n    {'a': 100, 'b': 200, 'x': 300, 'y': 200}\n    >>> merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})\n    {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\n    >>> merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})\n    {'a': 10, 'b': 20, 'x': 30, 'y': 40}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'a': 100, 'b': 200}, {'x': 300, 'y': 200}) == {'a': 100, 'b': 200, 'x': 300, 'y': 200}\n    assert candidate({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900}) == {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\n    assert candidate({'a': 10, 'b': 20}, {'x': 30, 'y': 40}) == {'a': 10, 'b': 20, 'x': 30, 'y': 40}\n", "entry_point": "merge_dict"}
{"task_id": 264, "prompt": "def dog_age(human_years: int) -> int:\n    \"\"\" Calculate a dog's age in dog's years.\n    >>> dog_age(12)\n    61\n    >>> dog_age(15)\n    73\n    >>> dog_age(24)\n    109\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 61\n    assert candidate(15) == 73\n    assert candidate(24) == 109\n\n", "entry_point": "dog_age"}
{"task_id": 265, "prompt": "from typing import List\n\n\ndef list_split(items: List, n: int) -> List[List]:\n    \"\"\" Split the list into n parts. Each part contains every nth element from the list.\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n    [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    >>> list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)\n    [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\n", "entry_point": "list_split"}
{"task_id": 266, "prompt": "def lateralsurface_cube(side_length: int) -> int:\n    \"\"\" Calculate the lateral surface area of a cube given its side length.\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(9)\n    324\n    >>> lateralsurface_cube(10)\n    400\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 100\n    assert candidate(9) == 324\n    assert candidate(10) == 400\n", "entry_point": "lateralsurface_cube"}
{"task_id": 267, "prompt": "def square_Sum(n: int) -> int:\n    \"\"\" Find the sum of squares of first n odd natural numbers.\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    35\n    >>> square_Sum(4)\n    84\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 10\n    assert candidate(3) == 35\n    assert candidate(4) == 84\n", "entry_point": "square_Sum"}
{"task_id": 268, "prompt": "def find_star_num(n: int) -> int:\n    \"\"\" Find the n'th star number.\n    A star number is a centered figurate number that represents a centered hexagram (six-pointed star),\n    like the one that Chinese checkers is played on.\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(4)\n    73\n    >>> find_star_num(5)\n    121\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 37\n    assert candidate(4) == 73\n    assert candidate(5) == 121\n", "entry_point": "find_star_num"}
{"task_id": 269, "prompt": "def ascii_value(char: str) -> int:\n    \"\"\" Return the ASCII value of the given character.\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('R')\n    82\n    >>> ascii_value('S')\n    83\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('A') == 65\n    assert candidate('R') == 82\n    assert candidate('S') == 83\n\n", "entry_point": "ascii_value"}
{"task_id": 270, "prompt": "from typing import List\n\n\ndef sum_even_and_even_index(numbers: List[int], length: int) -> int:\n    \"\"\" Find the sum of even numbers at even positions.\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)\n    30\n    >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n    26\n    >>> sum_even_and_even_index([5, 6, 12, 1], 4)\n    12\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8], 6) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10) == 26\n    assert candidate([5, 6, 12, 1], 4) == 12\n", "entry_point": "sum_even_and_even_index"}
{"task_id": 271, "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\" Calculate the sum of the fifth power of the first n even natural numbers.\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    8832\n    >>> even_Power_Sum(1)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 1056\n    assert candidate(3) == 8832\n    assert candidate(1) == 32\n", "entry_point": "even_Power_Sum"}
{"task_id": 272, "prompt": "from typing import List, Tuple\n\n\ndef rear_extract(records: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\" Extract the last element from each tuple in the list of tuples.\n    >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n    [21, 20, 19]\n    >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\n    [36, 25, 45]\n    >>> rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\n    [14, 36, 56]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n", "entry_point": "rear_extract"}
{"task_id": 273, "prompt": "from typing import Tuple\n\n\ndef substract_elements(tuple1: Tuple[int, int, int], tuple2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\" Substract the contents of one tuple with corresponding index of other tuple.\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    >>> substract_elements((11, 2, 3), (24, 45 ,16))\n    (-13, -43, -13)\n    >>> substract_elements((7, 18, 9), (10, 11, 12))\n    (-3, 7, -3)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n    assert candidate((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)\n\n", "entry_point": "substract_elements"}
{"task_id": 274, "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\" Calculate the sum of binomial coefficients on even indices.\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(6)\n    32\n    >>> even_binomial_Coeff_Sum(2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 8\n    assert candidate(6) == 32\n    assert candidate(2) == 2\n", "entry_point": "even_binomial_Coeff_Sum"}
{"task_id": 275, "prompt": "def get_Position(arr: List[int], n: int, m: int) -> int:\n    \"\"\" Find the position of the last removed element from the given array.\n    >>> get_Position([2,5,4],3,2)\n    2\n    >>> get_Position([4,3],2,2)\n    2\n    >>> get_Position([1,2,3,4],4,1)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2,5,4],3,2) == 2\n    assert candidate([4,3],2,2) == 2\n    assert candidate([1,2,3,4],4,1) == 4\n", "entry_point": "get_Position"}
{"task_id": 276, "prompt": "from typing import Tuple\n\n\ndef volume_cylinder(radius: float, height: float) -> float:\n    \"\"\" Calculate the volume of a cylinder given its radius and height.\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(4, 5)\n    251.32000000000002\n    >>> volume_cylinder(4, 10)\n    502.64000000000004\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 5) == 1570.7500000000002\n    assert candidate(4, 5) == 251.32000000000002\n    assert candidate(4, 10) == 502.64000000000004\n\n", "entry_point": "volume_cylinder"}
{"task_id": 277, "prompt": "from typing import Dict\n\n\ndef dict_filter(input_dict: Dict[str, int], threshold: int) -> Dict[str, int]:\n    \"\"\" Filter a dictionary based on values being greater than or equal to a given threshold.\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n    {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)\n    {'Alden Cantrell': 180, 'Pierre Cox': 190}\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)\n    {'Pierre Cox': 190}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Alden Cantrell': 180, 'Pierre Cox': 190}\n    assert candidate({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Pierre Cox': 190}\n", "entry_point": "dict_filter"}
{"task_id": 278, "prompt": "from typing import Tuple, Any\n\n\ndef count_first_elements(record: Tuple[Any, ...]) -> int:\n    \"\"\" Find the element count that occurs before the first tuple in the given tuple.\n    >>> count_first_elements((1, 5, 7, (4, 6), 10))\n    3\n    >>> count_first_elements((2, 9, (5, 7), 11))\n    2\n    >>> count_first_elements((11, 15, 5, 8, (2, 3), 8))\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 7, (4, 6), 10)) == 3\n    assert candidate((2, 9, (5, 7), 11)) == 2\n    assert candidate((11, 15, 5, 8, (2, 3), 8)) == 4\n\n", "entry_point": "count_first_elements"}
{"task_id": 279, "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\" Return the nth decagonal number. A decagonal number is a figurate number that\n    extends the concept of triangular and square numbers to the decagon (a ten-sided polygon).\n    The nth decagonal number is given by the formula: n(4n - 3).\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(7)\n    175\n    >>> is_num_decagonal(10)\n    370\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3) == 27\n    assert candidate(7) == 175\n    assert candidate(10) == 370\n\n", "entry_point": "is_num_decagonal"}
{"task_id": 280, "prompt": "from typing import List\n\n\ndef sequential_search(arr: List[int], target: int) -> (bool, int):\n    \"\"\"\n    Write a function to search an element in the given array by using sequential search.\n    Returns a tuple of (True, index) if found, otherwise (False, -1).\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19], 31)\n    (True, 3)\n    >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)\n    (True, 7)\n    >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)\n    (True, 6)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)\n", "entry_point": "sequential_search"}
{"task_id": 281, "prompt": "from typing import List\n\n\ndef all_unique(elements: List[int]) -> bool:\n    \"\"\" Check if all elements in the given list are unique.\n    >>> all_unique([1, 2, 3])\n    True\n    >>> all_unique([1, 2, 1, 2])\n    False\n    >>> all_unique([1, 2, 3, 4, 5])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 2]) == False\n    assert candidate([1, 2, 3, 4, 5]) == True\n", "entry_point": "all_unique"}
{"task_id": 282, "prompt": "from typing import List\n\n\ndef sub_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Subtract elements of two lists using map and lambda function.\n    >>> sub_list([1, 2, 3], [4, 5, 6])\n    [-3, -3, -3]\n    >>> sub_list([1, 2], [3, 4])\n    [-2, -2]\n    >>> sub_list([90, 120], [50, 70])\n    [40, 50]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]\n    assert candidate([1, 2], [3, 4]) == [-2, -2]\n    assert candidate([90, 120], [50, 70]) == [40, 50]\n", "entry_point": "sub_list"}
{"task_id": 283, "prompt": "def validate(number: int) -> bool:\n    \"\"\" Check whether the frequency of each digit in the number is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(51241)\n    False\n    >>> validate(321)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1234) == True\n    assert candidate(51241) == False\n    assert candidate(321) == True\n", "entry_point": "validate"}
{"task_id": 284, "prompt": "from typing import List\n\n\ndef check_element(items: List, target: str) -> bool:\n    \"\"\" Check whether all items of a list are equal to a given string.\n    >>> check_element(['green', 'orange', 'black', 'white'], 'blue')\n    False\n    >>> check_element(['green', 'green', 'green', 'green'], 'green')\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['green', 'orange', 'black', 'white'], 'blue') == False\n    assert candidate([1, 2, 3, 4], 7) == False\n    assert candidate(['green', 'green', 'green', 'green'], 'green') == True\n\n", "entry_point": "check_element"}
{"task_id": 285, "prompt": "import re\n\ndef text_match_two_three(text: str) -> str:\n    \"\"\" Matches a string that has an a followed by two to three 'b'.\n    >>> text_match_two_three(\"ac\")\n    'Not matched!'\n    >>> text_match_two_three(\"abbbba\")\n    'Found a match!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"ac\") == 'Not matched!'\n    assert candidate(\"dc\") == 'Not matched!'\n    assert candidate(\"abbbba\") == 'Found a match!'\n", "entry_point": "text_match_two_three"}
{"task_id": 286, "prompt": "from typing import List\n\n\ndef max_sub_array_sum_repeated(arr: List[int], n: int, k: int) -> int:\n    \"\"\" Find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n    30\n    >>> max_sub_array_sum_repeated([-1, 10, 20], 3, 2)\n    59\n    >>> max_sub_array_sum_repeated([-1, -2, -3], 3, 3)\n    -1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 20, -30, -1], 4, 3) == 30\n    assert candidate([-1, 10, 20], 3, 2) == 59\n    assert candidate([-1, -2, -3], 3, 3) == -1\n\n", "entry_point": "max_sub_array_sum_repeated"}
{"task_id": 287, "prompt": "def square_Sum(n: int) -> int:\n    \"\"\" Find the sum of squares of first n even natural numbers.\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    56\n    >>> square_Sum(4)\n    120\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 20\n    assert candidate(3) == 56\n    assert candidate(4) == 120\n", "entry_point": "square_Sum"}
{"task_id": 288, "prompt": "from typing import List\n\n\ndef modular_inverse(arr: List[int], length: int, p: int) -> int:\n    \"\"\" Count array elements having modular inverse under given prime number p equal to itself.\n    >>> modular_inverse([1, 6, 4, 5], 4, 7)\n    2\n    >>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n    3\n    >>> modular_inverse([2, 3, 4, 5], 4, 6)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 6, 4, 5], 4, 7) == 2\n    assert candidate([1, 3, 8, 12, 12], 5, 13) == 3\n    assert candidate([2, 3, 4, 5], 4, 6) == 1\n", "entry_point": "modular_inverse"}
{"task_id": 289, "prompt": "def odd_Days(year: int) -> int:\n    \"\"\" Calculate the number of odd days in a given year.\n    >>> odd_Days(100)\n    5\n    >>> odd_Days(50)\n    6\n    >>> odd_Days(75)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(100) == 5\n    assert candidate(50) == 6\n    assert candidate(75) == 2\n", "entry_point": "odd_Days"}
{"task_id": 290, "prompt": "from typing import List\n\n\ndef max_length(lists: List[List[int]]) -> tuple:\n    \"\"\" Find the list with the maximum length from a list of lists and return a tuple\n    containing the length of the longest list and the longest list itself.\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length([[1], [5, 7], [10, 12, 14, 15]])\n    (4, [10, 12, 14, 15])\n    >>> max_length([[5], [15, 20, 25]])\n    (3, [15, 20, 25])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25])\n\n", "entry_point": "max_length"}
{"task_id": 291, "prompt": "from typing import List\n\n\ndef count_no_of_ways(n: int, k: int) -> int:\n    \"\"\" Find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color\n    for the given fence with n posts and k colors.\n    >>> count_no_of_ways(2, 4)\n    16\n    >>> count_no_of_ways(3, 2)\n    6\n    >>> count_no_of_ways(4, 4)\n    228\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 4) == 16\n    assert candidate(3, 2) == 6\n    assert candidate(4, 4) == 228\n\n", "entry_point": "count_no_of_ways"}
{"task_id": 292, "prompt": "def find(a: int, b: int) -> int:\n    \"\"\" Return the quotient of two numbers.\n    >>> find(10, 3)\n    3\n    >>> find(4, 2)\n    2\n    >>> find(20, 5)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 3) == 3\n    assert candidate(4, 2) == 2\n    assert candidate(20, 5) == 4\n", "entry_point": "find"}
{"task_id": 293, "prompt": "from typing import List\n\n\ndef otherside_rightangle(a: float, b: float) -> float:\n    \"\"\" Given the lengths of two sides of a right-angled triangle, return the length of the third side.\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    >>> otherside_rightangle(3, 4)\n    5.0\n    >>> otherside_rightangle(7, 15)\n    16.55294535724685\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(7, 8) == 10.63014581273465\n    assert candidate(3, 4) == 5\n    assert candidate(7, 15) == 16.55294535724685\n\n", "entry_point": "otherside_rightangle"}
{"task_id": 294, "prompt": "from typing import List, Union\n\n\ndef max_val(items: List[Union[int, str]]) -> int:\n    \"\"\" Find the maximum integer value in a given heterogeneous list containing both integers and strings.\n    >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val(['Python', 15, 20, 25])\n    25\n    >>> max_val(['Python', 30, 20, 40, 50, 'version'])\n    50\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 5\n    assert candidate(['Python', 15, 20, 25]) == 25\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 50\n\n", "entry_point": "max_val"}
{"task_id": 295, "prompt": "def sum_div(number: int) -> int:\n    \"\"\" Return the sum of all divisors of a number.\n    >>> sum_div(8)\n    7\n    >>> sum_div(12)\n    16\n    >>> sum_div(7)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(8) == 7\n    assert candidate(12) == 16\n    assert candidate(7) == 1\n\n", "entry_point": "sum_div"}
{"task_id": 296, "prompt": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int], n: int) -> int:\n    \"\"\" Count the number of inversions in an array.\n    >>> get_Inv_Count([1,20,6,4,5],5)\n    5\n    >>> get_Inv_Count([1,2,1],3)\n    1\n    >>> get_Inv_Count([1,2,5,6,1],5)\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,20,6,4,5],5) == 5\n    assert candidate([1,2,1],3) == 1\n    assert candidate([1,2,5,6,1],5) == 3\n", "entry_point": "get_Inv_Count"}
{"task_id": 297, "prompt": "from typing import List\n\n\ndef flatten_list(nested_list: List) -> List:\n    \"\"\" Write a function to flatten a given nested list structure.\n    >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    >>> flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n", "entry_point": "flatten_list"}
{"task_id": 298, "prompt": "from typing import List\n\n\ndef intersection_nested_lists(main_list: List, nested_lists: List[List]) -> List[List]:\n    \"\"\" Find the nested list elements which are present in another list.\n    >>> intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    [[12], [7, 11], [1, 5, 8]]\n    >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n    [[], []]\n    >>> intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])\n    [['john'], ['john'], ['john'], []]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n    assert candidate([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n    assert candidate(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]\n", "entry_point": "intersection_nested_lists"}
{"task_id": 299, "prompt": "from typing import List, Tuple\n\n\ndef max_aggregate(records: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\" Calculate the maximum aggregate score for a name from the list of tuples.\n    >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n    ('Juan Whelan', 212)\n    >>> max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])\n    ('Juan Whelan', 72)\n    >>> max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])\n    ('Sabah Colley', 70)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)\n    assert candidate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)]) == ('Juan Whelan', 72)\n    assert candidate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)]) == ('Sabah Colley', 70)\n", "entry_point": "max_aggregate"}
{"task_id": 300, "prompt": "def count_binary_seq(n: int) -> float:\n    \"\"\" Find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    6.0\n    >>> count_binary_seq(3)\n    20.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1) == 2.0\n    assert candidate(2) == 6.0\n    assert candidate(3) == 20.0\n\n", "entry_point": "count_binary_seq"}
{"task_id": 301, "prompt": "from typing import Dict, Any\n\n\ndef dict_depth(d: Dict[Any, Any]) -> int:\n    \"\"\" Find the maximum depth of a dictionary.\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c':'python'}})\n    2\n    >>> dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'a':1, 'b': {'c': {'d': {}}}}) == 4\n    assert candidate({'a':1, 'b': {'c':'python'}}) == 2\n    assert candidate({1: 'Sun', 2: {3: {4:'Mon'}}}) == 3\n\n", "entry_point": "dict_depth"}
{"task_id": 302, "prompt": "def set_Bit_Number(n: int) -> int:\n    \"\"\" Find the most significant bit number which is also a set bit.\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(10)\n    8\n    >>> set_Bit_Number(18)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6) == 4\n    assert candidate(10) == 8\n    assert candidate(18) == 16\n", "entry_point": "set_Bit_Number"}
{"task_id": 303, "prompt": "def solve(arr: List[int], n: int) -> bool:\n    \"\"\" Check whether the count of inversion of two types are same or not.\n    >>> solve([1,0,2], 3)\n    True\n    >>> solve([1,2,0], 3)\n    False\n    >>> solve([1,2,1], 3)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,0,2], 3) == True\n    assert candidate([1,2,0], 3) == False\n    assert candidate([1,2,1], 3) == True\n", "entry_point": "solve"}
{"task_id": 304, "prompt": "from typing import List\n\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\" Find element at a given index after a number of rotations.\n    >>> find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1)\n    3\n    >>> find_Element([1,2,3,4],[[0,1],[0,2]],1,2)\n    3\n    >>> find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n    assert candidate([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n    assert candidate([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1\n", "entry_point": "find_Element"}
{"task_id": 305, "prompt": "from typing import List, Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\" Find the first two words starting with 'p' from a given list of words.\n    >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n    ('Python', 'PHP')\n    >>> start_withp([\"Python Programming\",\"Java Programming\"])\n    ('Python', 'Programming')\n    >>> start_withp([\"Pqrst Pqr\",\"qrstuv\"])\n    ('Pqrst', 'Pqr')\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n    assert candidate([\"Python Programming\",\"Java Programming\"]) == ('Python', 'Programming')\n    assert candidate([\"Pqrst Pqr\",\"qrstuv\"]) == ('Pqrst', 'Pqr')\n\n", "entry_point": "start_withp"}
{"task_id": 306, "prompt": "from typing import List\n\n\ndef max_sum_increasing_subseq(arr: List[int], n: int, i: int, k: int) -> int:\n    \"\"\" Find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n    11\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5)\n    7\n    >>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n    71\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\n", "entry_point": "max_sum_increasing_subseq"}
{"task_id": 307, "prompt": "from typing import Tuple, Any\n\n\ndef colon_tuplex(tup: Tuple[Any, ...], index: int, value: Any) -> Tuple[Any, ...]:\n    \"\"\" Insert a value at a given index in a tuple and return the new tuple.\n    >>> colon_tuplex((\"HELLO\", 5, [], True), 2, 50)\n    ('HELLO', 5, [50], True)\n    >>> colon_tuplex((\"HELLO\", 5, [], True), 2, 100)\n    ('HELLO', 5, [100], True)\n    >>> colon_tuplex((\"HELLO\", 5, [], True), 2, 500)\n    ('HELLO', 5, [500], True)\n    \"\"\n", "test": "def check(candidate):\n    assert candidate((\"HELLO\", 5, [], True), 2, 50) == (\"HELLO\", 5, [50], True)\n    assert candidate((\"HELLO\", 5, [], True), 2, 100) == (\"HELLO\", 5, [100], True)\n    assert candidate((\"HELLO\", 5, [], True), 2, 500) == (\"HELLO\", 5, [500], True)\n\n", "entry_point": "colon_tuplex"}
{"task_id": 308, "prompt": "from typing import List\n\n\ndef large_product(list1: List[int], list2: List[int], n: int) -> List[int]:\n    \"\"\" Find the specified number of largest products from two given lists.\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n    [60, 54, 50]\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n    [60, 54, 50, 48]\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n    [60, 54, 50, 48, 45]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4) == [60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5) == [60, 54, 50, 48, 45]\n", "entry_point": "large_product"}
{"task_id": 309, "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\" Return the maximum of two numbers.\n    >>> maximum(5,10)\n    10\n    >>> maximum(-1,-2)\n    -1\n    >>> maximum(9,7)\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 10) == 10\n    assert candidate(-1, -2) == -1\n    assert candidate(9, 7) == 9\n", "entry_point": "maximum"}
{"task_id": 310, "prompt": "def string_to_tuple(s: str) -> tuple:\n    \"\"\" Convert a given string to a tuple.\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_to_tuple(\"item1\")\n    ('i', 't', 'e', 'm', '1')\n    >>> string_to_tuple(\"15.10\")\n    ('1', '5', '.', '1', '0')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    assert candidate(\"item1\")==('i', 't', 'e', 'm', '1')\n    assert candidate(\"15.10\")==('1', '5', '.', '1', '0')\n", "entry_point": "string_to_tuple"}
{"task_id": 311, "prompt": "from typing import List\n\n\ndef set_left_most_unset_bit(n: int) -> int:\n    \"\"\" Set the left most unset bit in the binary representation of n and return the new number.\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(12)\n    14\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 14\n    assert candidate(12) == 14\n    assert candidate(15) == 15\n\n", "entry_point": "set_left_most_unset_bit"}
{"task_id": 312, "prompt": "from typing import Tuple\n\n\ndef volume_cone(radius: float, height: float) -> float:\n    \"\"\" Calculate the volume of a cone given its radius and height.\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(10, 15)\n    1570.7963267948965\n    >>> volume_cone(19, 17)\n    6426.651371693521\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 12) == 314.15926535897927\n    assert candidate(10, 15) == 1570.7963267948965\n    assert candidate(19, 17) == 6426.651371693521\n\n", "entry_point": "volume_cone"}
{"task_id": 313, "prompt": "def pos_nos(numbers: List[int]) -> List[int]:\n    \"\"\" Return a list of positive numbers from the given list.\n    >>> pos_nos([-1, -2, 1, 2])\n    [1, 2]\n    >>> pos_nos([3, 4, -5])\n    [3, 4]\n    >>> pos_nos([-2, -3, 1])\n    [1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-1, -2, 1, 2]) == [1, 2]\n    assert candidate([3, 4, -5]) == [3, 4]\n    assert candidate([-2, -3, 1]) == [1]\n", "entry_point": "pos_nos"}
{"task_id": 314, "prompt": "from typing import List\n\n\ndef max_sum_rectangular_grid(grid: List[List[int]], n: int) -> int:\n    \"\"\" Find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n    >>> max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3)\n    7\n    >>> max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5)\n    24\n    >>> max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5)\n    81\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n    assert candidate([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n    assert candidate([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81\n", "entry_point": "max_sum_rectangular_grid"}
{"task_id": 315, "prompt": "def find_Max_Len_Even(sentence: str) -> str:\n    \"\"\" Find the first maximum length of even word in a given sentence.\n    >>> find_Max_Len_Even(\"python language\")\n    'language'\n    >>> find_Max_Len_Even(\"maximum even length\")\n    'length'\n    >>> find_Max_Len_Even(\"eve\")\n    '-1'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python language\") == \"language\"\n    assert candidate(\"maximum even length\") == \"length\"\n    assert candidate(\"eve\") == \"-1\"\n\n", "entry_point": "find_Max_Len_Even"}
{"task_id": 316, "prompt": "from typing import List\n\n\ndef find_last_occurrence(arr: List[int], target: int) -> int:\n    \"\"\" Find the index of the last occurrence of a given number in a sorted array.\n    >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    3\n    >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n    9\n    >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n    assert candidate([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n    assert candidate([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6\n", "entry_point": "find_last_occurrence"}
{"task_id": 317, "prompt": "from typing import List, Union\n\n\ndef modified_encode(elements: Union[List[int], str]) -> List[Union[int, List[int], str]]:\n    \"\"\" Modify the run-length encoding such that if an element has no duplicates it is kept as is,\n    and only elements with duplicates are converted to [count, element] form.\n    >>> modified_encode([1,1,2,3,4,4,5,1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    >>> modified_encode('automatically')\n    ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    >>> modified_encode('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n    assert candidate('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    assert candidate('python')==['p', 'y', 't', 'h', 'o', 'n']\n", "entry_point": "modified_encode"}
{"task_id": 318, "prompt": "def max_volume(sum_of_sides: int) -> int:\n    \"\"\" Given the sum of all sides of a cuboid, find the maximum volume it can have.\n    >>> max_volume(8)\n    18\n    >>> max_volume(4)\n    2\n    >>> max_volume(1)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(8) == 18\n    assert candidate(4) == 2\n    assert candidate(1) == 0\n", "entry_point": "max_volume"}
{"task_id": 319, "prompt": "import re\n\n\ndef find_long_word(text: str) -> list:\n    \"\"\" Find all five characters long words in the given string using regex.\n    >>> find_long_word('Please move back to strem')\n    ['strem']\n    >>> find_long_word('4K Ultra HD streaming player')\n    ['Ultra']\n    >>> find_long_word('Streaming Media Player')\n    ['Media']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('Please move back to strem') == ['strem']\n    assert candidate('4K Ultra HD streaming player') == ['Ultra']\n    assert candidate('Streaming Media Player') == ['Media']\n", "entry_point": "find_long_word"}
{"task_id": 320, "prompt": "def sum_difference(n: int) -> int:\n    \"\"\" Calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    >>> sum_difference(12)\n    5434\n    >>> sum_difference(20)\n    41230\n    >>> sum_difference(54)\n    2151270\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 5434\n    assert candidate(20) == 41230\n    assert candidate(54) == 2151270\n", "entry_point": "sum_difference"}
{"task_id": 321, "prompt": "def find_demlo(number: str) -> str:\n    \"\"\" Find the Demlo number for the given number.\n    >>> find_demlo(\"111111\")\n    '12345654321'\n    >>> find_demlo(\"1111\")\n    '1234321'\n    >>> find_demlo(\"13333122222\")\n    '123456789101110987654321'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"111111\") == '12345654321'\n    assert candidate(\"1111\") == '1234321'\n    assert candidate(\"13333122222\") == '123456789101110987654321'\n", "entry_point": "find_demlo"}
{"task_id": 322, "prompt": "from typing import List\n\n\ndef position_min(numbers: List[int]) -> List[int]:\n    \"\"\" Find all index positions of the minimum values in a given list.\n    >>> position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])\n    [3, 11]\n    >>> position_min([1,2,2,2,4,4,4,5,5,5,5])\n    [0]\n    >>> position_min([2,1,5,6,8,3,4,9,10,11,8,12])\n    [1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12,33,23,10,67,89,45,667,23,12,11,10,54]) == [3,11]\n    assert candidate([1,2,2,2,4,4,4,5,5,5,5]) == [0]\n    assert candidate([2,1,5,6,8,3,4,9,10,11,8,12]) == [1]\n", "entry_point": "position_min"}
{"task_id": 323, "prompt": "from typing import List\n\n\ndef re_arrange(arr: List[int], n: int) -> List[int]:\n    \"\"\" Write a function to re-arrange the given array in alternating positive and negative items.\n    >>> re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)\n    [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    >>> re_arrange([1, 2, 3, -4, -1, 4], 6)\n    [-4, 1, -1, 2, 3, 4]\n    >>> re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)\n    [-4, 4, -3, 7, -9, 9, 77, 5]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n    assert candidate([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n    assert candidate([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]\n", "entry_point": "re_arrange"}
{"task_id": 324, "prompt": "from typing import Tuple\n\n\ndef sum_of_alternates(numbers: Tuple[int, ...]) -> Tuple[int, int]:\n    \"\"\" Extract the sum of alternate chains of tuples.\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    >>> sum_of_alternates((1, 2, 3, 4, 5))\n    (6, 9)\n    >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n    (21, 18)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((5, 6, 3, 6, 10, 34)) == (46, 18)\n    assert candidate((1, 2, 3, 4, 5)) == (6, 9)\n    assert candidate((6, 7, 8, 9, 4, 5)) == (21, 18)\n", "entry_point": "sum_of_alternates"}
{"task_id": 325, "prompt": "def get_Min_Squares(n: int) -> int:\n    \"\"\" Find the minimum number of squares whose sum equals the given number.\n    >>> get_Min_Squares(6)\n    3\n    >>> get_Min_Squares(2)\n    2\n    >>> get_Min_Squares(4)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6) == 3\n    assert candidate(2) == 2\n    assert candidate(4) == 1\n", "entry_point": "get_Min_Squares"}
{"task_id": 326, "prompt": "from typing import List\n\n\ndef most_occurrences(strings: List[str]) -> str:\n    \"\"\" Find the word with the most number of occurrences in the given list of strings.\n    >>> most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"])\n    'UTS'\n    >>> most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"])\n    'year'\n    >>> most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"])\n    'can'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"]) == 'UTS'\n    assert candidate([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"]) == 'year'\n    assert candidate([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"]) == 'can'\n\n", "entry_point": "most_occurrences"}
{"task_id": 327, "prompt": "def check_isosceles(a: int, b: int, c: int) -> bool:\n    \"\"\" Check if the triangle with sides a, b, and c is isosceles or not.\n    >>> check_isosceles(6, 8, 12)\n    False\n    >>> check_isosceles(6, 6, 12)\n    True\n    >>> check_isosceles(6, 16, 20)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(6, 8, 12) == False\n    assert candidate(6, 6, 12) == True\n    assert candidate(6, 16, 20) == False\n\n", "entry_point": "check_isosceles"}
{"task_id": 328, "prompt": "from typing import List\n\n\ndef rotate_left(lst: List[int], k: int, n: int) -> List[int]:\n    \"\"\" Rotate the given list 'lst' to the left by 'k' positions and repeat this operation 'n' times.\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n    [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n    [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n    [6, 7, 8, 9, 10, 1, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4) == [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2) == [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2) == [6, 7, 8, 9, 10, 1, 2]\n", "entry_point": "rotate_left"}
{"task_id": 329, "prompt": "from typing import List\n\n\ndef neg_count(numbers: List[int]) -> int:\n    \"\"\" Count the number of negative numbers in the given list.\n    >>> neg_count([-1, -2, 3, -4, -5])\n    4\n    >>> neg_count([1, 2, 3])\n    0\n    >>> neg_count([1, 2, -3, -10, 20])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-1, -2, 3, -4, -5]) == 4\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([1, 2, -3, -10, 20]) == 2\n\n", "entry_point": "neg_count"}
{"task_id": 330, "prompt": "import re\n\n\ndef find_char(s: str) -> list:\n    \"\"\" Find all three, four, five characters long words in the given string.\n    >>> find_char('For the four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    >>> find_char('Certain service are subject to change MSR')\n    ['are', 'MSR']\n    >>> find_char('Third party legal desclaimers')\n    ['Third', 'party', 'legal']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n    assert candidate('Certain service are subject to change MSR') == ['are', 'MSR']\n    assert candidate('Third party legal desclaimers') == ['Third', 'party', 'legal']\n", "entry_point": "find_char"}
{"task_id": 331, "prompt": "def count_unset_bits(number: int) -> int:\n    \"\"\" Count the number of unset (0) bits in the binary representation of a given number.\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(6)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 1\n    assert candidate(4) == 2\n    assert candidate(6) == 1\n", "entry_point": "count_unset_bits"}
{"task_id": 332, "prompt": "from typing import Dict\n\n\ndef char_frequency(s: str) -> Dict[str, int]:\n    \"\"\" Count character frequency of a given string.\n    >>> char_frequency('python')\n    {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    >>> char_frequency('program')\n    {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    >>> char_frequency('language')\n    {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    assert candidate('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    assert candidate('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n", "entry_point": "char_frequency"}
{"task_id": 333, "prompt": "from typing import List\n\n\ndef Sort(sublist: List[List]) -> List[List]:\n    \"\"\" Write a python function to sort a list according to the second element in sublist.\n    >>> Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n    [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    >>> Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])\n    [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    >>> Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])\n    [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    assert candidate([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    assert candidate([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n", "entry_point": "Sort"}
{"task_id": 334, "prompt": "def check_Validity(a: int, b: int, c: int) -> bool:\n    \"\"\" Check whether a triangle is valid or not given its sides.\n    >>> check_Validity(1, 2, 3)\n    False\n    >>> check_Validity(7, 10, 5)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 2, 3) == False\n    assert candidate(2, 3, 5) == False\n    assert candidate(7, 10, 5) == True\n", "entry_point": "check_Validity"}
{"task_id": 335, "prompt": "from typing import List\n\n\ndef ap_sum(first_term: int, last_term: int, number_of_terms: int) -> int:\n    \"\"\" Calculate the sum of an arithmetic progression given the first term, last term, and number of terms.\n    >>> ap_sum(1, 5, 2)\n    25\n    >>> ap_sum(2, 6, 4)\n    72\n    >>> ap_sum(1, 4, 5)\n    34\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 5, 2) == 25\n    assert candidate(2, 6, 4) == 72\n    assert candidate(1, 4, 5) == 34\n\n", "entry_point": "ap_sum"}
{"task_id": 336, "prompt": "def check_monthnum(month: str) -> bool:\n    \"\"\" Check whether the given month name contains 28 days or not.\n    >>> check_monthnum(\"February\")\n    True\n    >>> check_monthnum(\"January\")\n    False\n    >>> check_monthnum(\"March\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"February\") == True\n    assert candidate(\"January\") == False\n    assert candidate(\"March\") == False\n", "entry_point": "check_monthnum"}
{"task_id": 337, "prompt": "import re\n\ndef text_match_word(text: str) -> str:\n    \"\"\" Matches a word at the end of a string, with optional punctuation.\n    >>> text_match_word(\"python.\")\n    'Found a match!'\n    >>> text_match_word(\"  lang  .\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python.\") == 'Found a match!'\n    assert candidate(\"python.\") == 'Found a match!'\n    assert candidate(\"  lang  .\") == 'Not matched!'\n\n", "entry_point": "text_match_word"}
{"task_id": 338, "prompt": "from typing import List\n\n\ndef count_Substring_With_Equal_Ends(s: str) -> int:\n    \"\"\" Count the number of substrings with the same first and last characters.\n    >>> count_Substring_With_Equal_Ends('aba')\n    4\n    >>> count_Substring_With_Equal_Ends('abcab')\n    7\n    >>> count_Substring_With_Equal_Ends('abc')\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('aba') == 4\n    assert candidate('abcab') == 7\n    assert candidate('abc') == 3\n\n", "entry_point": "count_Substring_With_Equal_Ends"}
{"task_id": 339, "prompt": "from typing import List\n\n\ndef find_Divisor(start: int, end: int) -> int:\n    \"\"\" Find the maximum occurring divisor in the interval [start, end].\n    >>> find_Divisor(2, 2)\n    2\n    >>> find_Divisor(2, 5)\n    2\n    >>> find_Divisor(5, 10)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 2) == 2\n    assert candidate(2, 5) == 2\n    assert candidate(5, 10) == 2\n\n", "entry_point": "find_Divisor"}
{"task_id": 340, "prompt": "from typing import List\n\n\ndef sum_three_smallest_nums(numbers: List[int]) -> int:\n    \"\"\" Find the sum of the three lowest positive numbers from a given list of numbers.\n    >>> sum_three_smallest_nums([10,20,30,40,50,60,7])\n    37\n    >>> sum_three_smallest_nums([1,2,3,4,5])\n    6\n    >>> sum_three_smallest_nums([0,1,2,3,4,5])\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10,20,30,40,50,60,7]) == 37\n    assert candidate([1,2,3,4,5]) == 6\n    assert candidate([0,1,2,3,4,5]) == 6\n\n", "entry_point": "sum_three_smallest_nums"}
{"task_id": 341, "prompt": "def set_to_tuple(input_set: set) -> tuple:\n    \"\"\" Convert the given set into ordered tuples.\n    >>> set_to_tuple({1, 2, 3, 4, 5})\n    (1, 2, 3, 4, 5)\n    >>> set_to_tuple({6, 7, 8, 9, 10, 11})\n    (6, 7, 8, 9, 10, 11)\n    >>> set_to_tuple({12, 13, 14, 15, 16})\n    (12, 13, 14, 15, 16)\n    \"\"\n", "test": "def check(candidate):\n    assert candidate({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n    assert candidate({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n    assert candidate({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)\n", "entry_point": "set_to_tuple"}
{"task_id": 342, "prompt": "from typing import List, Tuple\n\n\ndef find_minimum_range(arrays: List[List[int]]) -> Tuple[int, int]:\n    \"\"\" Find the smallest range that includes at least one element from each of the given arrays.\n    >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n    (4, 6)\n    >>> find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n    (4, 7)\n    >>> find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n    (5, 7)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n    assert candidate([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n    assert candidate([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)\n", "entry_point": "find_minimum_range"}
{"task_id": 343, "prompt": "def dig_let(s: str) -> (int, int):\n    \"\"\" Calculate the number of digits and letters in a string.\n    >>> dig_let(\"python\")\n    (6,0)\n    >>> dig_let(\"program\")\n    (7,0)\n    >>> dig_let(\"python3.0\")\n    (6,2)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == (6,0)\n    assert candidate(\"program\") == (7,0)\n    assert candidate(\"python3.0\") == (6,2)\n", "entry_point": "dig_let"}
{"task_id": 344, "prompt": "def count_Odd_Squares(start: int, end: int) -> int:\n    \"\"\" Find the number of elements with odd factors in a given range.\n    >>> count_Odd_Squares(5,100)\n    8\n    >>> count_Odd_Squares(8,65)\n    6\n    >>> count_Odd_Squares(2,5)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5,100) == 8\n    assert candidate(8,65) == 6\n    assert candidate(2,5) == 1\n", "entry_point": "count_Odd_Squares"}
{"task_id": 345, "prompt": "from typing import List\n\n\ndef diff_consecutivenums(numbers: List[int]) -> List[int]:\n    \"\"\" Find the difference between two consecutive numbers in a given list.\n    >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n    [0, 2, 1, 0, 1, 1, 1]\n    >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n    [1, 3, 1, -3, 4]\n    >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n    [1, 1, 1, 1, 0, 0, 0, 1, 2]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7]) == [0, 2, 1, 0, 1, 1, 1]\n    assert candidate([4, 5, 8, 9, 6, 10]) == [1, 3, 1, -3, 4]\n    assert candidate([0, 1, 2, 3, 4, 4, 4, 4, 5, 7]) == [1, 1, 1, 1, 0, 0, 0, 1, 2]\n", "entry_point": "diff_consecutivenums"}
{"task_id": 346, "prompt": "from typing import List\n\n\ndef entringer_number(n: int, k: int) -> int:\n    \"\"\" Find the Entringer number, which is the number of permutations of the first n natural numbers that have exactly k ascents, where an ascent is a position where the following number is greater than the previous number.\n    >>> entringer_number(4, 3)\n    5\n    >>> entringer_number(4, 2)\n    4\n    >>> entringer_number(3, 1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4, 3) == 5\n    assert candidate(4, 2) == 4\n    assert candidate(3, 1) == 1\n\n", "entry_point": "entringer_number"}
{"task_id": 347, "prompt": "def count_Squares(length: int, width: int) -> int:\n    \"\"\" Count the number of squares in a rectangle of given length and width.\n    >>> count_Squares(4,3)\n    20\n    >>> count_Squares(1,2)\n    2\n    >>> count_Squares(2,2)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4,3) == 20\n    assert candidate(1,2) == 2\n    assert candidate(2,2) == 5\n\n", "entry_point": "count_Squares"}
{"task_id": 348, "prompt": "from typing import List\n\n\ndef find_ways(length: int) -> int:\n    \"\"\" Count sequences of given length having non-negative prefix sums that can be generated by given values.\n    >>> find_ways(4)\n    2\n    >>> find_ways(6)\n    5\n    >>> find_ways(8)\n    14\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n    assert candidate(8) == 14\n\n", "entry_point": "find_ways"}
{"task_id": 349, "prompt": "def is_binary_string(s: str) -> str:\n    \"\"\" Check whether the given string is a binary string or not.\n    A binary string is a string that contains only characters 0 and 1.\n    >>> is_binary_string(\"01010101010\")\n    'Yes'\n    >>> is_binary_string(\"name0\")\n    'No'\n    >>> is_binary_string(\"101\")\n    'Yes'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"01010101010\") == \"Yes\"\n    assert candidate(\"name0\") == \"No\"\n    assert candidate(\"101\") == \"Yes\"\n", "entry_point": "is_binary_string"}
{"task_id": 350, "prompt": "def minimum_Length(s: str) -> int:\n    \"\"\" Minimize the length of the string by removing occurrences of only one character.\n    >>> minimum_Length(\"mnm\")\n    1\n    >>> minimum_Length(\"abcda\")\n    3\n    >>> minimum_Length(\"abcb\")\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"mnm\") == 1\n    assert candidate(\"abcda\") == 3\n    assert candidate(\"abcb\") == 2\n", "entry_point": "minimum_Length"}
{"task_id": 351, "prompt": "from typing import List\n\n\ndef first_Element(arr: List[int], n: int, k: int) -> int:\n    \"\"\" Find the first element occurring k times in a given array.\n    >>> first_Element([0,1,2,3,4,5], 6, 1)\n    0\n    >>> first_Element([1,2,1,3,4], 5, 2)\n    1\n    >>> first_Element([2,3,4,3,5,7,1,2,3,5], 10, 2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0,1,2,3,4,5], 6, 1) == 0\n    assert candidate([1,2,1,3,4], 5, 2) == 1\n    assert candidate([2,3,4,3,5,7,1,2,3,5], 10, 2) == 2\n\n", "entry_point": "first_Element"}
{"task_id": 352, "prompt": "def unique_Characters(s: str) -> bool:\n    \"\"\" Check whether all the characters in the given string are unique.\n    >>> unique_Characters('aba')\n    False\n    >>> unique_Characters('abc')\n    True\n    >>> unique_Characters('abab')\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('aba') == False\n    assert candidate('abc') == True\n    assert candidate('abab') == False\n", "entry_point": "unique_Characters"}
{"task_id": 353, "prompt": "def remove_column(matrix: List[List[int]], column: int) -> List[List[int]]:\n    \"\"\" Remove the specified column from a given nested list.\n    >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n    [[2, 3], [4, 5], [1, 1]]\n    >>> remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)\n    [[1, 2], [-2, 4], [1, -1]]\n    >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n    [[3], [7], [3], [15, 17], [7], [11]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0) == [[2, 3], [4, 5], [1, 1]]\n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2) == [[1, 2], [-2, 4], [1, -1]]\n    assert candidate([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0) == [[3], [7], [3], [15, 17], [7], [11]]\n", "entry_point": "remove_column"}
{"task_id": 354, "prompt": "from typing import List\n\n\ndef tn_ap(first_term: int, difference: int, n: int) -> int:\n    \"\"\" Find the n-th term of an arithmetic progression.\n    >>> tn_ap(1, 5, 2)\n    9\n    >>> tn_ap(2, 6, 4)\n    22\n    >>> tn_ap(1, 4, 5)\n    16\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 5, 2) == 9\n    assert candidate(2, 6, 4) == 22\n    assert candidate(1, 4, 5) == 16\n\n", "entry_point": "tn_ap"}
{"task_id": 355, "prompt": "from typing import List\n\n\ndef count_Rectangles(radius: float) -> int:\n    \"\"\" Count the number of rectangles that can fit inside a circle of given radius.\n    >>> count_Rectangles(2)\n    8\n    >>> count_Rectangles(1)\n    1\n    >>> count_Rectangles(0)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 8\n    assert candidate(1) == 1\n    assert candidate(0) == 0\n\n", "entry_point": "count_Rectangles"}
{"task_id": 356, "prompt": "def find_angle(angle1: int, angle2: int) -> int:\n    \"\"\" Given two angles of a triangle, calculate the third angle.\n    >>> find_angle(47, 89)\n    44\n    >>> find_angle(45, 95)\n    40\n    >>> find_angle(50, 40)\n    90\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(47, 89) == 44\n    assert candidate(45, 95) == 40\n    assert candidate(50, 40) == 90\n", "entry_point": "find_angle"}
{"task_id": 357, "prompt": "from typing import List, Tuple\n\n\ndef find_max(records: List[Tuple[int, int]]) -> int:\n    \"\"\" Find the maximum element among all the elements of the given tuple records.\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    >>> find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n    11\n    >>> find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n    12\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12\n\n", "entry_point": "find_max"}
{"task_id": 358, "prompt": "from typing import List\n\n\ndef moddiv_list(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\" Find modulo division of two lists using map and lambda function.\n    >>> moddiv_list([4,5,6],[1, 2, 3])\n    [0, 1, 0]\n    >>> moddiv_list([3,2],[1,4])\n    [0, 2]\n    >>> moddiv_list([90,120],[50,70])\n    [40, 50]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([4,5,6],[1, 2, 3])==[0, 1, 0]\n    assert candidate([3,2],[1,4])==[0, 2]\n    assert candidate([90,120],[50,70])==[40, 50]\n", "entry_point": "moddiv_list"}
{"task_id": 359, "prompt": "def Check_Solution(a: int, b: int, c: int) -> str:\n    \"\"\" Check whether one root of the quadratic equation ax^2 + bx + c = 0 is twice of the other or not.\n    >>> Check_Solution(1, 3, 2)\n    'Yes'\n    >>> Check_Solution(1, 2, 3)\n    'No'\n    >>> Check_Solution(1, -5, 6)\n    'No'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 3, 2) == 'Yes'\n    assert candidate(1, 2, 3) == 'No'\n    assert candidate(1, -5, 6) == 'No'\n", "entry_point": "Check_Solution"}
{"task_id": 360, "prompt": "def get_carol(n: int) -> int:\n    \"\"\" Find the n\u2019th Carol number.\n    Carol numbers are of the form: (2^n - 1)^2 - 2.\n    >>> get_carol(2)\n    7\n    >>> get_carol(4)\n    223\n    >>> get_carol(5)\n    959\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 7\n    assert candidate(4) == 223\n    assert candidate(5) == 959\n", "entry_point": "get_carol"}
{"task_id": 361, "prompt": "from typing import List\n\n\ndef remove_empty(lists: List[list]) -> List[list]:\n    \"\"\" Remove all empty lists from a given list of lists.\n    >>> remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])\n    ['Red', 'Green', [1, 2], 'Blue']\n    >>> remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])\n    ['Green', [1, 2], 'Blue']\n    >>> remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])\n    ['Python', 'programming', 'language']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n    assert candidate([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==['Green', [1, 2], 'Blue']\n    assert candidate([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']\n\n", "entry_point": "remove_empty"}
{"task_id": 362, "prompt": "from typing import List\n\n\ndef max_occurrences(numbers: List[int]) -> int:\n    \"\"\" Find the item with maximum occurrences in a given list.\n    >>> max_occurrences([1,2,3,1,2,3,12,4,2])\n    2\n    >>> max_occurrences([1,2,6,7,0,1,0,1,0])\n    1\n    >>> max_occurrences([1,2,3,1,2,4,1])\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,1,2,3,12,4,2]) == 2\n    assert candidate([1,2,6,7,0,1,0,1,0]) == 1\n    assert candidate([1,2,3,1,2,4,1]) == 1\n", "entry_point": "max_occurrences"}
{"task_id": 363, "prompt": "from typing import List, Tuple\n\n\ndef add_K_element(tuples: List[Tuple[int, int, int]], k: int) -> List[Tuple[int, int, int]]:\n    \"\"\" Add k to each element in the tuple.\n    >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n    [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    >>> add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n    [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    >>> add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n    [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n    \"\"\n", "test": "def check(candidate):\n    assert candidate([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    assert candidate([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    assert candidate([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n", "entry_point": "add_K_element"}
{"task_id": 364, "prompt": "def min_flip_to_make_string_alternate(s: str) -> int:\n    \"\"\" Find the number of flips required to make the given binary string a sequence of alternate characters.\n    >>> min_flip_to_make_string_alternate(\"0001010111\")\n    2\n    >>> min_flip_to_make_string_alternate(\"001\")\n    1\n    >>> min_flip_to_make_string_alternate(\"010111011\")\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"0001010111\") == 2\n    assert candidate(\"001\") == 1\n    assert candidate(\"010111011\") == 2\n", "entry_point": "min_flip_to_make_string_alternate"}
{"task_id": 365, "prompt": "def count_Digit(number: int) -> int:\n    \"\"\" Count the number of digits in the given number.\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(11223305)\n    8\n    >>> count_Digit(4123459)\n    7\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12345) == 5\n    assert candidate(11223305) == 8\n    assert candidate(4123459) == 7\n", "entry_point": "count_Digit"}
{"task_id": 366, "prompt": "def adjacent_num_product(numbers: List[int]) -> int:\n    \"\"\" Find the largest product of the pair of adjacent elements from a given list of integers.\n    >>> adjacent_num_product([1,2,3,4,5,6])\n    30\n    >>> adjacent_num_product([1,2,3,4,5])\n    20\n    >>> adjacent_num_product([2,3])\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5,6]) == 30\n    assert candidate([1,2,3,4,5]) == 20\n    assert candidate([2,3]) == 6\n", "entry_point": "adjacent_num_product"}
{"task_id": 367, "prompt": "from typing import Optional\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef is_tree_balanced(root: Optional[TreeNode]) -> bool:\n    \"\"\" Check if a binary tree is balanced. A binary tree is balanced if the depth of the two subtrees of every node never differ by more than 1.\n    >>> is_tree_balanced(root)\n    False\n    >>> is_tree_balanced(root1)\n    True\n    >>> is_tree_balanced(root2)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(root) == False\n    assert candidate(root1) == True\n    assert candidate(root2) == False\n\n", "entry_point": "is_tree_balanced"}
{"task_id": 368, "prompt": "def repeat_tuples(tup: tuple, n: int) -> tuple:\n    \"\"\" Repeat the given tuple n times.\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    >>> repeat_tuples((1, 2), 3)\n    ((1, 2), (1, 2), (1, 2))\n    >>> repeat_tuples((3, 4), 5)\n    ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n    assert candidate((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n    assert candidate((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n", "entry_point": "repeat_tuples"}
{"task_id": 369, "prompt": "def lateralsurface_cuboid(length: int, width: int, height: int) -> int:\n    \"\"\" Calculate the lateral surface area of a cuboid given its length, width, and height.\n    >>> lateralsurface_cuboid(8, 5, 6)\n    156\n    >>> lateralsurface_cuboid(7, 9, 10)\n    320\n    >>> lateralsurface_cuboid(10, 20, 30)\n    1800\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(8, 5, 6) == 156\n    assert candidate(7, 9, 10) == 320\n    assert candidate(10, 20, 30) == 1800\n", "entry_point": "lateralsurface_cuboid"}
{"task_id": 370, "prompt": "from typing import List, Tuple\n\n\ndef float_sort(items: List[Tuple[str, str]]) -> List[Tuple[str, str]]:\n    \"\"\" Sort a list of tuples by the float value of the second element in each tuple.\n    >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n    [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n    >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n    [('item3', '20'), ('item1', '15'), ('item2', '10')]\n    >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n    [('item3', '14'), ('item2', '10'), ('item1', '5')]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n    assert candidate([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')]\n    assert candidate([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')]\n", "entry_point": "float_sort"}
{"task_id": 371, "prompt": "from typing import List\n\n\ndef smallest_missing(arr: List[int], start: int, end: int) -> int:\n    \"\"\" Find the smallest missing element in a sorted array.\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n    3\n    >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n    assert candidate([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n    assert candidate([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0\n", "entry_point": "smallest_missing"}
{"task_id": 372, "prompt": "from typing import List\nimport heapq\n\ndef heap_assending(elements: List[int]) -> List[int]:\n    \"\"\" Sort a given list of elements in ascending order using heap queue algorithm.\n    >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n    [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "entry_point": "heap_assending"}
{"task_id": 373, "prompt": "def volume_cuboid(length: float, width: float, height: float) -> float:\n    \"\"\" Calculate the volume of a cuboid given its length, width, and height.\n    >>> volume_cuboid(1, 2, 3)\n    6\n    >>> volume_cuboid(5, 7, 9)\n    315\n    >>> volume_cuboid(10, 15, 21)\n    3150\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 2, 3) == 6\n    assert candidate(5, 7, 9) == 315\n    assert candidate(10, 15, 21) == 3150\n", "entry_point": "volume_cuboid"}
{"task_id": 374, "prompt": "def permute_string(s: str) -> List[str]:\n    \"\"\" Write a function to print all permutations of a given string including duplicates.\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    >>> permute_string('abc')\n    ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    >>> permute_string('abcd')\n    ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('ab')==['ab', 'ba']\n    assert candidate('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    assert candidate('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n", "entry_point": "permute_string"}
{"task_id": 375, "prompt": "def round_num(number: int, multiple: int) -> int:\n    \"\"\" Round the given number to the nearest multiple of a specific number.\n    >>> round_num(4722, 10)\n    4720\n    >>> round_num(1111, 5)\n    1110\n    >>> round_num(219, 2)\n    218\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(4722, 10) == 4720\n    assert candidate(1111, 5) == 1110\n    assert candidate(219, 2) == 218\n", "entry_point": "round_num"}
{"task_id": 376, "prompt": "from typing import Tuple\n\n\ndef remove_replica(tup: Tuple[int, ...], replacement='MSP') -> Tuple[int, ...]:\n    \"\"\" Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n    >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n    (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n    (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n    (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    assert candidate((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    assert candidate((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n", "entry_point": "remove_replica"}
{"task_id": 377, "prompt": "def remove_Char(s: str, char: str) -> str:\n    \"\"\" Remove all occurrences of a character in a given string.\n    >>> remove_Char(\"aba\", 'a')\n    'b'\n    >>> remove_Char(\"toggle\", 'g')\n    'tole'\n    >>> remove_Char(\"aabbc\", 'b')\n    'aac'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"aba\", 'a') == \"b\"\n    assert candidate(\"toggle\", 'g') == \"tole\"\n    assert candidate(\"aabbc\", 'b') == \"aac\"\n", "entry_point": "remove_Char"}
{"task_id": 378, "prompt": "from typing import List\n\n\ndef move_first(lst: List[int]) -> List[int]:\n    \"\"\" Shift the last element of the list to the first position.\n    >>> move_first([1,2,3,4])\n    [4,1,2,3]\n    >>> move_first([0,1,2,3])\n    [3,0,1,2]\n    >>> move_first([9,8,7,1])\n    [1,9,8,7]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4]) == [4,1,2,3]\n    assert candidate([0,1,2,3]) == [3,0,1,2]\n    assert candidate([9,8,7,1]) == [1,9,8,7]\n", "entry_point": "move_first"}
{"task_id": 379, "prompt": "def surfacearea_cuboid(length: int, width: int, height: int) -> int:\n    \"\"\" Calculate the surface area of a cuboid given its length, width, and height.\n    >>> surfacearea_cuboid(1, 2, 3)\n    22\n    >>> surfacearea_cuboid(5, 7, 9)\n    286\n    >>> surfacearea_cuboid(10, 15, 21)\n    1350\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 2, 3) == 22\n    assert candidate(5, 7, 9) == 286\n    assert candidate(10, 15, 21) == 1350\n\n", "entry_point": "surfacearea_cuboid"}
{"task_id": 380, "prompt": "from typing import List\n\n\ndef multi_list(rows: int, cols: int) -> List[List[int]]:\n    \"\"\" Generate a two-dimensional array where the value in each cell is the product of its row and column indices.\n    >>> multi_list(3, 4)\n    [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    >>> multi_list(5, 7)\n    [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    >>> multi_list(10, 15)\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 4) == [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    assert candidate(5, 7) == [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    assert candidate(10, 15) == [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, ", "entry_point": "ompt\": \"from typing import List\n\n\ndef multi_list(rows: int, cols: int) -> List[List[int]]:\n    \"\"\" Generate a two-dimensional array where the value in each cell is the product of its row and column indices.\n    >>> multi_list(3, 4)\n    [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    >>> multi_list(5, 7)\n    [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    >>> multi_list(10, 15)\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n    \"\"\"\n\",\n  \"test\": "}
{"task_id": 381, "prompt": "from typing import List, Tuple\n\n\ndef index_on_inner_list(records: List[Tuple], index: int) -> List[Tuple]:\n    \"\"\" Sort a list of lists (or tuples) based on an index of the inner lists (or tuples).\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n    [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n    [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n    [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n", "entry_point": "index_on_inner_list"}
{"task_id": 382, "prompt": "from typing import List\n\n\ndef find_rotation_count(arr: List[int]) -> int:\n    \"\"\" Find the number of rotations in a circularly sorted array.\n    >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_rotation_count([8, 9, 10, 2, 5, 6])\n    3\n    >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n    assert candidate([8, 9, 10, 2, 5, 6]) == 3\n    assert candidate([2, 5, 6, 8, 9, 10]) == 0\n\n", "entry_point": "find_rotation_count"}
{"task_id": 383, "prompt": "def even_bit_toggle_number(number: int) -> int:\n    \"\"\" Toggle all odd bits of a given number and return the new number.\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 15\n    assert candidate(20) == 1\n    assert candidate(30) == 11\n", "entry_point": "even_bit_toggle_number"}
{"task_id": 384, "prompt": "from typing import List\n\n\ndef frequency_Of_Smallest(n: int, arr: List[int]) -> int:\n    \"\"\" Find the frequency of the smallest value in a given array.\n    >>> frequency_Of_Smallest(5, [1,2,3,4,3])\n    1\n    >>> frequency_Of_Smallest(7, [3,1,2,5,6,2,3])\n    1\n    >>> frequency_Of_Smallest(7, [3,3,6,3,7,4,9])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, [1,2,3,4,3]) == 1\n    assert candidate(7, [3,1,2,5,6,2,3]) == 1\n    assert candidate(7, [3,3,6,3,7,4,9]) == 3\n\n", "entry_point": "frequency_Of_Smallest"}
{"task_id": 385, "prompt": "def get_perrin(n: int) -> int:\n    \"\"\" Return the n'th Perrin number.\n    The sequence starts with P(0) = 3, P(1) = 0, P(2) = 2.\n    For n > 2, P(n) = P(n-2) + P(n-3).\n    >>> get_perrin(9)\n    12\n    >>> get_perrin(4)\n    2\n    >>> get_perrin(6)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9) == 12\n    assert candidate(4) == 2\n    assert candidate(6) == 5\n\n", "entry_point": "get_perrin"}
{"task_id": 386, "prompt": "def swap_count(brackets: str) -> int:\n    \"\"\" Find out the minimum number of swaps required for bracket balancing in the given string.\n    >>> swap_count(\"[]][][\")\n    2\n    >>> swap_count(\"[[][]]\")\n    0\n    >>> swap_count(\"[[][]]][\")\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"[]][][\") == 2\n    assert candidate(\"[[][]]\") == 0\n    assert candidate(\"[[][]]][\") == 1\n", "entry_point": "swap_count"}
{"task_id": 387, "prompt": "def even_or_odd(hex_num: str) -> str:\n    \"\"\" Check whether the hexadecimal number is even or odd.\n    >>> even_or_odd(\"AB3454D\")\n    'Odd'\n    >>> even_or_odd(\"ABC\")\n    'Even'\n    >>> even_or_odd(\"AAD\")\n    'Odd'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"AB3454D\") == \"Odd\"\n    assert candidate(\"ABC\") == \"Even\"\n    assert candidate(\"AAD\") == \"Odd\"\n", "entry_point": "even_or_odd"}
{"task_id": 388, "prompt": "from typing import List\n\n\ndef highest_Power_of_2(n: int) -> int:\n    \"\"\" Find the highest power of 2 that is less than or equal to n.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 8\n    assert candidate(19) == 16\n    assert candidate(32) == 32\n\n", "entry_point": "highest_Power_of_2"}
{"task_id": 389, "prompt": "def find_lucas(n: int) -> int:\n    \"\"\" Find the n'th Lucas number.\n    >>> find_lucas(9)\n    76\n    >>> find_lucas(4)\n    7\n    >>> find_lucas(3)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9) == 76\n    assert candidate(4) == 7\n    assert candidate(3) == 4\n", "entry_point": "find_lucas"}
{"task_id": 390, "prompt": "from typing import List\n\n\ndef add_string(items: List, prefix: str) -> List[str]:\n    \"\"\" Insert a given string at the beginning of all items in a list.\n    >>> add_string([1,2,3,4], 'temp{0}')\n    ['temp1', 'temp2', 'temp3', 'temp4']\n    >>> add_string(['a','b','c','d'], 'python{0}')\n    [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    >>> add_string([5,6,7,8], 'string{0}')\n    ['string5', 'string6', 'string7', 'string8']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\n    assert candidate(['a','b','c','d'], 'python{0}') == [ 'pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5,6,7,8], 'string{0}') == ['string5', 'string6', 'string7', 'string8']\n\n", "entry_point": "add_string"}
{"task_id": 391, "prompt": "from typing import List, Dict\n\n\ndef convert_list_dictionary(keys: List[str], values1: List[str], values2: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\" Convert more than one list to nested dictionary.\n    >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])\n    [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    >>> convert_list_dictionary([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])\n    [{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 400}}]\n    >>> convert_list_dictionary([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])\n    [{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 40}}]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([\"S001\", \"S002\", \"S003\", \"S004\"], [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"], [85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    assert candidate([\"abc\", \"def\", \"ghi\", \"jkl\"], [\"python\", \"program\", \"language\", \"programs\"], [100, 200, 300, 400])==[{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 400}}]\n    assert candidate([\"A1\", \"A2\", \"A3\", \"A4\"], [\"java\", \"C\", \"C++\", \"DBMS\"], [10, 20, 30, 40])==[{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 40}}]\n", "entry_point": "convert_list_dictionary"}
{"task_id": 392, "prompt": "from typing import Dict\n\n\ndef get_max_sum(n: int, memo: Dict[int, int] = {}) -> int:\n    \"\"\" Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    >>> get_max_sum(60)\n    106\n    >>> get_max_sum(10)\n    12\n    >>> get_max_sum(2)\n    2\n    \"\"\"\n    if n == 0:\n        return 0\n    if n not in memo:\n        memo[n] = max(\n            get_max_sum(n // 2, memo) + get_max_sum(n // 3, memo) + get_max_sum(n // 4, memo) + get_max_sum(n // 5, memo),\n            n\n        )\n    return memo[n]\n", "test": "def check(candidate):\n    assert candidate(60) == 106\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n\n", "entry_point": "get_max_sum"}
{"task_id": 393, "prompt": "from typing import List\n\n\ndef max_length_list(lists: List[List[int]]) -> (int, List[int]):\n    \"\"\" Find the list with maximum length using lambda function.\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])\n    (5, [1,2,3,4,5])\n    >>> max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])\n    (4, [6,7,8,9])\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]]) == (5, [1,2,3,4,5])\n    assert candidate([[3,4,5],[6,7,8,9],[10,11,12]]) == (4, [6,7,8,9])\n", "entry_point": "max_length_list"}
{"task_id": 394, "prompt": "from typing import Tuple\n\n\ndef check_distinct(elements: Tuple[int, ...]) -> bool:\n    \"\"\" Check if given tuple has all distinct elements.\n    >>> check_distinct((1, 4, 5, 6, 1, 4))\n    False\n    >>> check_distinct((1, 4, 5, 6))\n    True\n    >>> check_distinct((2, 3, 4, 5, 6))\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 4, 5, 6, 1, 4)) == False\n    assert candidate((1, 4, 5, 6)) == True\n    assert candidate((2, 3, 4, 5, 6)) == True\n", "entry_point": "check_distinct"}
{"task_id": 395, "prompt": "from typing import Optional\n\n\ndef first_non_repeating_character(s: str) -> Optional[str]:\n    \"\"\" Find the first non-repeated character in a given string.\n    >>> first_non_repeating_character(\"abcabc\")\n    None\n    >>> first_non_repeating_character(\"abc\")\n    'a'\n    >>> first_non_repeating_character(\"ababc\")\n    'c'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abcabc\") == None\n    assert candidate(\"abc\") == \"a\"\n    assert candidate(\"ababc\") == \"c\"\n", "entry_point": "first_non_repeating_character"}
{"task_id": 396, "prompt": "import re\n\n\ndef check_char(s: str) -> str:\n    \"\"\" Check if the given string starts and ends with the same character using regex.\n    >>> check_char(\"abba\")\n    'Valid'\n    >>> check_char(\"a\")\n    'Valid'\n    >>> check_char(\"abcd\")\n    'Invalid'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"abba\") == 'Valid'\n    assert candidate(\"a\") == 'Valid'\n    assert candidate(\"abcd\") == 'Invalid'\n", "entry_point": "check_char"}
{"task_id": 397, "prompt": "def median_numbers(a: float, b: float, c: float) -> float:\n    \"\"\" Find the median of three specific numbers.\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(20, 10, 30)\n    20.0\n    >>> median_numbers(15, 45, 75)\n    45.0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(25, 55, 65) == 55.0\n    assert candidate(20, 10, 30) == 20.0\n    assert candidate(15, 45, 75) == 45.0\n", "entry_point": "median_numbers"}
{"task_id": 398, "prompt": "from typing import List\n\n\ndef sum_of_digits(numbers: List[int]) -> int:\n    \"\"\" Compute the sum of digits of each number in a given list.\n    >>> sum_of_digits([10, 2, 56])\n    14\n    >>> sum_of_digits([10, 20, 4, 5, 70])\n    19\n    >>> sum_of_digits([10, 20, -4, 5, -70])\n    19\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([10, 2, 56]) == 14\n    assert candidate([10, 20, 4, 5, 70]) == 19\n    assert candidate([10, 20, -4, 5, -70]) == 19\n", "entry_point": "sum_of_digits"}
{"task_id": 399, "prompt": "from typing import Tuple\n\n\ndef bitwise_xor(tuple1: Tuple[int, int, int, int], tuple2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\" Perform the mathematical bitwise xor operation across the given tuples.\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n    (13, 6, 3, 14)\n    >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n    (11, 2, 13, 13)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)\n\n", "entry_point": "bitwise_xor"}
{"task_id": 400, "prompt": "from typing import List, Tuple\n\n\ndef extract_freq(tuples: List[Tuple[int, int]]) -> int:\n    \"\"\" Extract the frequency of unique tuples in the given list order irrespective.\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n    3\n    >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])\n    4\n    >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 4), (1, 2), (4, 3), (5, 6)]) == 3\n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)]) == 4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)]) == 4\n", "entry_point": "extract_freq"}
{"task_id": 401, "prompt": "from typing import Tuple\n\n\ndef add_nested_tuples(tup1: Tuple[Tuple[int, int], ...], tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    \"\"\" Perform index wise addition of tuple elements in the given two nested tuples.\n    >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((7, 10), (7, 14), (3, 10), (8, 13))\n    >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n    ((9, 12), (9, 16), (5, 12), (10, 15))\n    >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n    ((11, 14), (11, 18), (7, 14), (12, 17))\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))\n", "entry_point": "add_nested_tuples"}
{"task_id": 402, "prompt": "def ncr_modp(n: int, r: int, p: int) -> int:\n    \"\"\" Compute the value of nCr % p.\n    >>> ncr_modp(10, 2, 13)\n    6\n    >>> ncr_modp(15, 12, 43)\n    25\n    >>> ncr_modp(17, 9, 18)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 2, 13) == 6\n    assert candidate(15, 12, 43) == 25\n    assert candidate(17, 9, 18) == 10\n\n", "entry_point": "ncr_modp"}
{"task_id": 403, "prompt": "import re\n\n\ndef is_valid_URL(url: str) -> bool:\n    \"\"\" Check if the given url is valid or not using regex.\n    >>> is_valid_URL(\"https://www.google.com\")\n    True\n    >>> is_valid_URL(\"https:/www.gmail.com\")\n    False\n    >>> is_valid_URL(\"https:// www.redit.com\")\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"https://www.google.com\") == True\n    assert candidate(\"https:/www.gmail.com\") == False\n    assert candidate(\"https:// www.redit.com\") == False\n", "entry_point": "is_valid_URL"}
{"task_id": 404, "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\" Return the minimum of two numbers.\n    >>> minimum(1,2)\n    1\n    >>> minimum(-5,-4)\n    -5\n    >>> minimum(0,0)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,2) == 1\n    assert candidate(-5,-4) == -5\n    assert candidate(0,0) == 0\n", "entry_point": "minimum"}
{"task_id": 405, "prompt": "def check_tuplex(tup: tuple, element) -> bool:\n    \"\"\" Check whether an element exists within a tuple.\n    >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')\n    True\n    >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')\n    False\n    >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r') == True\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5') == False\n    assert candidate((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3) == True\n", "entry_point": "check_tuplex"}
{"task_id": 406, "prompt": "def find_Parity(number: int) -> str:\n    \"\"\" Determine if the given number has even or odd parity.\n    >>> find_Parity(12)\n    'Even Parity'\n    >>> find_Parity(7)\n    'Odd Parity'\n    >>> find_Parity(10)\n    'Even Parity'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == \"Even Parity\"\n    assert candidate(7) == \"Odd Parity\"\n    assert candidate(10) == \"Even Parity\"\n", "entry_point": "find_Parity"}
{"task_id": 407, "prompt": "def rearrange_bigger(number: int) -> int:\n    \"\"\" Create the next bigger number by rearranging the digits of a given number.\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    120\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 21\n    assert candidate(10) == False\n    assert candidate(102) == 120\n", "entry_point": "rearrange_bigger"}
{"task_id": 408, "prompt": "from typing import List\n\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\" Find k number of pairs which consist of one element from the first array and one element from the second array.\n    >>> k_smallest_pairs([1,3,7],[2,4,6],2)\n    [[1, 2], [1, 4]]\n    >>> k_smallest_pairs([1,3,7],[2,4,6],1)\n    [[1, 2]]\n    >>> k_smallest_pairs([1,3,7],[2,4,6],7)\n    [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n    assert candidate([1,3,7],[2,4,6],1)==[[1, 2]]\n    assert candidate([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n", "entry_point": "k_smallest_pairs"}
{"task_id": 409, "prompt": "from typing import List, Tuple\n\n\ndef min_product_tuple(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Find the minimum product from the pairs of tuples within a given list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    >>> min_product_tuple([(10, 20), (15, 2), (5, 10)])\n    30\n    >>> min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n    100\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 30\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 100\n", "entry_point": "min_product_tuple"}
{"task_id": 410, "prompt": "from typing import List, Union\n\n\ndef min_val(items: List[Union[int, str]]) -> int:\n    \"\"\" Find the minimum integer value in a given heterogeneous list containing both integers and strings.\n    >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n    2\n    >>> min_val(['Python', 15, 20, 25])\n    15\n    >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n    20\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 2\n    assert candidate(['Python', 15, 20, 25]) == 15\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 20\n\n", "entry_point": "min_val"}
{"task_id": 411, "prompt": "import re\n\n\ndef snake_to_camel(snake_str: str) -> str:\n    \"\"\" Convert a snake case string to camel case string using regex.\n    >>> snake_to_camel('android_tv')\n    'AndroidTv'\n    >>> snake_to_camel('google_pixel')\n    'GooglePixel'\n    >>> snake_to_camel('apple_watch')\n    'AppleWatch'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('android_tv') == 'AndroidTv'\n    assert candidate('google_pixel') == 'GooglePixel'\n    assert candidate('apple_watch') == 'AppleWatch'\n\n", "entry_point": "snake_to_camel"}
{"task_id": 412, "prompt": "from typing import List\n\n\ndef remove_odd(numbers: List[int]) -> List[int]:\n    \"\"\" Remove all odd numbers from the given list and return the modified list.\n    >>> remove_odd([1, 2, 3])\n    [2]\n    >>> remove_odd([2, 4, 6])\n    [2, 4, 6]\n    >>> remove_odd([10, 20, 3])\n    [10, 20]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == [2]\n    assert candidate([2, 4, 6]) == [2, 4, 6]\n    assert candidate([10, 20, 3]) == [10, 20]\n", "entry_point": "remove_odd"}
{"task_id": 413, "prompt": "from typing import List, Tuple\n\n\ndef extract_nth_element(tuples: List[Tuple], n: int) -> List:\n    \"\"\" Extract the nth element from a given list of tuples.\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n    [99, 96, 94, 98]\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n    [98, 97, 91, 94]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)==[98, 97, 91, 94]\n", "entry_point": "extract_nth_element"}
{"task_id": 414, "prompt": "from typing import List\n\n\ndef overlapping(seq1: List[int], seq2: List[int]) -> bool:\n    \"\"\" Check whether there is any value that exists in both sequences.\n    >>> overlapping([1,2,3,4,5],[6,7,8,9])\n    False\n    >>> overlapping([1,2,3],[4,5,6])\n    False\n    >>> overlapping([1,4,5],[1,4,5])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5],[6,7,8,9]) == False\n    assert candidate([1,2,3],[4,5,6]) == False\n    assert candidate([1,4,5],[1,4,5]) == True\n", "entry_point": "overlapping"}
{"task_id": 415, "prompt": "def max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\" Find a pair with the highest product from a given array of integers.\n    >>> max_Product([1,2,3,4,7,0,8,4])\n    (7, 8)\n    >>> max_Product([0,-1,-2,-4,5,0,-6])\n    (-4, -6)\n    >>> max_Product([1,2,3])\n    (2, 3)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,7,0,8,4]) == (7, 8)\n    assert candidate([0,-1,-2,-4,5,0,-6]) == (-4, -6)\n    assert candidate([1,2,3]) == (2, 3)\n", "entry_point": "max_Product"}
{"task_id": 416, "prompt": "def breakSum(number: int) -> int:\n    \"\"\" Divide the given number into three parts recursively and sum them up together to find the maximum sum.\n    >>> breakSum(12)\n    13\n    >>> breakSum(24)\n    27\n    >>> breakSum(23)\n    23\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12) == 13\n    assert candidate(24) == 27\n    assert candidate(23) == 23\n", "entry_point": "breakSum"}
{"task_id": 417, "prompt": "from typing import List, Tuple\n\n\ndef group_tuples(tuples: List[Tuple[str, str]]) -> List[Tuple[str, ...]]:\n    \"\"\" Group tuples by their first element and combine all second elements into a single tuple for each unique first element.\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n    [('a', 'b', 'c'), ('d', 'e')]\n    >>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n    [('f', 'g', 'g'), ('h', 'i')]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n    assert candidate([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n    assert candidate([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]\n\n", "entry_point": "group_tuples"}
{"task_id": 418, "prompt": "from typing import List\n\n\ndef Find_Max(sublists: List[List]) -> List:\n    \"\"\" Find the sublist with the maximum length.\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A', 'B', 'C']\n    >>> Find_Max([[1],[1,2],[1,2,3]])\n    [1, 2, 3]\n    >>> Find_Max([[1,1],[1,2,3],[1,5,6,1]])\n    [1, 5, 6, 1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n    assert candidate([[1],[1,2],[1,2,3]]) == [1,2,3]\n    assert candidate([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]\n\n", "entry_point": "Find_Max"}
{"task_id": 419, "prompt": "from typing import List\n\n\ndef round_and_sum(numbers: List[float]) -> int:\n    \"\"\" Round every number of a given list of numbers and return the total sum multiplied by the length of the list.\n    >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n    243\n    >>> round_and_sum([5,2,9,24.3,29])\n    345\n    >>> round_and_sum([25.0,56.7,89.2])\n    513\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243\n    assert candidate([5,2,9,24.3,29]) == 345\n    assert candidate([25.0,56.7,89.2]) == 513\n\n", "entry_point": "round_and_sum"}
{"task_id": 420, "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\" Return the cube sum of first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 72\n    assert candidate(3) == 288\n    assert candidate(4) == 800\n", "entry_point": "cube_Sum"}
{"task_id": 421, "prompt": "from typing import Tuple, Union\n\n\ndef concatenate_tuple(elements: Tuple[Union[str, int], ...], delimiter: str = '-') -> str:\n    \"\"\" Concatenate each element of the tuple with a delimiter.\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n    'ID-is-4-UTS'\n    >>> concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\"))\n    'QWE-is-4-RTY'\n    >>> concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\"))\n    'ZEN-is-4-OP'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\n    assert candidate((\"QWE\", \"is\", 4, \"RTY\")) == 'QWE-is-4-RTY'\n    assert candidate((\"ZEN\", \"is\", 4, \"OP\")) == 'ZEN-is-4-OP'\n\n", "entry_point": "concatenate_tuple"}
{"task_id": 422, "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\" Calculate the average of cubes of first n natural numbers.\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12\n    >>> find_Average_Of_Cube(1)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2) == 4.5\n    assert candidate(3) == 12\n    assert candidate(1) == 1\n", "entry_point": "find_Average_Of_Cube"}
{"task_id": 423, "prompt": "from typing import List\n\n\ndef get_maxgold(gold: List[List[int]], m: int, n: int) -> int:\n    \"\"\" Given a gold mine of m*n dimensions, each field in this mine contains a positive integer which is the amount of gold in tons. Initially the miner can start from any row in the first column. From a given cell, the miner can move\n    - to the cell diagonally up towards the right\n    - to the right\n    - to the cell diagonally down towards the right\n    Your task is to find out maximum amount of gold the miner can collect.\n    >>> get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]], 4, 4)\n    16\n    >>> get_maxgold([[10, 20],[30, 40]], 2, 2)\n    70\n    >>> get_maxgold([[4, 9],[3, 7]], 2, 2)\n    13\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]], 4, 4) == 16\n    assert candidate([[10, 20],[30, 40]], 2, 2) == 70\n    assert candidate([[4, 9],[3, 7]], 2, 2) == 13\n", "entry_point": "get_maxgold"}
{"task_id": 424, "prompt": "from typing import List, Tuple\n\n\ndef extract_rear(words: Tuple[str, ...]) -> List[str]:\n    \"\"\" Extract the last character of each string in the given tuple.\n    >>> extract_rear(('Mers', 'for', 'Vers'))\n    ['s', 'r', 's']\n    >>> extract_rear(('Avenge', 'for', 'People'))\n    ['e', 'r', 'e']\n    >>> extract_rear(('Gotta', 'get', 'go'))\n    ['a', 't', 'o']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(('Mers', 'for', 'Vers')) == ['s', 'r', 's']\n    assert candidate(('Avenge', 'for', 'People')) == ['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go')) == ['a', 't', 'o']\n", "entry_point": "extract_rear"}
{"task_id": 425, "prompt": "from typing import List\n\n\ndef count_element_in_list(sublists: List[List], element) -> int:\n    \"\"\" Count the number of sublists containing a particular element.\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A') == 3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E') == 1\n", "entry_point": "count_element_in_list"}
{"task_id": 426, "prompt": "from typing import List\n\n\ndef filter_oddnumbers(numbers: List[int]) -> List[int]:\n    \"\"\" Filter odd numbers from a list using a lambda function.\n    >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    >>> filter_oddnumbers([10, 20, 45, 67, 84, 93])\n    [45, 67, 93]\n    >>> filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])\n    [5, 7, 9, 3]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n    assert candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n", "entry_point": "filter_oddnumbers"}
{"task_id": 427, "prompt": "import re\n\n\ndef change_date_format(date_str: str) -> str:\n    \"\"\" Convert a date from yyyy-mm-dd format to dd-mm-yyyy format using regex.\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    >>> change_date_format(\"2020-11-13\")\n    '13-11-2020'\n    >>> change_date_format(\"2021-04-26\")\n    '26-04-2021'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"2026-01-02\") == '02-01-2026'\n    assert candidate(\"2020-11-13\") == '13-11-2020'\n    assert candidate(\"2021-04-26\") == '26-04-2021'\n\n", "entry_point": "change_date_format"}
{"task_id": 428, "prompt": "from typing import List\n\n\ndef shell_sort(arr: List[int]) -> List[int]:\n    \"\"\" Sort the given array using shell sort.\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n    [22, 24, 34, 39, 68, 73, 87]\n    >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n    [16, 30, 32, 74, 82, 83, 96]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    assert candidate([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]\n", "entry_point": "shell_sort"}
{"task_id": 429, "prompt": "from typing import Tuple\n\n\ndef and_tuples(tuple1: Tuple[int, int, int, int], tuple2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\" Extract the elementwise and tuples from the given two tuples.\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n    (1, 2, 3, 0)\n    >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n    (0, 9, 10, 0)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n", "entry_point": "and_tuples"}
{"task_id": 430, "prompt": "from typing import Tuple\n\n\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\" Given the coefficients a, b, and c of a quadratic equation representing a parabola,\n    find the directrix of the parabola.\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    >>> parabola_directrix(9, 8, 4)\n    -2336\n    >>> parabola_directrix(2, 4, 6)\n    -130\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 3, 2) == -198\n    assert candidate(9, 8, 4) == -2336\n    assert candidate(2, 4, 6) == -130\n\n", "entry_point": "parabola_directrix"}
{"task_id": 431, "prompt": "from typing import List\n\n\ndef common_element(list1: List, list2: List) -> bool:\n    \"\"\" Check if two lists have at least one common element.\n    >>> common_element([1,2,3,4,5], [5,6,7,8,9])\n    True\n    >>> common_element([1,2,3,4,5], [6,7,8,9])\n    None\n    >>> common_element(['a','b','c'], ['d','b','e'])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5], [5,6,7,8,9]) == True\n    assert candidate([1,2,3,4,5], [6,7,8,9]) == None\n    assert candidate(['a','b','c'], ['d','b','e']) == True\n", "entry_point": "common_element"}
{"task_id": 432, "prompt": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    \"\"\" Calculate the median of a trapezium given its two bases and height.\n    The median of a trapezium is the average of its two bases.\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    >>> median_trapezium(10, 20, 30)\n    15.0\n    >>> median_trapezium(6, 9, 4)\n    7.5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(15, 25, 35) == 20\n    assert candidate(10, 20, 30) == 15\n    assert candidate(6, 9, 4) == 7.5\n", "entry_point": "median_trapezium"}
{"task_id": 433, "prompt": "from typing import List\n\n\ndef check_greater(numbers: List[int], number: int) -> str:\n    \"\"\" Check whether the entered number is greater than the elements of the given array.\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    'No, entered number is less than those in the array'\n    >>> check_greater([2, 3, 4, 5, 6], 8)\n    'Yes, the entered number is greater than those in the array'\n    >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n    'Yes, the entered number is greater than those in the array'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n    assert candidate([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'\n", "entry_point": "check_greater"}
{"task_id": 434, "prompt": "import re\n\ndef text_match_one(text: str) -> str:\n    \"\"\" Match a string that has an 'a' followed by one or more 'b's.\n    >>> text_match_one(\"ac\")\n    'Not matched!'\n    >>> text_match_one(\"abba\")\n    'Found a match!'\n    \"\"\"\n    if re.search('ab+', text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'\n", "test": "def check(candidate):\n    assert candidate(\"ac\") == 'Not matched!'\n    assert candidate(\"dc\") == 'Not matched!'\n    assert candidate(\"abba\") == 'Found a match!'\n", "entry_point": "text_match_one"}
{"task_id": 435, "prompt": "def last_Digit(number: int) -> int:\n    \"\"\" Return the last digit of the given number.\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(25)\n    5\n    >>> last_Digit(30)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n", "entry_point": "last_Digit"}
{"task_id": 436, "prompt": "def neg_nos(numbers: List[int]) -> str:\n    \"\"\" Given a list of numbers, return a string of negative numbers separated by commas.\n    >>> neg_nos([-1, 4, 5, -6])\n    '-1,-6'\n    >>> neg_nos([-1, -2, 3, 4])\n    '-1,-2'\n    >>> neg_nos([-7, -6, 8, 9])\n    '-7,-6'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([-1, 4, 5, -6]) == '-1,-6'\n    assert candidate([-1, -2, 3, 4]) == '-1,-2'\n    assert candidate([-7, -6, 8, 9]) == '-7,-6'\n", "entry_point": "neg_nos"}
{"task_id": 437, "prompt": "def remove_odd(s: str) -> str:\n    \"\"\" Remove odd characters in a string.\n    >>> remove_odd(\"python\")\n    'yhn'\n    >>> remove_odd(\"program\")\n    'rga'\n    >>> remove_odd(\"language\")\n    'agae'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"python\") == \"yhn\"\n    assert candidate(\"program\") == \"rga\"\n    assert candidate(\"language\") == \"agae\"\n", "entry_point": "remove_odd"}
{"task_id": 438, "prompt": "from typing import List, Tuple\n\n\ndef count_bidirectional(pairs: List[Tuple[int, int]]) -> int:\n    \"\"\" Count the number of bidirectional tuple pairs.\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\n    3\n    >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])\n    2\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)]) == 3\n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)]) == 2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)]) == 4\n", "entry_point": "count_bidirectional"}
{"task_id": 439, "prompt": "def multiple_to_single(numbers: List[int]) -> int:\n    \"\"\" Convert a list of multiple integers into a single integer.\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    >>> multiple_to_single([-1, 2, 3, 4, 5, 6])\n    -123456\n    >>> multiple_to_single([10, 15, 20, 25])\n    10152025\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([11, 33, 50]) == 113350\n    assert candidate([-1, 2, 3, 4, 5, 6]) == -123456\n    assert candidate([10, 15, 20, 25]) == 10152025\n", "entry_point": "multiple_to_single"}
{"task_id": 440, "prompt": "def find_adverb_position(sentence: str) -> tuple:\n    \"\"\" Find all adverbs and their positions in a given sentence.\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    >>> find_adverb_position(\"seriously!! there are many roses\")\n    (0, 9, 'seriously')\n    >>> find_adverb_position(\"unfortunately!! sita is going to home\")\n    (0, 13, 'unfortunately')\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\n    assert candidate(\"seriously!! there are many roses\") == (0, 9, 'seriously')\n    assert candidate(\"unfortunately!! sita is going to home\") == (0, 13, 'unfortunately')\n\n", "entry_point": "find_adverb_position"}
{"task_id": 441, "prompt": "def surfacearea_cube(side_length: int) -> int:\n    \"\"\" Calculate the surface area of a cube given its side length.\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(3)\n    54\n    >>> surfacearea_cube(10)\n    600\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 150\n    assert candidate(3) == 54\n    assert candidate(10) == 600\n", "entry_point": "surfacearea_cube"}
{"task_id": 442, "prompt": "from typing import List\n\n\ndef positive_count(numbers: List[int]) -> float:\n    \"\"\" Calculate the ratio of positive numbers in an array of integers.\n    >>> positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.54\n    >>> positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])\n    0.69\n    >>> positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    0.56\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54\n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56\n", "entry_point": "positive_count"}
{"task_id": 443, "prompt": "from typing import List\n\n\ndef largest_neg(numbers: List[int]) -> int:\n    \"\"\" Find the largest negative number in the given list of integers.\n    >>> largest_neg([1,2,3,-4,-6])\n    -6\n    >>> largest_neg([1,2,3,-8,-9])\n    -9\n    >>> largest_neg([1,2,3,4,-1])\n    -1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,-4,-6]) == -6\n    assert candidate([1,2,3,-8,-9]) == -9\n    assert candidate([1,2,3,4,-1]) == -1\n", "entry_point": "largest_neg"}
{"task_id": 444, "prompt": "from typing import List, Tuple\n\n\ndef trim_tuple(tuples: List[Tuple[int, ...]], k: int) -> List[Tuple[int, ...]]:\n    \"\"\" Trim each tuple in the given list of tuples by removing the first and last k elements.\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n    [(2,), (9,), (2,), (2,)]\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n    [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\n    >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)\n    [(8, 4), (8, 12), (1, 7), (6, 9)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == [(2,), (9,), (2,), (2,)]\n    assert candidate([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == [(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\n    assert candidate([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1) == [(8, 4), (8, 12), (1, 7), (6, 9)]\n", "entry_point": "trim_tuple"}
{"task_id": 445, "prompt": "from typing import Tuple, List\n\n\ndef index_multiplication(tup1: Tuple[Tuple[int, int], ...], tup2: Tuple[Tuple[int, int], ...]) -> List[Tuple[int, int]]:\n    \"\"\" Perform index wise multiplication of tuple elements in the given two tuples.\n    >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)))\n    [(6, 21), (12, 45), (2, 9), (7, 30)]\n    >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)))\n    [(14, 32), (20, 60), (6, 20), (16, 44)]\n    >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)))\n    [(24, 45), (30, 77), (12, 33), (27, 60)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 21), (12, 45), (2, 9), (7, 30))\n    assert candidate(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4))) == ((14, 32), (20, 60), (6, 20), (16, 44))\n    assert candidate(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5))) == ((24, 45), (30, 77), (12, 33), (27, 60))\n", "entry_point": "index_multiplication"}
{"task_id": 446, "prompt": "from typing import List, Tuple\n\n\ndef count_Occurrence(elements: Tuple, targets: List) -> int:\n    \"\"\" Count the occurrence of all target elements in the given tuple.\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])\n    3\n    >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])\n    6\n    >>> count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(('a', 'a', 'c', 'b', 'd'), ['a', 'b']) == 3\n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7]) == 6\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2]) == 2\n", "entry_point": "count_Occurrence"}
{"task_id": 447, "prompt": "from typing import List\n\n\ndef cube_nums(numbers: List[int]) -> List[int]:\n    \"\"\" Find cubes of individual elements in a list using a lambda function.\n    >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    >>> cube_nums([10, 20, 30])\n    [1000, 8000, 27000]\n    >>> cube_nums([12, 15])\n    [1728, 3375]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10, 20, 30]) == [1000, 8000, 27000]\n    assert candidate([12, 15]) == [1728, 3375]\n\n", "entry_point": "cube_nums"}
{"task_id": 448, "prompt": "def cal_sum(n: int) -> int:\n    \"\"\" Calculate the sum of the first n perrin numbers.\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(10)\n    66\n    >>> cal_sum(11)\n    88\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9) == 49\n    assert candidate(10) == 66\n    assert candidate(11) == 88\n", "entry_point": "cal_sum"}
{"task_id": 449, "prompt": "from typing import Tuple\n\n\ndef check_Triangle(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> str:\n    \"\"\" Check whether the triangle is valid or not if 3 points are given.\n    >>> check_Triangle(1,5,2,5,4,6)\n    'Yes'\n    >>> check_Triangle(1,1,1,4,1,5)\n    'No'\n    >>> check_Triangle(1,1,1,1,1,1)\n    'No'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1,5,2,5,4,6) == 'Yes'\n    assert candidate(1,1,1,4,1,5) == 'No'\n    assert candidate(1,1,1,1,1,1) == 'No'\n", "entry_point": "check_Triangle"}
{"task_id": 450, "prompt": "from typing import List\n\n\ndef extract_string(strings: List[str], size: int) -> List[str]:\n    \"\"\" Extract strings of a specified size from a given list of string values.\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n    ['practice', 'solution']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)\n    ['Python']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)\n    ['exercises']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6) == ['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9) == ['exercises']\n\n", "entry_point": "extract_string"}
{"task_id": 451, "prompt": "import re\n\n\ndef remove_whitespaces(s: str) -> str:\n    \"\"\" Remove all whitespaces from the given string using regex.\n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    >>> remove_whitespaces(' Google    Dart ')\n    'GoogleDart'\n    >>> remove_whitespaces(' iOS    Swift ')\n    'iOSSwift'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(' Google    Flutter ') == 'GoogleFlutter'\n    assert candidate(' Google    Dart ') == 'GoogleDart'\n    assert candidate(' iOS    Swift ') == 'iOSSwift'\n", "entry_point": "remove_whitespaces"}
{"task_id": 452, "prompt": "def loss_amount(original: int, current: int) -> int:\n    \"\"\" Calculate the loss amount from the original to the current value. If there is no loss, return None.\n    >>> loss_amount(1500, 1200)\n    None\n    >>> loss_amount(100, 200)\n    100\n    >>> loss_amount(2000, 5000)\n    3000\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1500, 1200) == None\n    assert candidate(100, 200) == 100\n    assert candidate(2000, 5000) == 3000\n", "entry_point": "loss_amount"}
{"task_id": 453, "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\" Find the sum of even factors of a given number.\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(30)\n    48\n    >>> sumofFactors(6)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(18) == 26\n    assert candidate(30) == 48\n    assert candidate(6) == 8\n", "entry_point": "sumofFactors"}
{"task_id": 454, "prompt": "import re\n\ndef text_match_wordz(text: str) -> str:\n    \"\"\" Check if the given text contains a word with 'z'.\n    >>> text_match_wordz(\"pythonz.\")\n    'Found a match!'\n    >>> text_match_wordz(\"xyz.\")\n    'Found a match!'\n    >>> text_match_wordz(\"  lang  .\")\n    'Not matched!'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"pythonz.\") == 'Found a match!'\n    assert candidate(\"xyz.\") == 'Found a match!'\n    assert candidate(\"  lang  .\") == 'Not matched!'\n\n", "entry_point": "text_match_wordz"}
{"task_id": 455, "prompt": "def check_monthnumb_number(month_num: int) -> bool:\n    \"\"\" Check whether the given month number contains 31 days or not.\n    >>> check_monthnumb_number(5)\n    True\n    >>> check_monthnumb_number(2)\n    False\n    >>> check_monthnumb_number(6)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == True\n    assert candidate(2) == False\n    assert candidate(6) == False\n", "entry_point": "check_monthnumb_number"}
{"task_id": 456, "prompt": "from typing import List\n\n\ndef reverse_string_list(strings: List[str]) -> List[str]:\n    \"\"\" Reverse each string in the given list of string values.\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['john','amal','joel','george'])\n    ['nhoj','lama','leoj','egroeg']\n    >>> reverse_string_list(['jack','john','mary'])\n    ['kcaj','nhoj','yram']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    assert candidate(['john','amal','joel','george']) == ['nhoj','lama','leoj','egroeg']\n    assert candidate(['jack','john','mary']) == ['kcaj','nhoj','yram']\n", "entry_point": "reverse_string_list"}
{"task_id": 457, "prompt": "def Find_Min(sublists: List[List[Any]]) -> List[Any]:\n    \"\"\" Find the sublist with the minimum length.\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    >>> Find_Min([[1,1],[1,1,1],[1,2,7,8]])\n    [1,1]\n    >>> Find_Min([['x'],['x','y'],['x','y','z']])\n    ['x']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1],[1,2],[1,2,3]]) == [1]\n    assert candidate([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n    assert candidate([['x'],['x','y'],['x','y','z']]) == ['x']\n", "entry_point": "Find_Min"}
{"task_id": 458, "prompt": "def rectangle_area(length: int, width: int) -> int:\n    \"\"\" Calculate the area of a rectangle given its length and width.\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(10, 5)\n    50\n    >>> rectangle_area(4, 2)\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 20) == 200\n    assert candidate(10, 5) == 50\n    assert candidate(4, 2) == 8\n\n", "entry_point": "rectangle_area"}
{"task_id": 459, "prompt": "import re\n\n\ndef remove_uppercase(s: str) -> str:\n    \"\"\" Remove all uppercase substrings from the given string using regex.\n    >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n    'cstyoravoitshos'\n    >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n    'wtchheinerntrdo'\n    >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n    'oiceachndreomendaion'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n    assert candidate('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'\n\n", "entry_point": "remove_uppercase"}
{"task_id": 460, "prompt": "from typing import List\n\n\ndef Extract(list_of_lists: List[List[int]]) -> List[int]:\n    \"\"\" Get the first element of each sublist in the given list of lists.\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[1,2,3],[4, 5]])\n    [1, 4]\n    >>> Extract([[9,8,1],[1,2]])\n    [9, 1]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    assert candidate([[1,2,3],[4, 5]]) == [1,4]\n    assert candidate([[9,8,1],[1,2]]) == [9,1]\n", "entry_point": "Extract"}
{"task_id": 461, "prompt": "from typing import List\n\n\ndef upper_ctr(s: str) -> int:\n    \"\"\" Count the number of upper case characters in the given string.\n    >>> upper_ctr('PYthon')\n    2\n    >>> upper_ctr('BigData')\n    2\n    >>> upper_ctr('program')\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('PYthon') == 2\n    assert candidate('BigData') == 2\n    assert candidate('program') == 0\n", "entry_point": "upper_ctr"}
{"task_id": 462, "prompt": "from typing import List\n\n\ndef combinations_list(elements: List[str]) -> List[List[str]]:\n    \"\"\" Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n", "entry_point": "ompt\": \"from typing import List\n\n\ndef combinations_list(elements: List[str]) -> List[List[str]]:\n    \"\"\" Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n\",\n  \"test\": \"def check(candidate):\n    assert candidate(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\",\n  "}
{"task_id": 463, "prompt": "from typing import List\n\n\ndef max_subarray_product(nums: List[int]) -> int:\n    \"\"\" Find the maximum product subarray of the given array.\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    >>> max_subarray_product([6, -3, -10, 0, 2])\n    180\n    >>> max_subarray_product([-2, -40, 0, -2, -3])\n    80\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n", "entry_point": "max_subarray_product"}
{"task_id": 464, "prompt": "from typing import Dict\n\n\ndef check_value(dictionary: Dict[str, int], value: int) -> bool:\n    \"\"\" Check if all values in the dictionary are the same as the given value.\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10)\n    False\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10) == False\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12) == True\n    assert candidate({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5) == False\n", "entry_point": "check_value"}
{"task_id": 465, "prompt": "from typing import Dict\n\n\ndef drop_empty(items: Dict[str, str]) -> Dict[str, str]:\n    \"\"\" Drop empty items from a given dictionary.\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n    {'c1': 'Red', 'c2': 'Green'}\n    >>> drop_empty({'c1': 'Red', 'c2': None, 'c3':None})\n    {'c1': 'Red'}\n    >>> drop_empty({'c1': None, 'c2': 'Green', 'c3':None})\n    {'c2': 'Green'}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert candidate({'c1': 'Red', 'c2': None, 'c3':None}) == {'c1': 'Red'}\n    assert candidate({'c1': None, 'c2': 'Green', 'c3':None}) == {'c2': 'Green'}\n", "entry_point": "drop_empty"}
{"task_id": 466, "prompt": "from typing import List\n\n\ndef find_peak(numbers: List[int], n: int) -> int:\n    \"\"\" Find the peak element in the given array. A peak element is an element which is greater than or equal to its neighbors.\n    For corner elements, we need to consider only one neighbor.\n    >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n    2\n    >>> find_peak([2, 3, 4, 5, 6], 5)\n    4\n    >>> find_peak([8, 9, 11, 12, 14, 15], 6)\n    5\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 3, 20, 4, 1, 0], 6) == 2\n    assert candidate([2, 3, 4, 5, 6], 5) == 4\n    assert candidate([8, 9, 11, 12, 14, 15], 6) == 5\n", "entry_point": "find_peak"}
{"task_id": 467, "prompt": "from typing import List\n\n\ndef decimal_to_Octal(number: int) -> int:\n    \"\"\" Convert a decimal number to an octal number.\n    >>> decimal_to_Octal(10)\n    12\n    >>> decimal_to_Octal(2)\n    2\n    >>> decimal_to_Octal(33)\n    41\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 12\n    assert candidate(2) == 2\n    assert candidate(33) == 41\n\n", "entry_point": "decimal_to_Octal"}
{"task_id": 468, "prompt": "from typing import List\n\n\ndef max_product(nums: List[int], length: int) -> int:\n    \"\"\" Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n    >>> max_product([3, 100, 4, 5, 150, 6], 6)\n    45000\n    >>> max_product([4, 42, 55, 68, 80], 5)\n    50265600\n    >>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n    21780000\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 100, 4, 5, 150, 6], 6) == 45000\n    assert candidate([4, 42, 55, 68, 80], 5) == 50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000\n", "entry_point": "max_product"}
{"task_id": 469, "prompt": "from typing import List\n\n\ndef max_profit(prices: List[int], k: int) -> int:\n    \"\"\" Find the maximum profit that can be earned from a maximum of k stock transactions.\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n    7\n    >>> max_profit([10, 6, 8, 4, 2], 2)\n    2\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n    assert candidate([2, 4, 7, 5, 4, 3, 5], 2) == 7\n    assert candidate([10, 6, 8, 4, 2], 2) == 2\n", "entry_point": "max_profit"}
{"task_id": 470, "prompt": "from typing import Tuple\n\n\ndef add_pairwise(numbers: Tuple[int, ...]) -> Tuple[int, ...]:\n    \"\"\" Find the pairwise addition of the elements of the given tuple.\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((2, 6, 8, 9, 11))\n    (8, 14, 17, 20)\n    >>> add_pairwise((3, 7, 9, 10, 12))\n    (10, 16, 19, 22)\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n    assert candidate((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12)) == (10, 16, 19, 22)\n\n", "entry_point": "add_pairwise"}
{"task_id": 471, "prompt": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int, divisor: int) -> int:\n    \"\"\" Find remainder of array multiplication divided by n.\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 6, 11)\n    9\n    >>> find_remainder([1, 1, 1], 3, 1)\n    0\n    >>> find_remainder([1, 2, 1], 3, 2)\n    0\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([100, 10, 5, 25, 35, 14], 6, 11) == 9\n    assert candidate([1, 1, 1], 3, 1) == 0\n    assert candidate([1, 2, 1], 3, 2) == 0\n", "entry_point": "find_remainder"}
{"task_id": 472, "prompt": "from typing import List\n\n\ndef check_Consecutive(numbers: List[int]) -> bool:\n    \"\"\" Check whether the given list contains consecutive numbers or not.\n    >>> check_Consecutive([1,2,3,4,5])\n    True\n    >>> check_Consecutive([1,2,3,5,6])\n    False\n    >>> check_Consecutive([1,2,1])\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4,5]) == True\n    assert candidate([1,2,3,5,6]) == False\n    assert candidate([1,2,1]) == False\n", "entry_point": "check_Consecutive"}
{"task_id": 473, "prompt": "from typing import List, Set, Tuple\n\n\ndef tuple_intersection(tuples1: List[Tuple[int, int]], tuples2: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n    \"\"\" Find the intersection of two lists of tuples, considering each tuple irrespective of their order.\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n    {(4, 5), (3, 4), (5, 6)}\n    >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)])\n    {(4, 7), (1, 4)}\n    >>> tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)])\n    {(1, 3), (2, 3)}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    assert candidate([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n    assert candidate([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}\n", "entry_point": "tuple_intersection"}
{"task_id": 474, "prompt": "from typing import List\n\n\ndef replace_char(s: str, old: str, new: str) -> str:\n    \"\"\" Replace all occurrences of 'old' character with 'new' character in the given string.\n    >>> replace_char(\"polygon\", 'y', 'l')\n    'pollgon'\n    >>> replace_char(\"character\", 'c', 'a')\n    'aharaater'\n    >>> replace_char(\"python\", 'l', 'a')\n    'python'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"polygon\", 'y', 'l') == \"pollgon\"\n    assert candidate(\"character\", 'c', 'a') == \"aharaater\"\n    assert candidate(\"python\", 'l', 'a') == \"python\"\n\n", "entry_point": "replace_char"}
{"task_id": 475, "prompt": "from typing import Dict, List\n\n\ndef sort_counter(counter: Dict[str, int]) -> List[tuple]:\n    \"\"\" Sort a dictionary by its values in descending order and return as a list of tuples.\n    >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n    [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    >>> sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})\n    [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    >>> sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})\n    [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    assert candidate({'Math':400, 'Physics':300, 'Chemistry':250}) == [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({'Math':900, 'Physics':1000, 'Chemistry':1250}) == [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n", "entry_point": "sort_counter"}
{"task_id": 476, "prompt": "from typing import List\n\n\ndef big_sum(arr: List[int]) -> int:\n    \"\"\" Find the sum of the largest and smallest value in a given array.\n    >>> big_sum([1,2,3])\n    4\n    >>> big_sum([-1,2,3,4])\n    3\n    >>> big_sum([2,3,6])\n    8\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3]) == 4\n    assert candidate([-1,2,3,4]) == 3\n    assert candidate([2,3,6]) == 8\n", "entry_point": "big_sum"}
{"task_id": 477, "prompt": "def is_lower(s: str) -> str:\n    \"\"\" Convert the given string to lower case.\n    >>> is_lower(\"InValid\")\n    'invalid'\n    >>> is_lower(\"TruE\")\n    'true'\n    >>> is_lower(\"SenTenCE\")\n    'sentence'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"InValid\") == \"invalid\"\n    assert candidate(\"TruE\") == \"true\"\n    assert candidate(\"SenTenCE\") == \"sentence\"\n", "entry_point": "is_lower"}
{"task_id": 478, "prompt": "def remove_lowercase(s: str) -> str:\n    \"\"\" Remove all lowercase letters from a given string.\n    >>> remove_lowercase(\"PYTHon\")\n    'PYTH'\n    >>> remove_lowercase(\"FInD\")\n    'FID'\n    >>> remove_lowercase(\"STRinG\")\n    'STRG'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"PYTHon\") == 'PYTH'\n    assert candidate(\"FInD\") == 'FID'\n    assert candidate(\"STRinG\") == 'STRG'\n", "entry_point": "remove_lowercase"}
{"task_id": 479, "prompt": "def first_Digit(number: int) -> int:\n    \"\"\" Find the first digit of a given number.\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(456)\n    4\n    >>> first_Digit(12)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(123) == 1\n    assert candidate(456) == 4\n    assert candidate(12) == 1\n", "entry_point": "first_Digit"}
{"task_id": 480, "prompt": "from typing import List\n\n\ndef get_max_occuring_char(text: str) -> str:\n    \"\"\" Find the maximum occurring character in a given string.\n    >>> get_max_occuring_char(\"data\")\n    'a'\n    >>> get_max_occuring_char(\"create\")\n    'e'\n    >>> get_max_occuring_char(\"brilliant girl\")\n    'i'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"data\") == \"a\"\n    assert candidate(\"create\") == \"e\"\n    assert candidate(\"brilliant girl\") == \"i\"\n\n", "entry_point": "get_max_occuring_char"}
{"task_id": 481, "prompt": "from typing import List\n\n\ndef is_subset_sum(numbers: List[int], n: int, sum: int) -> bool:\n    \"\"\" Determine if there is a subset of the given set with sum equal to the given sum.\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n    True\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n    False\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 9) == True\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 30) == False\n    assert candidate([3, 34, 4, 12, 5, 2], 6, 15) == True\n\n", "entry_point": "is_subset_sum"}
{"task_id": 482, "prompt": "import re\n\n\ndef match(text: str) -> str:\n    \"\"\" Find sequences of one upper case letter followed by lower case letters.\n    >>> match(\"Geeks\")\n    'Yes'\n    >>> match(\"geeksforGeeks\")\n    'Yes'\n    >>> match(\"geeks\")\n    'No'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(\"Geeks\") == 'Yes'\n    assert candidate(\"geeksforGeeks\") == 'Yes'\n    assert candidate(\"geeks\") == 'No'\n\n", "entry_point": "match"}
{"task_id": 483, "prompt": "from typing import List\n\n\ndef first_Factorial_Divisible_Number(x: int) -> int:\n    \"\"\" Find the first natural number whose factorial is divisible by x.\n    >>> first_Factorial_Divisible_Number(10)\n    5\n    >>> first_Factorial_Divisible_Number(15)\n    5\n    >>> first_Factorial_Divisible_Number(5)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 5\n    assert candidate(15) == 5\n    assert candidate(5) == 4\n", "entry_point": "first_Factorial_Divisible_Number"}
{"task_id": 484, "prompt": "from typing import List, Tuple\n\n\ndef remove_matching_tuple(tuples1: List[Tuple[str, str]], tuples2: List[Tuple[str, str]]) -> List[Tuple[str, str]]:\n    \"\"\" Write a function to remove the matching tuples from the given two tuples.\n    >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    [('you', '?')]\n    >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n    [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n    [('Its', 'been'), ('day', 'without')]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n    assert candidate([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    assert candidate([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]\n", "entry_point": "remove_matching_tuple"}
{"task_id": 485, "prompt": "from typing import List\n\n\ndef largest_palindrome(numbers: List[int], size: int) -> int:\n    \"\"\" Find the largest palindromic number in the given array.\n    >>> largest_palindrome([1, 232, 54545, 999991], 4)\n    54545\n    >>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n    5\n    >>> largest_palindrome([1, 3, 7, 9, 45], 5)\n    9\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 232, 54545, 999991], 4) == 54545\n    assert candidate([1, 2, 3, 4, 5, 50], 6) == 5\n    assert candidate([1, 3, 7, 9, 45], 5) == 9\n\n", "entry_point": "largest_palindrome"}
{"task_id": 486, "prompt": "from typing import List\n\n\ndef binomial_probability(n: int, k: int, p: float) -> float:\n    \"\"\" Compute binomial probability for given number of trials n, number of successes k,\n    and probability of success p.\n    >>> binomial_probability(10, 5, 1.0/3)\n    0.13656454808718185\n    >>> binomial_probability(11, 6, 2.0/4)\n    0.2255859375\n    >>> binomial_probability(12, 7, 3.0/5)\n    0.227030335488\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 5, 1.0/3) == 0.13656454808718185\n    assert candidate(11, 6, 2.0/4) == 0.2255859375\n    assert candidate(12, 7, 3.0/5) == 0.227030335488\n\n", "entry_point": "binomial_probability"}
{"task_id": 487, "prompt": "from typing import List\n\n\ndef sort_tuple(tuples: List[tuple]) -> List[tuple]:\n    \"\"\" Sort a list of tuples in increasing order by the last element in each tuple.\n    >>> sort_tuple([(1, 3), (3, 2), (2, 1)])\n    [(2, 1), (3, 2), (1, 3)]\n    >>> sort_tuple([(2, 4), (3, 3), (1, 1)])\n    [(1, 1), (3, 3), (2, 4)]\n    >>> sort_tuple([(3, 9), (6, 7), (4, 3)])\n    [(4, 3), (6, 7), (3, 9)]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(1, 3), (3, 2), (2, 1)]) == [(2, 1), (3, 2), (1, 3)]\n    assert candidate([(2, 4), (3, 3), (1, 1)]) == [(1, 1), (3, 3), (2, 4)]\n    assert candidate([(3, 9), (6, 7), (4, 3)]) == [(4, 3), (6, 7), (3, 9)]\n\n", "entry_point": "sort_tuple"}
{"task_id": 488, "prompt": "from typing import List\n\n\ndef area_pentagon(side_length: float) -> float:\n    \"\"\" Calculate the area of a pentagon with the given side length.\n    >>> area_pentagon(5)\n    43.01193501472417\n    >>> area_pentagon(10)\n    172.0477400588967\n    >>> area_pentagon(15)\n    387.10741513251753\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 43.01193501472417\n    assert candidate(10) == 172.0477400588967\n    assert candidate(15) == 387.10741513251753\n\n", "entry_point": "area_pentagon"}
{"task_id": 489, "prompt": "from typing import List\n\n\ndef frequency_Of_Largest(n: int, arr: List[int]) -> int:\n    \"\"\" Find the frequency of the largest value in a given array.\n    >>> frequency_Of_Largest(5, [1,2,3,4,4])\n    2\n    >>> frequency_Of_Largest(3, [5,6,5])\n    1\n    >>> frequency_Of_Largest(4, [2,7,7,7])\n    3\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, [1,2,3,4,4]) == 2\n    assert candidate(3, [5,6,5]) == 1\n    assert candidate(4, [2,7,7,7]) == 3\n", "entry_point": "frequency_Of_Largest"}
{"task_id": 490, "prompt": "from typing import List, Tuple, Set\n\n\ndef extract_symmetric(pairs: List[Tuple[int, int]]) -> Set[Tuple[int, int]]:\n    \"\"\" Extract all the pairs which are symmetric in the given tuple list.\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])\n    {(8, 9), (6, 7)}\n    >>> extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])\n    {(9, 10), (7, 8)}\n    >>> extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])\n    {(8, 9), (10, 11)}\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)]) == {(8, 9), (6, 7)}\n    assert candidate([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)]) == {(9, 10), (7, 8)}\n    assert candidate([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)]) == {(8, 9), (10, 11)}\n", "entry_point": "extract_symmetric"}
{"task_id": 491, "prompt": "def sum_gp(first_term: int, n_terms: int, common_ratio: int) -> int:\n    \"\"\" Calculate the sum of a geometric progression series given the first term,\n    the total number of terms, and the common ratio.\n    >>> sum_gp(1, 5, 2)\n    31\n    >>> sum_gp(1, 5, 4)\n    341\n    >>> sum_gp(2, 6, 3)\n    728\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(1, 5, 2) == 31\n    assert candidate(1, 5, 4) == 341\n    assert candidate(2, 6, 3) == 728\n\n", "entry_point": "sum_gp"}
{"task_id": 492, "prompt": "from typing import List\n\n\ndef binary_search(arr: List[int], target: int) -> bool:\n    \"\"\" Search an element in the given array by using binary search.\n    >>> binary_search([1,2,3,5,8], 6)\n    False\n    >>> binary_search([7, 8, 9, 10, 13], 10)\n    True\n    >>> binary_search([11, 13, 14, 19, 22, 36], 23)\n    False\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,5,8], 6) == False\n    assert candidate([7, 8, 9, 10, 13], 10) == True\n    assert candidate([11, 13, 14, 19, 22, 36], 23) == False\n", "entry_point": "binary_search"}
{"task_id": 494, "prompt": "from typing import Tuple\n\n\ndef binary_to_integer(binary_tuple: Tuple[int, ...]) -> int:\n    \"\"\" Convert the given binary tuple to integer.\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    105\n    >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n    101\n    >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n    53\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate((1, 1, 0, 1, 0, 0, 1)) == 105\n    assert candidate((0, 1, 1, 0, 0, 1, 0, 1)) == 101\n    assert candidate((1, 1, 0, 1, 0, 1)) == 53\n\n", "entry_point": "binary_to_integer"}
{"task_id": 495, "prompt": "import re\n\n\ndef remove_lowercase(s: str) -> str:\n    \"\"\" Remove all lowercase substrings from the given string using regex.\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    >>> remove_lowercase('ProducTnamEstreAmIngMediAplAYer')\n    'PTEAIMAAY'\n    >>> remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')\n    'NTYSZTNOGI'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n    assert candidate('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n    assert candidate('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'\n\n", "entry_point": "remove_lowercase"}
{"task_id": 496, "prompt": "from typing import List\nimport heapq\n\ndef heap_queue_smallest(numbers: List[int], k: int) -> List[int]:\n    \"\"\" Find the smallest k integers from a given list of numbers using heap queue algorithm.\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n    [14, 22, 25]\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n    [14, 22]\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n    [14, 22, 22, 25, 35]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58], 3) == [14, 22, 25]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58], 2) == [14, 22]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5) == [14, 22, 22, 25, 35]\n", "entry_point": "heap_queue_smallest"}
{"task_id": 497, "prompt": "from typing import List\n\n\ndef surfacearea_cone(radius: float, height: float) -> float:\n    \"\"\" Calculate the surface area of a cone given its radius and height.\n    >>> surfacearea_cone(5, 12)\n    282.7433388230814\n    >>> surfacearea_cone(10, 15)\n    880.5179353159282\n    >>> surfacearea_cone(19, 17)\n    2655.923961165254\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5, 12) == 282.7433388230814\n    assert candidate(10, 15) == 880.5179353159282\n    assert candidate(19, 17) == 2655.923961165254\n\n", "entry_point": "surfacearea_cone"}
{"task_id": 498, "prompt": "def gcd(a: int, b: int) -> int:\n    \"\"\" Find the greatest common divisor (GCD) of two positive integers.\n    >>> gcd(12, 17)\n    1\n    >>> gcd(4, 6)\n    2\n    >>> gcd(2, 9)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(12, 17) == 1\n    assert candidate(4, 6) == 2\n    assert candidate(2, 9) == 1\n\n", "entry_point": "gcd"}
{"task_id": 499, "prompt": "def diameter_circle(radius: float) -> float:\n    \"\"\" Calculate the diameter of a circle given its radius.\n    >>> diameter_circle(10)\n    20\n    >>> diameter_circle(40)\n    80\n    >>> diameter_circle(15)\n    30\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10) == 20\n    assert candidate(40) == 80\n    assert candidate(15) == 30\n\n", "entry_point": "diameter_circle"}
{"task_id": 500, "prompt": "from typing import List\n\n\ndef concatenate_elements(elements: List[str]) -> str:\n    \"\"\" Concatenate all elements of the given list into a string.\n    >>> concatenate_elements(['hello', 'there', 'have', 'a', 'rocky', 'day'])\n    'hello there have a rocky day'\n    >>> concatenate_elements(['Hi', 'there', 'How', 'are', 'you'])\n    'Hi there How are you'\n    >>> concatenate_elements(['Part', 'of', 'the', 'journey', 'is', 'end'])\n    'Part of the journey is end'\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['hello', 'there', 'have', 'a', 'rocky', 'day']) == 'hello there have a rocky day'\n    assert candidate(['Hi', 'there', 'How', 'are', 'you']) == 'Hi there How are you'\n    assert candidate(['Part', 'of', 'the', 'journey', 'is', 'end']) == 'Part of the journey is end'\n\n", "entry_point": "concatenate_elements"}
{"task_id": 501, "prompt": "from typing import List\n\n\ndef num_comm_div(a: int, b: int) -> int:\n    \"\"\" Find the number of common divisors between two numbers in a given pair.\n    >>> num_comm_div(2, 4)\n    2\n    >>> num_comm_div(12, 24)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(2, 4) == 2\n    assert candidate(2, 8) == 2\n    assert candidate(12, 24) == 6\n\n", "entry_point": "num_comm_div"}
{"task_id": 502, "prompt": "def find(a: int, b: int) -> int:\n    \"\"\" Find the remainder of a divided by b.\n    >>> find(3, 3)\n    0\n    >>> find(10, 3)\n    1\n    >>> find(16, 5)\n    1\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(3, 3) == 0\n    assert candidate(10, 3) == 1\n    assert candidate(16, 5) == 1\n", "entry_point": "find"}
{"task_id": 503, "prompt": "from typing import List\n\n\ndef add_consecutive_nums(numbers: List[int]) -> List[int]:\n    \"\"\" Add consecutive numbers of a given list and return the new list.\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [2, 4, 7, 8, 9, 11, 13]\n    >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [9, 13, 17, 15, 16]\n    >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n    assert candidate([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]\n", "entry_point": "add_consecutive_nums"}
{"task_id": 504, "prompt": "def sum_Of_Series(n: int) -> int:\n    \"\"\" Find the cube sum of first n natural numbers.\n    >>> sum_Of_Series(5)\n    225\n    >>> sum_Of_Series(2)\n    9\n    >>> sum_Of_Series(3)\n    36\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(5) == 225\n    assert candidate(2) == 9\n    assert candidate(3) == 36\n", "entry_point": "sum_Of_Series"}
{"task_id": 505, "prompt": "from typing import List\n\n\ndef re_order(numbers: List[int]) -> List[int]:\n    \"\"\" Write a function to move all zeroes to the end of the given array.\n    >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n    [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n    [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n    [3, 11, 74, 14, 1, 2, 0, 0, 0]\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    assert candidate([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    assert candidate([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]\n", "entry_point": "re_order"}
{"task_id": 506, "prompt": "from typing import List\n\n\ndef permutation_coefficient(n: int, k: int) -> int:\n    \"\"\" Calculate the permutation coefficient p(n, k).\n    >>> permutation_coefficient(10, 2)\n    90\n    >>> permutation_coefficient(10, 3)\n    720\n    >>> permutation_coefficient(10, 1)\n    10\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(10, 2) == 90\n    assert candidate(10, 3) == 720\n    assert candidate(10, 1) == 10\n", "entry_point": "permutation_coefficient"}
{"task_id": 507, "prompt": "from typing import List\n\n\ndef remove_words(words: List[str], to_remove: List[str]) -> List[str]:\n    \"\"\" Remove specific words from a given list.\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])\n    ['red', 'green', 'blue', 'black']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])\n    ['red', 'green', 'blue', 'white']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])\n    ['red', 'green', 'black', 'orange']\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange']) == ['red', 'green', 'blue', 'black']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange']) == ['red', 'green', 'blue', 'white']\n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white']) == ['red', 'green', 'black', 'orange']\n", "entry_point": "remove_words"}
{"task_id": 508, "prompt": "from typing import List\n\n\ndef same_order(list1: List[str], list2: List[str]) -> bool:\n    \"\"\" Check if the common elements between two given lists are in the same order or not.\n    >>> same_order(['red','green','black','orange'],['red','pink','green','white','black'])\n    True\n    >>> same_order(['red','pink','green','white','black'],['white','orange','pink','black'])\n    False\n    >>> same_order(['red','green','black','orange'],['red','pink','green','white','black'])\n    True\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(['red','green','black','orange'],['red','pink','green','white','black']) == True\n    assert candidate(['red','pink','green','white','black'],['white','orange','pink','black']) == False\n    assert candidate(['red','green','black','orange'],['red','pink','green','white','black']) == True\n", "entry_point": "same_order"}
{"task_id": 509, "prompt": "def average_Odd(n: int) -> float:\n    \"\"\" Find the average of odd numbers till a given odd number.\n    >>> average_Odd(9)\n    5\n    >>> average_Odd(5)\n    3\n    >>> average_Odd(11)\n    6\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate(9) == 5\n    assert candidate(5) == 3\n    assert candidate(11) == 6\n", "entry_point": "average_Odd"}
{"task_id": 510, "prompt": "from typing import List\n\n\ndef no_of_subsequences(arr: List[int], k: int) -> int:\n    \"\"\" Find the number of subsequences having product smaller than k for the given non negative array.\n    >>> no_of_subsequences([1,2,3,4], 10)\n    11\n    >>> no_of_subsequences([4,8,7,2], 50)\n    9\n    >>> no_of_subsequences([5,6,7,8], 15)\n    4\n    \"\"\"\n", "test": "def check(candidate):\n    assert candidate([1,2,3,4], 10) == 11\n    assert candidate([4,8,7,2], 50) == 9\n    assert candidate([5,6,7,8], 15) == 4\n\n", "entry_point": "no_of_subsequences"}
